<?
require_once 'clients/CamemisPage.php';
require_once 'js/JsCalendarPanel.php';
require_once 'js/JsCalendarView.php';
require_once 'js/jsCalendarField.php';
require_once 'utiles/Utiles.php';
require_once 'clients/CamemisField.php';
require_once 'localization/ExtjsLocalization.php';
require_once 'include/Common.inc.php';
require_once setUserLoacalization();

$CALENDAR_SRC = Zend_Registry::get('CAMEMIS_URL') . "/public/calendar/";

$LABEL_ITEMS = "[";

$LABEL_ITEMS .="{
    xtype: 'displayfield',
    value : '".USER."',
    labelStyle: 'background:#306da6; width : 12px; height: 12px; margin-top: 4px; padding : 0;' 
}";

switch(UserAuth::getUserType()){
    default:
        $LABEL_ITEMS .=",{
            xtype: 'displayfield',
            value : '".SCHOOL_EVENT."',
            labelStyle: 'background:#EDA12A; width : 12px; height: 12px; margin-top: 4px; padding : 0;' 
        }";
        break;
    case "STUDENT":
    case "TEACHER":
    case "INSTRUCTOR":
        $LABEL_ITEMS .=",{
            xtype: 'displayfield',
            value : '".CLASS_EVENTS."',
            labelStyle: 'background:#EDA12A; width : 12px; height: 12px; margin-top: 4px; padding : 0;' 
        }";
        $LABEL_ITEMS .=",{
            xtype: 'displayfield',
            value : '".EXAM."',
            labelStyle: 'background:#d63333; width : 12px; height: 12px; margin-top: 4px; padding : 0;' 
        }";

        $LABEL_ITEMS .=",{
            xtype: 'displayfield',
            value : '".CLUB_EVENT."',
            labelStyle: 'background:#339966; width : 12px; height: 12px; margin-top: 4px; padding : 0;' 
        }";
        break;
}

$LABEL_ITEMS .= "]";
?>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <title>CAMEMIS</title>
        <!-- Ext includes -->
        <script type="text/javascript" src="/public/ext-3.4.0/ext-camemis.php?key=<?=Zend_Registry::get('MODUL_API');?>"></script>
        <link rel="stylesheet" type="text/css" href="/public/ext-3.4.0/resources/css/ext-all-css-camemis.php?key=<?=Zend_Registry::get('MODUL_API');?>" />
        <?
        switch (Zend_Registry::get('SYSTEM_LANGUAGE')) {
            case "KHMER":
                echo "<link href=\"http://fonts.googleapis.com/css?family=Hanuman:regular,bold&subset=khmer\" rel=\"stylesheet\" type=\"text/css\">";
                echo "<link href=\"/public/css/main-khmer.css\">";
            break;
        }
        ?>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>calendar-all.js"></script>
        <!-- Calendar-specific includes -->
        <link rel="stylesheet" type="text/css" href="<?= $CALENDAR_SRC; ?>resources/css/calendar.css" />
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/Ext.calendar.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/templates/DayHeaderTemplate.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/templates/DayBodyTemplate.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/templates/DayViewTemplate.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/templates/BoxLayoutTemplate.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/templates/MonthViewTemplate.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/dd/CalendarScrollManager.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/dd/StatusProxy.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/dd/CalendarDD.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/dd/DayViewDD.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/EventRecord.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/views/MonthDayDetailView.js"></script>
        <script type='text/javascript'><?= jsCalendarPicker(); ?></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/WeekEventRenderer.js"></script>
        <script type='text/javascript'><?= jsMonthView(); ?></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/views/DayHeaderView.js"></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/views/DayBodyView.js"></script>
        <script type='text/javascript'><?= jsDayView(); ?></script>
        <script type="text/javascript" src="<?= $CALENDAR_SRC; ?>src/views/WeekView.js"></script>
        <script type='text/javascript'><?= jsDateRangeField(); ?></script>
        <script type='text/javascript'><?= jsReminderField(); ?></script>
        <script type='text/javascript'><?= jsEventEditForm(); ?></script>
        <script type='text/javascript'><?= jsEventEditWindow(); ?></script>
        <script type='text/javascript'><?= jsSchoolEventWindow(); ?></script>
        <script type='text/javascript'><?= jsCalendarPanel(); ?></script>
        <!-- App -->
        <link rel="stylesheet" type="text/css" href="<?= $CALENDAR_SRC; ?>resources/css/examples.css" />
        <?=CamemisPage::loadExtLocalization();?>
    </head>
    <script>
    var calendarList = {
        "calendars":[{
            "id":1,
            "title":"Home"
        },{
            "id":2,
            "title":"Work"
        },{
            "id":3,
            "title":"School"
        }]
    };
    App = function() {
        return {
            init: function() {

                Ext.BLANK_IMAGE_URL = '/public/ext-3.4.0/resources/images/default/s.gif';
                // This is an example calendar store that enables the events to have
                // different colors based on CalendarId. This is not a fully-implmented
                // multi-calendar implementation, which is beyond the scope of this sample app
                this.calendarStore = new Ext.data.JsonStore({
                    storeId: 'calendarStore',
                    root: 'calendars',
                    idProperty: 'id',
                    data: calendarList, // defined in calendar-list.js
                    proxy: new Ext.data.MemoryProxy(),
                    autoLoad: true,
                    fields: [
                        {name: 'CalendarId', mapping: 'id', type: 'int'},
                        {name: 'Title', mapping: 'title', type: 'string'}
                    ],
                    sortInfo: {
                        field: 'CalendarId',
                        direction: 'ASC'
                    }
                });
                this.eventStore = new Ext.data.Store({
                id: 'eventStore',
                    proxy: new Ext.data.HttpProxy({url: '/school/jsonload/', timeout:9000000, method: 'POST'}),
                    baseParams:{
                        start:0
                        ,limit:100
                        ,cmd: 'jsonManageUserCalendar'
                    },
                    autoLoad: true,
                    reader:new Ext.data.JsonReader({
                        root: 'data',
                        fields:Ext.calendar.EventRecord.prototype.fields.getRange()
                    }),
                    writer : new Ext.data.JsonWriter({
                        encode: true,
                        writeAllFields: false
                    })
                });
                // This is the app UI layout code.  All of the calendar views are subcomponents of
                // CalendarPanel, but the app title bar and sidebar/navigation calendar are separate
                // pieces that are composed in app-specific layout code since they could be ommitted
                // or placed elsewhere within the application.
                new Ext.Viewport({
                    layout: 'fit'
                    ,items: [{
                        id: 'app-center'
                        ,border:false
                        ,title: '...' // will be updated to view date range
                        ,region: 'center'
                        ,layout: 'border'
                        ,items: [{
                            id: 'app-west'
                            ,border:false
                            ,region: 'west'
                            ,width: 176
                            ,items: [{
                                xtype: 'datepicker',
                                id: 'app-nav-picker',
                                cls: 'ext-cal-nav-picker',
                                listeners: {
                                    'select': {
                                        fn: function(dp, dt) {
                                            App.calendarPanel.setStartDate(dt);
                                        },
                                        scope: this
                                    }
                                }
                            },{
                                xtype: 'panel'
                                ,layout :'form'
                                ,title: 'test'
                                ,border : false
                                ,labelWidth: 20
                                ,id : 'calendar_legend'
                                ,bodyStyle: 'background:transparent; padding:5px 10px 10px;'
                                ,items:<?=$LABEL_ITEMS;?>
                            }]
                        },{
                            xtype: 'calendarpanel',
                            eventStore: this.eventStore,
                            calendarStore: this.calendarStore,
                            border: false,
                            id: 'app-calendar',
                            region: 'center',
                            activeItem: 1, // month view

                            // CalendarPanel supports view-specific configs that are passed through to the 
                            // underlying views to make configuration possible without explicitly having to 
                            // create those views at this level:
                            monthViewCfg: {
                                showHeader: true,
                                showWeekLinks: true,
                                showWeekNumbers: true
                            },
                            // Some optional CalendarPanel configs to experiment with:
                            //showDayView: false,
                            //showWeekView: false,
                            //showMonthView: false,
                            //showNavBar: false,
                            //showTodayText: false,
                            //showTime: false,
                            //title: 'My Calendar', // the header of the calendar, could be a subtitle for the app
                            // Once this component inits it will set a reference to itself as an application
                            // member property for easy reference in other functions within App.
                            initComponent: function() {
                                App.calendarPanel = this;
                                this.constructor.prototype.initComponent.apply(this, arguments);
                            },
                            listeners: {
                                'eventclick': {
                                    fn: function(vw, rec, el) {
                                        this.showEditWindow(rec, el);
                                        this.clearMsg();
                                    },
                                    scope: this
                                },
                                'eventover': function(vw, rec, el) {
                                    //console.log('Entered evt rec='+rec.data.Title+', view='+ vw.id +', el='+el.id);
                                },
                                'eventout': function(vw, rec, el) {
                                    //console.log('Leaving evt rec='+rec.data.Title+', view='+ vw.id +', el='+el.id);
                                },
                                'eventadd': {
                                    fn: function(cp, rec) {
                                        this.showMsg('Event ' + rec.data.Title + ' was added');
                                    },
                                    scope: this
                                },
                                'eventupdate': {
                                    fn: function(cp, rec) {
                                        this.showMsg('Event ' + rec.data.Title + ' was updated');
                                    },
                                    scope: this
                                },
                                'eventdelete': {
                                    fn: function(cp, rec) {
                                        this.showMsg('Event ' + rec.data.Title + ' was deleted');
                                    },
                                    scope: this
                                },
                                'eventcancel': {
                                    fn: function(cp, rec) {
                                        // edit canceled
                                    },
                                    scope: this
                                },
                                'viewchange': {
                                    fn: function(p, vw, dateInfo) {
                                        if (this.editWin) {
                                            this.editWin.hide();
                                        }
                                        ;
                                        if (dateInfo !== null) {
                                            // will be null when switching to the event edit form so ignore
                                            Ext.getCmp('app-nav-picker').setValue(dateInfo.activeDate);
                                            this.updateTitle(dateInfo.viewStart, dateInfo.viewEnd);
                                        }
                                    },
                                    scope: this
                                },
                                'dayclick': {
                                    fn: function(vw, dt, ad, el) {
                                        this.showEditWindow({
                                            StartDate: dt,
                                            IsAllDay: ad
                                        }, el);
                                        this.clearMsg();
                                    },
                                    scope: this
                                },
                                'rangeselect': {
                                    fn: function(win, dates, onComplete) {
                                        this.showEditWindow(dates);
                                        this.editWin.on('hide', onComplete, this, {single: true});
                                        this.clearMsg();
                                    },
                                    scope: this
                                },
                                'eventmove': {
                                    fn: function(vw, rec) {
                                        rec.commit();
                                        var time = rec.data.IsAllDay ? '' : ' \\a\\t g:i a';
                                        this.showMsg('Event ' + rec.data.Title + ' was moved to ' + rec.data.StartDate.format('F jS' + time));
                                    },
                                    scope: this
                                },
                                'eventresize': {
                                    fn: function(vw, rec) {
                                        rec.commit();
                                        this.showMsg('Event ' + rec.data.Title + ' was updated');
                                    },
                                    scope: this
                                },
                                'eventdelete': {
                                    fn: function(win, rec) {
                                        this.eventStore.remove(rec);
                                        this.showMsg('Event ' + rec.data.Title + ' was deleted');
                                    },
                                    scope: this
                                },
                                'initdrag': {
                                    fn: function(vw) {
                                        if (this.editWin && this.editWin.isVisible()) {
                                            this.editWin.hide();
                                        }
                                    },
                                    scope: this
                                }
                            }
                        }]
                    }]
                });
            },
            // The edit popup window is not part of the CalendarPanel itself -- it is a separate component.
            // This makes it very easy to swap it out with a different type of window or custom view, or omit
            // it altogether. Because of this, it's up to the application code to tie the pieces together.
            // Note that this function is called from various event handlers in the CalendarPanel above.
            showEditWindow: function(rec, animateTarget) {
                if (!this.editWin) {
                    this.editWin = new Ext.calendar.EventEditWindow({
                        calendarStore: this.calendarStore,
                        listeners: {
                            'eventadd': {
                                fn: function(win, rec) {
                                    win.hide();
                                    rec.data.IsNew = false;
                                    this.eventStore.add(rec);
                                    this.showMsg('Event ' + rec.data.Title + ' was added');
                                },
                                scope: this
                            },
                            'eventupdate': {
                                fn: function(win, rec) {
                                    win.hide();
                                    rec.commit();
                                    this.showMsg('Event ' + rec.data.Title + ' was updated');
                                },
                                scope: this
                            },
                            'eventdelete': {
                                fn: function(win, rec) {
                                    this.eventStore.remove(rec);
                                    win.hide();
                                    this.showMsg('Event ' + rec.data.Title + ' was deleted');
                                },
                                scope: this
                            },
                            'editdetails': {
                                fn: function(win, rec) {
                                    win.hide();
                                    App.calendarPanel.showEditForm(rec);
                                }
                            }
                        }
                    });
                }
                this.editWin.show(rec, animateTarget);
            },
            // The CalendarPanel itself supports the standard Panel title config, but that title
            // only spans the calendar views.  For a title that spans the entire width of the app
            // we added a title to the layout's outer center region that is app-specific. This code
            // updates that outer title based on the currently-selected view range anytime the view changes.
            updateTitle: function(startDt, endDt) {
                var p = Ext.getCmp('app-center');

                if (startDt.clearTime().getTime() == endDt.clearTime().getTime()) {
                    p.setTitle(startDt.format('F j, Y'));
                }
                else if (startDt.getFullYear() == endDt.getFullYear()) {
                    if (startDt.getMonth() == endDt.getMonth()) {
                        p.setTitle(startDt.format('F j') + ' - ' + endDt.format('j, Y'));
                    }
                    else {
                        p.setTitle(startDt.format('F j') + ' - ' + endDt.format('F j, Y'));
                    }
                }
                else {
                    p.setTitle(startDt.format('F j, Y') + ' - ' + endDt.format('F j, Y'));
                }
            },
            // This is an application-specific way to communicate CalendarPanel event messages back to the user.
            // This could be replaced with a function to do "toast" style messages, growl messages, etc. This will
            // vary based on application requirements, which is why it's not baked into the CalendarPanel.
            showMsg: function(msg) {
                Ext.fly('app-msg').update(msg).removeClass('x-hidden');
            },
            clearMsg: function() {
                Ext.fly('app-msg').update('').addClass('x-hidden');
            }
        }
    }();
    Ext.onReady(App.init, App);
    </script>
    <style type="text/css">
        .x-form-display-field {
            font:normal 11px tahoma,verdana,arial,sans-serif,Hanuman;
        }
        .ext-evt-bd {
            font:normal 11px tahoma,verdana,arial,sans-serif,Hanuman;
        }
        .app-calendar-week-hd {
            font:bold 11px tahoma,verdana,arial,sans-serif,Hanuman;
        }
        .x-form-item {
            font:normal 11px tahoma,verdana,arial,sans-serif,Hanuman;
        }
        .x-table-layout-cell {
            font:normal 11px tahoma,verdana,arial,sans-serif,Hanuman;
        }
        .x-btn{
            font:normal 11px ttahoma,verdana,arial,sans-serif;
        }
        .x-btn button{
            font:normal 11px tahoma,verdana,arial,sans-serif;
        }
    </style>
    <body>
        <div style="display:none;">
            <div id="app-header-content">
                <span id="app-msg" class="x-hidden"></span>
            </div>
        </div>
    </body>
</html>