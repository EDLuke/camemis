<?

////////////////////////////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 31.03.2014
// Am Stollheen 18, 55120 Mainz, Germany
////////////////////////////////////////////////////////////////////////////////

require_once("Zend/Loader.php");
require_once 'models/export/CamemisExportDBAccess.php';
require_once 'models/export/CamemisExportDBAccess.php';

class ScoreExportTemplateDBAccess extends CamemisExportDBAccess {

    function __construct($actionType, $trainingId, $subjectId, $assignmentId, $date)
    {

        $this->actionType = $actionType;
        $this->trainingId = (int) $trainingId;
        $this->subjectId = (int) $subjectId;
        $this->assignmentId = (int) $assignmentId;
        $this->date = $date;

        $this->startHeader = 3;
        parent::__construct();
    }

    public function setParams()
    {
        return array(
            "trainingId" => $this->trainingId
            , "subjectId" => $this->subjectId
            , "assignmentId" => $this->assignmentId
            , "date" => $this->date
        );
    }

    public function getFileName()
    {
        return self::getUserPhath("_scoreimporttemplate.xls");
    }

    public function setTableHeader()
    {

        $content = TRAINING_PROGRAMS;

//        if ($this->assignmentId)
//        {
//            $content .= "\r";
//            $content .= $this->evaluation->getAssignment()->SHORT;
//        }

        $this->setCellMergeContent(0, 1, $content, "A1", "C1");
        $this->setFontStyle(0, 1, true, 11, "000000");
        $this->setFullStyle(0, 1, "FFFFFF");
        $this->setCellStyle(0, 1, false, 100, false);

        $this->setCellContent(0, 2, "DATE");
        $this->setBorderStyle(0, 2, false);
        $this->setFontStyle(0, 2, true, 11, "000000");
        $this->setCellStyle(0, 2, 20, 30);

        if ($this->date)
        {
            $this->setCellContent(1, 2, getShowDate($this->date));
            $this->setBorderStyle(1, 2, false);
            $this->setFontStyle(1, 2, true, 11, "000000");
            $this->setCellStyle(1, 2, 20, 30);
        }
        else
        {
            if ($this->actionType == "MULTI")
            {
                $this->setCellContent(1, 2, Zend_Registry::get('SCHOOL')->SYSTEM_DATE_FORMAT);
                $this->setBorderStyle(1, 2, false);
                $this->setFontStyle(1, 2, true, 11, "000000");
                $this->setCellStyle(1, 2, 20, 30);
            }
        }

        $this->setCellContent(2, 2, $this->trainingId . "_" . $this->subjectId . "_" . $this->assignmentId);
        $this->setBorderStyle(2, 2, false);
        $this->setFontStyle(2, 2, true, 11, "000000");
        $this->setCellStyle(2, 2, 20, 30);

        $this->setCellContent(0, 3, "CODE_ID");
        $this->setFontStyle(0, 3, true, 11, "000000");
        $this->setFullStyle(0, 3, "DFE3E8");
        $this->setCellStyle(0, 3, 20, 30);

        $this->setCellContent(1, 3, "STUDENT");
        $this->setFontStyle(1, 3, true, 11, "000000");
        $this->setFullStyle(1, 3, "DFE3E8");
        $this->setCellStyle(1, 3, 30, 30);

        $this->setCellContent(2, 3, "SCORE");
        $this->setFontStyle(2, 3, true, 11, "000000");
        $this->setFullStyle(2, 3, "DFE3E8");
        $this->setCellStyle(2, 3, 20, 30);

        if ($this->evaluation->getSettingEvaluationOption())
        {
            $this->setCellContent(3, 3, "RANK");
            $this->setFontStyle(3, 3, true, 11, "000000");
            $this->setFullStyle(3, 3, "DFE3E8");
            $this->setCellStyle(3, 3, 20, 30);
        }
    }

    public function setTableContent()
    {

        $stdClass = (object) $this->setParams();

        $entries = $this->evaluation->listClassStudents();

        if ($entries)
        {

            $i = 0;
            $colIndex = 0;

            foreach ($entries as $value)
            {

                $rowIndex = $i + $this->startContent();

                $STUDENT = getFullName($value->FIRSTNAME, $value->LASTNAME);
                $stdClass->studentId = $value->ID;

                $this->setCellContent(0, $rowIndex, $value->CODE);
                $this->setFontStyle(0, $rowIndex, false, 9, "000000");
                $this->setCellStyle(0, $rowIndex, false, 20);

                $this->setCellContent(1, $rowIndex, $STUDENT);
                $this->setFontStyle(1, $rowIndex, false, 9, "000000");
                $this->setCellStyle(1, $rowIndex, false, 20);

                if ($this->evaluation->getSettingEvaluationOption())
                {
                    $this->setCellContent(2, $rowIndex, "");
                }
                else
                {
                    $facette = SQLEvaluationStudentAssignment::getScoreSubjectAssignment($stdClass);
                    $this->setCellContent(2, $rowIndex, $facette ? $facette->POINTS : "");
                }

                $this->setFontStyle(2, $rowIndex, false, 9, "000000");
                $this->setCellStyle(2, $rowIndex, false, 20);

                $i++;
            }
        }
    }

    public function setSaveExcel()
    {
        switch ($this->actionType)
        {
            case "MULTI":

                if ($this->evaluation->getCurrentClassAssignments())
                {
                    $i = 0;
                    foreach ($this->evaluation->getCurrentClassAssignments() as $value)
                    {
                        $this->setAssignmentId($value->ASSIGNMENT_ID);
                        if ($i)
                            $this->EXCEL->createSheet();
                        $this->EXCEL->setActiveSheetIndex($i);
                        $this->setTableHeader();
                        $this->setTableContent();
                        $this->EXCEL->getActiveSheet()->setTitle($value->SHORT);

                        $i++;
                    }
                }

                $this->WRITER->save($this->getFileName());

                break;
            default:
                $this->EXCEL->setActiveSheetIndex(0);
                $this->setTableHeader();
                $this->setTableContent();
                $this->EXCEL->getActiveSheet()->setTitle($this->evaluation->getAssignment()->SHORT);
                $this->WRITER->save($this->getFileName());
                break;
        }
    }

}

$actionType = isset($_GET["actionType"]) ? addText($_GET["actionType"]) : "";
$trainingId = isset($_GET["trainingId"]) ? (int) $_GET["trainingId"] : "";
$subjectId = isset($_GET["subjectId"]) ? (int) $_GET["subjectId"] : "";
$assignmentId = isset($_GET["assignmentId"]) ? (int) $_GET["assignmentId"] : "";
$date = isset($_GET["date"]) ? addText($_GET["date"]) : "";

$exportTemplate = new ScoreExportTemplateDBAccess(
        $actionType
        , $trainingId
        , $subjectId
        , $assignmentId
        , $date
);
$exportTemplate->setSaveExcel();

$fileName = UserAuth::getUserId() . "_scoreimporttemplate.xls";
$exportFile = "../public/" . UserAuth::getMyFolder() . "/" . $fileName . "";

header("Content-Type: application/x-msexcel;");
header("Content-Disposition: attachment; filename=\"" . $fileName . "\"");
// IE <= 6 cache fix
header('Expires: 0');
header('Pragma: cache');
header('Cache-Control: private');

if (file_exists($exportFile))
{
    $fh = fopen($exportFile, 'r');
    fpassthru($fh);
    fclose($fh);
    unlink($exportFile);
}
?>