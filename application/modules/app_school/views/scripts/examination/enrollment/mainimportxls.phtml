<?
///////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 18.07.2009
// Am Stollheen 18, 55120 Mainz, Germany
///////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisBar.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisDynamicCombo.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisTree.php';
require_once 'clients/CamemisSchoolTree.php';
require_once 'include/Common.inc.php';
require_once 'utiles/Utiles.php';
require_once setUserLoacalization();

$OBJECT_GRID = new CamemisGrid("STUDENT", "LIST");
$OBJECT_GRID->setLoadUrl("/student/jsonload/");
$OBJECT_GRID->setSaveUrl("/student/jsonsave/");

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

print$CAMEMIS_PAGE_OBJECT->showCamemisHeader();

$columndata = Utiles::getGridColumnData("STUDENT_LIST_ID");

?>

<script>
    
    var objectType;
    Ext.onReady(function() {
        <?
        /**
         * Extjs: s.gif
         */
        $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
        $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();
        
        $OBJECT_GRID->addCellRenderer("
        function renderQTip(val, cell, record){

            if (record.data.ACTION_STATUS == 1){
                return '<div qtip=\"' + '<span>" . CANNOT_IMPORT . "</span>' +'\">'+ val +'</div>';
            }else{
                return '<div qtip=\"' + '<span>" . CAN_IMPORT . "</span>' +'\">'+ val +'</div>';
            }
        }
        ");

        $OBJECT_GRID->addCellRenderer("
            function renderText(v, p, record, rowIndex){
                var str = '<span class=spanText>' + v + '</span>';
                return str;
            }
        ");

        $OBJECT_GRID->addReadField("name: 'CODE'");
        $OBJECT_GRID->addReadField("name: 'STUDENT_SCHOOL_ID'");
        $OBJECT_GRID->addReadField("name: 'STUDENT'");
        $OBJECT_GRID->addReadField("name: 'LASTNAME'");
        $OBJECT_GRID->addReadField("name: 'FIRSTNAME'");
        $OBJECT_GRID->addReadField("name: 'GENDER'");
        $OBJECT_GRID->addReadField("name: 'ACADEMIC_TYPE'");
        $OBJECT_GRID->addReadField("name: 'CAMPUS_NAME'");
        $OBJECT_GRID->addReadField("name: 'DATE_BIRTH'");
        $OBJECT_GRID->addReadField("name: 'BIRTH_PLACE'");
        $OBJECT_GRID->addReadField("name: 'STATUS'");
        $OBJECT_GRID->addReadField("name: 'ACTION_STATUS'");
        $OBJECT_GRID->addReadField("name: 'ACTION_STATUS_ICON'");
        $OBJECT_GRID->addReadField("name: 'CONTRY'");
        $OBJECT_GRID->addReadField("name: 'STREET'");
        $OBJECT_GRID->addReadField("name: 'PHONE'");
        $OBJECT_GRID->addReadField("name: 'EMAIL'");
        $OBJECT_GRID->addReadField("name: 'TOWN_CITY'");
        $OBJECT_GRID->addReadField("name: 'POSTCODE_ZIPCODE'");
        $OBJECT_GRID->addReadField("name: 'COUNTRY'");
        
        $OBJECT_GRID->addColumn("header: '<b>" . ACTION_STATUS . "</b>', align:'center', renderer: renderQTip, width: 80,hidden:".checkColHidden(1, $columndata).", sortable: false, dataIndex: 'ACTION_STATUS_ICON'");
        
        $OBJECT_GRID->addColumn("
            header: '<b>".CANDIDATE_CODE."</b>',
            dataIndex: 'STUDENT_SCHOOL_ID',
            width: 120,
            hidden:".checkColHidden(2, $columndata).",
            align: 'left',
            renderer: renderText,
            editor: new Ext.form.TextField({
                allowBlank: false
            })
        ");
        if(!SchoolDBAccess::displayPersonNameInGrid()){
            $OBJECT_GRID->addColumn("
                header: '<b>".LASTNAME."</b>',
                dataIndex: 'LASTNAME',
                width: 120,
                hidden:".checkColHidden(3, $columndata).",
                align: 'left',
                renderer: renderText,
                editor: new Ext.form.TextField({
                    allowBlank: false
                })
            ");

            $OBJECT_GRID->addColumn("
                header: '<b>".FIRSTNAME."</b>',
                dataIndex: 'FIRSTNAME',
                width: 120,
                hidden:".checkColHidden(4, $columndata).",
                align: 'left',
                renderer: renderText,
                editor: new Ext.form.TextField({
                    allowBlank: false
                })
            ");
	}else{
            $OBJECT_GRID->addColumn("
                header: '<b>".FIRSTNAME."</b>',
                dataIndex: 'FIRSTNAME',
                width: 120,
                hidden:".checkColHidden(3, $columndata).",
                align: 'left',
                renderer: renderText,
                editor: new Ext.form.TextField({
                    allowBlank: false
                })
            ");
            $OBJECT_GRID->addColumn("
                header: '<b>".LASTNAME."</b>',
                dataIndex: 'LASTNAME',
                width: 120,
                hidden:".checkColHidden(4, $columndata).",
                align: 'left',
                renderer: renderText,
                editor: new Ext.form.TextField({
                    allowBlank: false
                })
            ");
	}
                
        $OBJECT_GRID->addColumn("
            header: '<b>".GENDER."</b>',
            dataIndex: 'GENDER',
            width: 120,
            hidden:".checkColHidden(5, $columndata).",
            align: 'left',
            renderer: renderText,
            editor: new Ext.form.ComboBox({
                triggerAction:'all'
                ,mode:'local'
                ,store: new Ext.data.JsonStore({
                        autoDestroy: true
                        ,fields: ['chooseValue', 'chooseDisplay']
                        ,data:[{chooseValue: '0', chooseDisplay: '---'},{chooseValue: '1', chooseDisplay: '".MALE."'},{chooseValue: '2', chooseDisplay: '".FEMALE."'}]
                    })
                    ,valueField: 'chooseValue'
                    ,displayField: 'chooseDisplay'
                    ,editable: false
                    ,listeners: {
                    select: function(combo, record, index) {
                        replaceValue = combo.getValue();
                        var newDisplay = record.get('chooseDisplay');
                        combo.setValue(newDisplay);
                    }
                }
            })
        ");
        
        $OBJECT_GRID->addColumn("
            header: '<b>".DATE_BIRTH."</b>',
            dataIndex: 'DATE_BIRTH',
            width: 120,
            hidden:".checkColHidden(6, $columndata).",
            align: 'left',
            renderer: renderText,
            editor: new Ext.form.TextField({
                allowBlank: false
            })
        ");
        
        $OBJECT_GRID->addColumn("
            header: '<b>".EMAIL."</b>',
            dataIndex: 'EMAIL',
            width: 150,
            hidden:".checkColHidden(7, $columndata).",
            align: 'left',
            renderer: renderText,
            editor: new Ext.form.TextField({
                allowBlank: false
            })
        ");
        
        $OBJECT_GRID->addColumn("
            header: '<b>".PHONE."</b>',
            dataIndex: 'PHONE',
            width: 150,
            hidden:".checkColHidden(8, $columndata).",
            align: 'left',
            renderer: renderText,
            editor: new Ext.form.TextField({
                allowBlank: false
            })
        ");
        
        $OBJECT_GRID->addColumn("
            header: '<b>".STREET."</b>',
            dataIndex: 'STREET',
            width: 150,
            hidden:".checkColHidden(9, $columndata).",
            align: 'left',
            renderer: renderText,
            editor: new Ext.form.TextField({
                allowBlank: false
            })
        ");
        
        $OBJECT_GRID->addColumn("
            header: '<b>".TOWN_CITY."</b>',
            dataIndex: 'TOWN_CITY',
            width: 150,
            hidden:".checkColHidden(10, $columndata).",
            align: 'left',
            renderer: renderText,
            editor: new Ext.form.TextField({
                allowBlank: false
            })
        ");
        
        $OBJECT_GRID->addColumn("
            header: '<b>".POSTCODE_ZIPCODE."</b>',
            dataIndex: 'POSTCODE_ZIPCODE',
            width: 150,
            hidden:".checkColHidden(11, $columndata).",
            align: 'left',
            renderer: renderText,
            editor: new Ext.form.TextField({
                allowBlank: false
            })
        ");
        
        $OBJECT_GRID->addColumn("header: '<b>" . COUNTRY . "</b>', align:'left', width: 150,hidden:".checkColHidden(12, $columndata).", renderer: renderText, sortable: false, dataIndex: 'COUNTRY'");
        
        $OBJECT_GRID->setSaveParams("
            cmd: 'jsonActionChangeStudentImport'
        ");
        
        $OBJECT_GRID->forceFit = "false";
        $OBJECT_GRID->isCheckboxSelect = true;
        $OBJECT_GRID->isGridEditing = true;
        $OBJECT_GRID->isQuickySearch = true;
        
        $OBJECT_GRID->baseParams = "
            start:0
            ,limit:100
            ,cmd: 'importStudents'
            ,display: '1'
            ,type:'ENROLL'
            ,campus:'".$this->academicId."'
        ";
        
        $OBJECT_GRID->addTBarItems("
            tbar.add([{
                id: 'REMOVE_ALL_STUDENTS_ID'
                ,text: '" . REMOVE_IMPORT_LIST . "'
                ,iconCls:'icon-delete'
                ,scope:this
                ,handler: this.onRemoveSelection
            }]);
        ");
        
        $OBJECT_GRID->setRemoveParams("
            cmd: 'removeStudentFromImport'
        ");
        
        $OBJECT_GRID->setSelectionParams("
            cmd: 'jsonAddStudentToStudentDB'
        ");
        
        $OBJECT_GRID->setRemoveSelectionParams("
            cmd: 'jsonRemoveStudentsFromImport'
        ");

        $OBJECT_GRID->setSelectionEmbeddedEvents("
            Ext.getCmp('STUDENT_LIST_ID').store.reload();
        ");
        
        $OBJECT_GRID->setAftereditCallback("
            var result = Ext.util.JSON.decode(action.response.responseText);
            if(result.success=='true'){
                XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."');
            } 
            //Ext.getCmp('STUDENT_LIST_ID').store.reload();
        ");
        
        $OBJECT_GRID->setRemoveEmbeddedEvents("
            Ext.getCmp('STUDENT_LIST_ID').store.reload();
        ");
        
        $OBJECT_GRID->renderJS();

        $formItems = "[";
        $formItems .= "
        {
            xtype: 'fileuploadfield'
            ,id: 'form-file'
            ,emptyText: '".SELECT_AN_XLS_FILE."'
            ,fieldLabel: '".FILE."'
            ,name: 'xlsfile'
            ,buttonText: ''
            ,buttonCfg: {
                iconCls: 'upload-icon'
            }
        }
        ";
        $formItems .= "]";
    ?>
    var fp = new Ext.FormPanel({
        
        fileUpload: true
        ,labelAlign: 'top'
        ,border: true
        ,width:335
        ,autoHeight: true
        ,title: ''
        ,bodyStyle: 'background:<?=CamemisPage::userFormBgColor();?>; color:#000;padding:10px'
        ,labelWidth: 150
        ,defaults: {
            anchor: '95%'
            ,allowBlank: false
            ,msgTarget: 'side'
        },
        items: <?=$formItems;?>
        ,tbar: [{
            text: '<?=EXCEL_TEMPLATE?>'
            ,iconCls:'icon-table_save'
            ,handler: function(){
                window.location='<?=$this->URL_TEMPLATE_XLS?>';
            }
        },'-',{
            text: '<?=RESET;?>'
            ,iconCls:'icon-arrow_undo'
            ,handler: function(){
                fp.getForm().reset();
            }
        },'-',{
            text: '<?=UPLOAD;?>'
            ,id: 'UPLOAD'
            ,iconCls:'icon-disk'
            ,handler: function(){
                if(fp.getForm().isValid()){
                    Ext.Ajax.request({
                        url: '/student/jsonimport'
                        ,isUpload: true
                        ,headers: {'Content-type':'multipart/form-data'}
                        ,method: 'POST'
                        ,params:{cmd: 'importXLS', objectId:'<?=$this->academicId;?>', type:'ENROLL'}
                        ,waitMsg: 'Uploading your file...'
                        ,form: fp.getForm().getEl().dom
                        ,success: function(response, options) {
                            <?=CamemisPage::setRequestURI(false);?>
                        }
                        ,failure: function(response, options) { console.log('fail'); }
                    });
                }
            }
        }]
       
    });

    viewport = new Ext.Viewport({
        layout: 'fit'
        ,border: false
        ,items:[{
            layout:'border'
            ,border: false
            ,defaults: {
                collapsible: true
                ,split: true
            },
            items: [{
                title: ''
                ,bodyStyle: 'background:<?=CamemisPage::userFormBgColor();?>; color:#000;padding:5px'
                ,region: 'west'
                ,width: 350
                ,minSize:350
                ,maxSize:350
                ,cmargins: '3 3 3 3'
                ,margins: '3 0 3 3'
                ,items:[{
                    border: false
                    ,bodyStyle: 'background:<?=CamemisPage::userFormBgColor();?>;'
                    ,layout:'form'
                    ,items: fp
                }]
            },{
                title: '<?=IMPORT_RESULT?>'
                ,collapsible: false
                ,region:'center'
                ,margins: '3 3 3 0'
                ,layout: 'fit'
                ,items:[{
                    layout: 'fit'
                    ,xtype: '<?=$OBJECT_GRID->getObjectXType();?>'
                }]
            }]
        }]
    });
    Ext.state.Manager.setProvider(new Ext.state.HttpProvider({url: '/dataset/jsonsave/'}));
});
</script>
<?
print$CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>