<?
///////////////////////////////////////////////////////////
// @Sea Peng
// Date: 05.02.2014
///////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisTree.php';
require_once 'include/Common.inc.php';
require_once 'utiles/Utiles.php';
require_once 'models/CamemisEvaluationDBAccess.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$OBJECT_FORM = new CamemisForm("TOPIC");
$OBJECT_FORM->setSaveUrl("/camemisevaluation/jsonsave/");
$OBJECT_FORM->setLoadUrl("/camemisevaluation/jsonload/");

$STUDENT_TREE = new CamemisTree("FILE","STUDENT_LIST");
$STUDENT_TREE->setURL('/camemisevaluation/jsontree/');

$STAFF_TREE = new CamemisTree("EVALUATION", "STAFF_LIST");
$STAFF_TREE->setURL('/camemisevaluation/jsontree/');

$QUESTION_GRID = new CamemisGrid("QUESTION", "LIST");
$QUESTION_GRID->setLoadUrl("/camemisevaluation/jsonload/");
$QUESTION_GRID->setSaveUrl("/camemisevaluation/jsonsave/");

$ADD_QUESTION_GRID = new CamemisGrid("ADD_QUESTION", "LIST");
$ADD_QUESTION_GRID->setLoadUrl("/camemisevaluation/jsonload/");
$ADD_QUESTION_GRID->setSaveUrl("/camemisevaluation/jsonsave/");
$USER_TYPE=UserAuth::getUserType();

if($this->objectId == "new"){
    $parentId = isset($_GET['parentId'])?addText($_GET['parentId']):'';
}else{
    $parentId = $this->facette?$this->facette->PARENT:'';
}

function deleteQuestion($QUESTION_GRID){
    
    $js = "";
    $js .= "window.parent.Ext.MessageBox.show({";
    $js .= "title:'" . STATUS . "'";
    $js .= ",width: 350";
    $js .= ",msg: '" . DELETE_THIS_ITEM . "'";
    $js .= ",buttons: Ext.MessageBox.YESNOCANCEL";
    $js .= ",icon: Ext.MessageBox.WARNING";
    $js .= ",fn: function(btn, text){
        if (btn == 'yes'){
            Ext.Ajax.request({
                url: '/camemisevaluation/jsonsave/'
                ,method: 'POST'
                ,params: {cmd: 'jsonRemoveQuestionFromTopic',objectId:record.data.ID}
                ,success: function(response, options) {
                    XMsg('".STATUS."','".WAR_REMOVED_SUCCESSFULLY."');
                    Ext.getCmp('" . $QUESTION_GRID->getObjectId() . "').store.reload();
                }
                ,failure: function(response, options) {}
            });
        }
    }";
    $js .= "});";
    
    return $js;
}    

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();
?>
<script>
Ext.onReady(function() {
    
    function renderText(value,record){
        return '<div style=\"font-weight:normal; color:#000000; padding: 5px; height:15px;background:#FFFFFF;\">' + value + '</div>';
    }
    
    <?
    /**
    * Extjs: s.gif
    */
    
    $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
    $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();
    
    ///////////////////////////////////////////////////////////////////////////////
    //ADD QUESTION GRID
    ///////////////////////////////////////////////////////////////////////////////
    $ADD_QUESTION_GRID->addReadField("name: 'ID'");
    $ADD_QUESTION_GRID->addReadField("name: 'QUESTION_NAME'");
    
    $ADD_QUESTION_GRID->addColumn("header: '<b>" . QUESTION . "</b>', align:'left', width: 600, dataIndex: 'QUESTION_NAME'");
    
    $ADD_QUESTION_GRID->baseParams = "
        start:0
        ,limit:100
        ,cmd: 'jsonLoadUnassignedQuestionToTopic'
        ,objectId: '" . $this->objectId . "'
    ";

    $ADD_QUESTION_GRID->setSelectionParams("
        cmd: 'jsonActionAddQuestionToTopic'
        ,objectId: '" . $this->objectId . "'
    ");
        
    $ADD_QUESTION_GRID->addTBarItems("
        tbar.add([{
            id: 'APLY_ID'
            ,text: '<b>" . APPLY . "</b>'
            ,iconCls:'icon-disk'
            ,scope:this
            ,handler: this.onSelection
        }]);
    ");
    
    $ADD_QUESTION_GRID->setSelectionEmbeddedEvents("
        Ext.getCmp('".$QUESTION_GRID->getObjectId()."').store.reload();
    ");
    
    $ADD_QUESTION_GRID->addTBarItems("
        tbar.add('->');
    ");
       
    $ADD_QUESTION_GRID->loadMask = true;
    $ADD_QUESTION_GRID->isPagingToolbar = true;
    $ADD_QUESTION_GRID->isQuickySearch = true;
    $ADD_QUESTION_GRID->isCheckboxSelect = true;
    $ADD_QUESTION_GRID->forceFit = "false";
    $ADD_QUESTION_GRID->renderJS();
    ///////////////////////////////////////////////////////////////////////////////
    //QUESTION GRID
    ///////////////////////////////////////////////////////////////////////////////
    $QUESTION_GRID->addReadField("name: 'ID'");
    $QUESTION_GRID->addReadField("name: 'QUESTION_NAME'");
    $QUESTION_GRID->addReadField("name: 'ANSWER_NAME'");
    
    $QUESTION_GRID->addColumn("header: '<b>" . QUESTION . "</b>', hidden: false, align:'left', menuDisabled : true, sortable: true, width:400, dataIndex: 'QUESTION_NAME'");
    $QUESTION_GRID->addColumn("header: '<b>" . ANSWER . "</b>', align:'left', renderer: renderText, width: 150, dataIndex: 'ANSWER_NAME'");
    
    $QUESTION_GRID->addTBarItems("
        tbar.add([{
            id: 'ADD_ID'
            ,scope:this
            ,text:'".QUESTION."'
            ,tooltip:'".QUESTION."'
            ,iconCls:'icon-application_form_add'
            ,handler: function(){
                openWinXType('ADD_QUESTION_LIST','".QUESTION."', '".$ADD_QUESTION_GRID->getObjectXType()."', percentWidth(80), percentHeight(80));           
            }
        }]);
    ");
    
    $QUESTION_GRID->baseParams = "
        start:0
        ,limit:100
        ,cmd: 'jsonLoadEvaluationQuestionByTopic'
        ,objectId: '" . $this->objectId . "'
    ";
    
    $QUESTION_GRID->loadMask = true;
    $QUESTION_GRID->isPagingToolbar = true;
    $QUESTION_GRID->isGroupingView = true;
    $QUESTION_GRID->groupField = "QUESTION_NAME";
    $QUESTION_GRID->forceFit = "false";
    $QUESTION_GRID->renderJS();
    
    ///////////////////////////////////////////////////////////////////////////////
    //STAFF TREE
    ///////////////////////////////////////////////////////////////////////////////
    $STAFF_TREE->isAsyncTreeNode = false;
    $STAFF_TREE->addTBarItems(CamemisBar::tbarTreeRefresh('STAFF'));
    $STAFF_TREE->addTBarItems(CamemisBar::tbarTreeExpand('STAFF'));
    $STAFF_TREE->addTBarItems(CamemisBar::tbarTreeCollapse('STAFF'));
    //if($this->objectId != "new" || $USER_TYPE=='SUPERADMIN'){
        $STAFF_TREE->setBaseParams("
            cmd: 'treeAllStaffs'
            ,objectId:'".$this->objectId."'
        ");
    //}
    
    $STAFF_TREE->backgroundColor = "#F9F9F9";
    $STAFF_TREE->isOnClickContextMenu = false;
    $STAFF_TREE->isTreeExpand = true;
    $STAFF_TREE->renderJS();
    
    //////////////////////////////////////////////////////////////////////////////
    //STUDNET TREE
    //////////////////////////////////////////////////////////////////////////////
    $STUDENT_TREE->isAsyncTreeNode = false;
    $STUDENT_TREE->addTBarItems(CamemisBar::tbarTreeRefresh('STUDENT'));
    $STUDENT_TREE->addTBarItems(CamemisBar::tbarTreeExpand('STUDENT'));
    $STUDENT_TREE->addTBarItems(CamemisBar::tbarTreeCollapse('STUDENT'));
     
    if($this->objectId != "new" || $USER_TYPE=='SUPERADMIN'){
        $schoolyearObject = AcademicDateDBAccess::findSchoolyearByCurrentDate();
        $STUDENT_TREE->setBaseParams("
            cmd: 'getAcademicsByEvaluation'
            ,objectId:'".$this->objectId."'
            ,SCHOOLYEAR:'".$schoolyearObject->ID."'
        ");
    }
    
    $STUDENT_TREE->backgroundColor = "#F9F9F9";
    $STUDENT_TREE->isOnClickContextMenu = false;
    $STUDENT_TREE->isTreeExpand = true;
    $STUDENT_TREE->renderJS();
    /////////////////////////////////////////////////////////////////////////////
    
    $OBJECT_FORM->addObjectItems("
        title: '".NAME."'
        ,autoHeight: true
        ,style: 'padding-bottom:5px'
        ,collapsible: true
        ,collapsed: false
        ,width: 550
        ,items:[{
            layout: 'form'
            ,border: false
            ,autoHeight:true
            ,bodyStyle: 'padding:10px'
            ,items: [
                {".CamemisField::Textfield("TOPIC_NAME", "NAME", NAME, false, false, false, false)."}
            ]
        }]   
    ");

    
    $OBJECT_FORM->addObjectItems("
        title: '".DESCRIPTION."'
        ,collapsible: true
        ,collapsed: false
        ,width:550
        ,style: 'padding-bottom: 5px'
        ,items:[{
            layout: 'fit'
            ,border: false
            ,bodyStyle: 'padding:5px'
            ,items:[{".CamemisField::Textarea("DESCRIPTION",DESCRIPTION,200,false,false)."}]
        }]   
    ");
    
    $OBJECT_FORM->addTBarItems("
        text: '".CANCEL."'
        ,id: 'CANCEL_ID'
        ,formBind:true
        ,iconCls:'icon-cancel'
        ,scope:this
        ,handler: function(){
            window.parent.Ext.getCmp('center').getLayout().setActiveItem(0);
        }
    ");
    
    $OBJECT_FORM->addTBarItems(CamemisBar::tbarSingleSave());
    
    $OBJECT_FORM->setSaveParams("
        cmd: 'jsonSaveEvaluationTopic'
        ,objectId: '".$this->objectId."'
        ,parentId: '".$this->parentId."'
    ");
    
    $OBJECT_FORM->setonEmbeddedEvents("
        XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."');
        window.parent.Ext.getCmp('TREE.EVALUATION_TOPIC_LIST_ID').root.reload();
        var result = Ext.util.JSON.decode(action.response.responseText);
        window.location='".$_SERVER["REQUEST_URI"]."&objectId='+result.objectId;
     ");
     
     if($this->objectId != "new"){
        $OBJECT_FORM->addTBarItems(CamemisBar::tbarSingleRemove());
        
        $OBJECT_FORM->setRemoveParams("
            cmd: 'jsonRemoveEvaluationTopic'
            ,objectId: '".$this->objectId."'
        ");
        
        $OBJECT_FORM->setOnEmbeddedRemoveEvents("
            XMsg('".STATUS."','".MSG_ACTION_REMOVED_ITEM."'); 
            window.parent.Ext.getCmp('center').getLayout().setActiveItem(0);
            window.parent.Ext.getCmp('TREE.EVALUATION_TOPIC_LIST_ID').root.reload();
        ");
        
        $OBJECT_FORM->setLoadParams("
            cmd: 'jsonLoadEvaluationTopic'
            ,objectId: '".$this->objectId."'
        ");    
     }
    
    $OBJECT_FORM->isObjectDefaultOnLoad = ($this->objectId=="new")?false:true; 
    $OBJECT_FORM->labelAlign = "left";
    $OBJECT_FORM->labelWidth = 120;
    $OBJECT_FORM->renderJS();
    
    $VIEWPORT_ITEMS = "[{";
        if($this->objectId == "new"){
            $VIEWPORT_ITEMS .= "
                layout:'fit'
                ,border: false
                ,items: [{xtype: '".$OBJECT_FORM->getObjectXType()."'}]    
            ";
        }else{
            $VIEWPORT_ITEMS .= "
                bodyStyle: 'background:".CamemisPage::userBgColor().";padding:3px;'
                ,border:false
                ,items:[{
                    xtype: 'tabpanel'
                    ,plain:true
                    ,activeTab: 0
                    ,items:[{
                        title:'".QUESTION."'
                        ,border: false
                        ,height:percentHeight(100)
                        ,items: [{xtype: '".$QUESTION_GRID->getObjectXType()."'}]
                    },{ 
                        title: '".STUDENT."'   
                        ,layout:'fit' 
                        ,bodyStyle: 'background:".CamemisPage::userBgColor().";padding:3px;'
                        ,height:percentHeight(100)
                        ,items: [{xtype: '".$STUDENT_TREE->getObjectXType()."'}]
                    },{
                        title:'".STAFF."'
                        ,layout:'fit'
                        ,bodyStyle: 'background:".CamemisPage::userBgColor().";padding:3px;'
                        ,height:percentHeight(100)
                        ,border: false
                        ,items: [{xtype: '".$STAFF_TREE->getObjectXType()."'}]
                    },{
                        title:'".MAIN_CONTENT."'
                        ,border: false
                        ,items: [{xtype: '".$OBJECT_FORM->getObjectXType()."'}]    
                    }]
                }]
            ";
        } 
    $VIEWPORT_ITEMS .= "}]";
    ?>
    viewport = new Ext.Viewport({
        layout: 'fit'
        ,border: false
        ,items:[{
            layout:'fit'
            ,border: false
            ,items: <?=$VIEWPORT_ITEMS;?>
        }]
    });
    
    <?
        $js = "";
        $js .= "var myGrid = Ext.getCmp('".$QUESTION_GRID->getObjectId()."');";
        $js .= "if (myGrid) myGrid.on('cellclick', function(grid, rowIndex, columnIndex, event) {";
            $js .= "var record = grid.store.getAt(rowIndex);";
            $js .= "var chooseId = record.data.ID;";
            $js .= "var contextMenu = new Ext.menu.Menu({";
                $js .="items: [{";
                    $js .="text: '".REMOVE." &raquo; ' + record.data.QUESTION_NAME";
                    $js .=",iconCls:'icon-delete'";
                    $js .=",handler:function(){".deleteQuestion($QUESTION_GRID)."}";
                $js .="}]";
            $js .= "});";
            $js .= "event.stopEvent();";
            $js .= "contextMenu.showAt(event.xy);";
        $js .= "});";
        
        echo $js;
    ?>
});
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>