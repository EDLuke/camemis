<?
///////////////////////////////////////////////////////////
// @sor veasna
// Date: 30/11/2013
// 
///////////////////////////////////////////////////////////
require_once 'models/UserAuth.php';
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisTree.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'include/Common.inc.php';
require_once 'models/app_school/AcademicDateDBAccess.php';
require_once setUserLoacalization();   

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$ENROLLED_STUDENTS = new CamemisGrid("STUDENT", "STUDENT_GRID");
$ENROLLED_STUDENTS->setLoadUrl("/student/jsonload/");
$ENROLLED_STUDENTS->setSaveUrl("/student/jsonsave/");

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();

$REMOVE_RIGHT=UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_REMOVE_RIGHT")?"false":"true";
$EXECUTE_RIGHT=UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT")?"false":"true";

?>

<script>
    var studentId;
    Ext.onReady(function() {
        
        function cssStatus(v, p, record){
            return String.format('<div style=\"font-weight:bold;padding:4px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
            );
        }
        
        function cssText(value, metadata, record){
            return '<div style="font-weight:normal; color:#333; padding: 3px; height:10px;">' + value + '</div>';
        }
        <?
        /**
        * Extjs: s.gif
        */
        $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
        $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();

        $ENROLLED_STUDENTS->addReadField("name: 'CODE'");
        $ENROLLED_STUDENTS->addReadField("name: 'STUDENT_SCHOOL_ID'");
        $ENROLLED_STUDENTS->addReadField("name: 'FIRSTNAME'");
        $ENROLLED_STUDENTS->addReadField("name: 'LASTNAME'");
        $ENROLLED_STUDENTS->addReadField("name: 'GENDER'");
        $ENROLLED_STUDENTS->addReadField("name: 'DATE_BIRTH'");
        $ENROLLED_STUDENTS->addReadField("name: 'PHONE'");
        $ENROLLED_STUDENTS->addReadField("name: 'EMAIL'");
        $ENROLLED_STUDENTS->addReadField("name: 'SORTKEY'");
        $ENROLLED_STUDENTS->addReadField("name: 'BG_COLOR'");
        $ENROLLED_STUDENTS->addReadField("name: 'BG_COLOR_FONT'");
        $ENROLLED_STUDENTS->addReadField("name: 'STATUS_KEY'");
        
        if(UserAuth::getUserType() == "INSTRUCTOR"){
            $ENROLLED_STUDENTS->addColumn("
                header: '<b>" . SORTKEY . "</b>'
                , width: 80
                , align:'center'
                , sortable: true
                , dataIndex: 'SORTKEY'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'SORTKEY'
                })
            ");
        }
        
        switch(UserAuth::getUserType()){
            case "SUPERADMIN":
            case "ADMIN":
                switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
                    case "VIETNAMESE": $width = 100;break;
                    default: $width = 85;break;
                }
                $ENROLLED_STUDENTS->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
                $ENROLLED_STUDENTS->addColumn("header: '<b>" . CODE_ID . "</b>', width: 80, renderer: cssText, sortable: false, dataIndex: 'CODE'");
                $ENROLLED_STUDENTS->addColumn("header: '<b>" . STUDENT_SCHOOL_ID . "</b>', width: 100, renderer: cssText, sortable: false, dataIndex: 'CODE'");
                break;
            case "TEACHER":
            case "INSTRUCTOR":
                $ENROLLED_STUDENTS->addColumn("
                    header: '<b>" . SORTKEY . "</b>'
                    , width: 80
                    , align:'center'
                    , sortable: true
                    , dataIndex: 'SORTKEY'
                    , editor: new Ext.form.TextField({
                        allowBlank: false
                        ,name: 'SORTKEY'
                    })
                ");
                break;
        }
        
        if(!SchoolDBAccess::displayPersonNameInGrid()){
            $ENROLLED_STUDENTS->addColumn("header: '<b>" . LASTNAME . "</b>', width: 150, renderer: cssText, sortable: false, dataIndex: 'LASTNAME'");
            $ENROLLED_STUDENTS->addColumn("header: '<b>" . FIRSTNAME . "</b>', width: 150, renderer: cssText, sortable: false, dataIndex: 'FIRSTNAME'");
        }else{
            $ENROLLED_STUDENTS->addColumn("header: '<b>" . FIRSTNAME . "</b>', width: 150, renderer: cssText, sortable: false, dataIndex: 'FIRSTNAME'");
            $ENROLLED_STUDENTS->addColumn("header: '<b>" . LASTNAME . "</b>', width: 150, renderer: cssText, sortable: false, dataIndex: 'LASTNAME'");
        }
        $ENROLLED_STUDENTS->addColumn("header: '<b>" . GENDER . "</b>', width: 110, renderer:cssText, sortable: true, dataIndex: 'GENDER'");
        $ENROLLED_STUDENTS->addColumn("header: '<b>" . DATE_BIRTH . "</b>', width: 120, renderer:cssText, sortable: true, dataIndex: 'DATE_BIRTH'");
        $ENROLLED_STUDENTS->addColumn("header: '<b>" . PHONE . "</b>', width: 200, renderer:cssText, sortable: true, dataIndex: 'PHONE'");
        $ENROLLED_STUDENTS->addColumn("header: '<b>" . EMAIL . "</b>', width: 200, renderer:cssText, sortable: true, dataIndex: 'EMAIL'");
                
        $ENROLLED_STUDENTS->baseParams = "
            start:0
            ,limit:100
            ,schoolyearId: '" . $this->schoolyearId . "'
            ,academicId: '" . $this->academicId . "'
            ,classId: '" . $this->classId . "'
            ,cmd: 'jsonEnrolledStudentBySubject'
        ";

//        //@soda
//        if(UserAuth::getUserType() == "SUPERADMIN" || UserAuth::getUserType() == "ADMIN"){
//            if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT")){
//                $ENROLLED_STUDENTS->addTBarItems("
//                    tbar.add(['->',{
//                        text: '" . EXPORT_TO_EXCEL . "'
//                        ,id: 'EXPORT_TO_EXCEL'
//                        ,iconCls:'icon-page_excel'
//                        ,handler: function(){
//                            openWinIFrame('" . EXPORT_TO_EXCEL . "','/export/showcolumn/?classId=$this->objectId&type=export_student&target=general',550,percentHeight(85));
//                        }
//                    }]);
//                ");
//            }
//        }
//        
//        if(UserAuth::getUserType() == "INSTRUCTOR" || UserAuth::getUserType() == "TEACHER"){
//            $ENROLLED_STUDENTS->addTBarItems("
//                tbar.add(['->',{
//                    text: '" . EXPORT_TO_EXCEL . "'
//                    ,id: 'EXPORT_TO_EXCEL'
//                    ,iconCls:'icon-page_excel'
//                    ,handler: function(){ 
//                        openWinIFrame('" . EXPORT_TO_EXCEL . "','/export/showcolumn/?classId=$this->objectId&type=export_student&target=general',550,percentHeight(85));
//                    }
//                }]);
//            ");
//        }
      
        $ENROLLED_STUDENTS->isQuickySearch = true;
        $ENROLLED_STUDENTS->isCheckboxSelect = false;
        $ENROLLED_STUDENTS->forceFit = "false";
        $ENROLLED_STUDENTS->removeNAME = "STUDENT_NAME";
        $ENROLLED_STUDENTS->renderJS();

        ?>                
        viewport = new Ext.Viewport({
            layout: 'fit'
            ,border: false
            ,items:[{
                border: false
                ,id:'center'
                ,layout: 'card'
                ,activeItem: 0
                ,items: [{xtype: '<?= $ENROLLED_STUDENTS->getObjectXType(); ?>'}]
            }]
        });
       
   });
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>