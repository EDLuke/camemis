<?
///////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 18.07.2009
// Am Stollheen 18, 55120 Mainz, Germany
///////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisBar.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisDynamicCombo.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisTree.php';
require_once 'clients/CamemisSchoolTree.php';//@veasna
require_once 'include/Common.inc.php';
require_once 'utiles/Utiles.php';
require_once 'models/UserAuth.php';
require_once 'models/app_school/LocationDBAccess.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$gridParam="";
if($this->campusId)
$gridParam .= ",campusId: '".$this->campusId."'";
if($this->gradeId)
$gridParam .= ",gradeId: '".$this->gradeId."'";
if($this->schoolyearId)
$gridParam .= ",schoolyearId: '".$this->schoolyearId."'";
if($this->classId)
$gridParam .= ",classId: '".$this->classId."'";

$OBJECT_FORM = new CamemisForm("STUDENT");
$OBJECT_FORM->setLoadUrl('/student/jsonload/');
$OBJECT_FORM->setSaveUrl('/student/jsonsave/');

$OBJECT_GRID = new CamemisGrid("STUDENT", "SEARCH");
$OBJECT_GRID->setLoadUrl("/student/jsonload/");
$OBJECT_GRID->setSaveUrl("/student/jsonsave/");
function searchPersonalDescription(){
    $js='false';
    $entries = DescriptionDBAccess::sqlPersonalDescription("STUDENT");
    if ($entries)
    {
        foreach ($entries as $value)      
        {   
            switch($value->CHOOSE_TYPE){
                case 1:
                    $js .= " || obj.CHECKBOX_".$value->ID . "!=''";    
                    break;
                     
                case 2:
                    $js .= " || obj.RADIOBOX_".$value->ID . '!=null';  
                    break; 
                 
                case 3:
                    $js .= " || obj.INPUTFIELD_".$value->ID . "!=''" ; 
                    break;                        
            }
      
        }
    } 
    return $js ;
}

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();

$columndata = Utiles::getGridColumnData("STUDENT_SEARCH_ID");
?>
<style>
    .filter-row-grid .x-grid3-header {
    background: #f9f9f9 url(/public/images/filter-row-hrow.gif) repeat-x left top;
}

.filter-row-grid .filter-row-header {
    height: 26px;
}

tr.filter-row-header .filter-row-icon input {
    background-image: url(/public/images/filter-row-icon.png);
    background-repeat: no-repeat;
    padding-left: 16px;
}
</style>

<script>
Ext.apply(Ext.form.VTypes, {

    daterange : function(val, field) {
        var date = field.parseDate(val);
        if(!date){
            return false;
        }
        if (field.startDateField) {
            var start = Ext.getCmp(field.startDateField);
            if (!start.maxValue || (date.getTime() !== start.maxValue.getTime())) {
                start.setMaxValue(date);
                start.validate();
            }
        }
        else if (field.endDateField) {
            var end = Ext.getCmp(field.endDateField);
            if (!end.minValue || (date.getTime() !== end.minValue.getTime())) {
                end.setMinValue(date);
                end.validate();
            }
        }
        return true;
    }
});

////////////////////////////////////////////////////////////////////////////////
Ext.onReady(function() {

    Ext.Ajax.timeout = 600000;
    Ext.QuickTips.init();

    function myAjaxRequest(formObject, gridObject){
        var fieldValue = formObject.getForm().getFieldValues();
        if(plsEnterKey(fieldValue)){
            <?=CamemisPage::alertPleaseSelect(NOTES,PLS_ENTER_KEYWORD)?>
        }else{
            var myMask = new Ext.LoadMask(Ext.getBody(), {msg:'<b>CAMEMIS <?=LOADING?></b>', msgCls:'x-mask-loading-camemis'});
            myMask.show();
            Ext.Ajax.request({
                url: '/student/jsonload'
                ,method: 'POST'
                ,params:{start:0,limit:100,cmd:'searchStudent'}
                ,form: formObject.getForm().getEl().dom
                ,success: function(response, options) {
                    jsonData = Ext.util.JSON.decode(response.responseText);
                    var myform=<?=$OBJECT_FORM->ExtgetCmp();?>;
                    for(var i=0;i<myform.getForm().getEl().dom.length;i++){
                        if(myform.getForm().getEl().dom[i].value){
                            switch(myform.getForm().getEl().dom[i].type) {
                                case 'checkbox':
                                    if(myform.getForm().getEl().dom[i].checked){
                                        Ext.getCmp('<?=$OBJECT_GRID->getObjectId();?>').getStore().setBaseParam(myform.getForm().getEl().dom[i].name,myform.getForm().getEl().dom[i].value);
                                    }
                                    break;
                                case 'radio':
                                    if(myform.getForm().getEl().dom[i].checked){
                                        Ext.getCmp('<?=$OBJECT_GRID->getObjectId();?>').getStore().setBaseParam(myform.getForm().getEl().dom[i].name,myform.getForm().getEl().dom[i].value);
                                    }
                                    break;
                                default:
                                    Ext.getCmp('<?=$OBJECT_GRID->getObjectId();?>').getStore().setBaseParam(myform.getForm().getEl().dom[i].name,myform.getForm().getEl().dom[i].value);
                                    break;
                                
                            } 
                            
                        }
                    }
                    gridObject.getStore().loadData(jsonData);
                    myMask.hide();
                }
            });
        }
    }

    function plsEnterKey(obj){
        var s;
       
        if(obj.LASTNAME || obj.FIRSTNAME || obj.GENDER || obj.CODE || obj.STUDENT_SCHOOL_ID || obj.RELIGION
            || obj.ETHNIC || obj.NATIONALITY || obj.START_DATE || obj.END_DATE || obj.INSTITUTION_NAME || obj.ACADEMIC_YEAR
            || obj.MAJOR || obj.QUALIFICATION_DEGREE || obj.NAME || obj.DESCRIPTION || <?= searchPersonalDescription() ?>
        ) {
            s = 0;
            
        } else{     
            s = 1;
        }
      
        return s;
        
    }

    function keyEnter(){
        Ext.getCmp('TABPANEL_ID').getLayout().setActiveItem(1);
        var formObject = Ext.getCmp('<?=$OBJECT_FORM->getObjectId()?>');
        var gridObject = Ext.getCmp('<?=$OBJECT_GRID->getObjectId()?>');
        myAjaxRequest(formObject, gridObject);
    }

    function deleteItem(Id){
        window.parent.Ext.MessageBox.show({
            title:'<?=WARNING?>'
            ,width: 350
            ,msg:'<?=DELETE_THIS_ITEM?>'
            ,buttons: Ext.MessageBox.YESNOCANCEL
            ,icon: Ext.MessageBox.QUESTION
            ,fn: function(btn){
                if (btn === 'yes'){
                    Ext.Ajax.request({
                        url: '/student/jsonsave/'
                        ,method: 'POST'
                        ,params: {cmd: 'jsonRemoveStudentFromSchool', objectId:Id}
                        ,success: function(response, options) {Ext.getCmp('<?=$OBJECT_GRID->getObjectId()?>').store.reload();}
                        ,failure: function(response, options) {}
                    });
                }
            }
        });
    }

    function cssStatus(v, p, record){
        return String.format('<div style=\"font-weight:bold;padding:4px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
        );
    }

    function cssText(value, metadata, record){
        return '<div style="font-weight:normal; color:#333; padding:3px;">' + value + '</div>';
    }

    <?
    $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
    $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();

    $OBJECT_GRID->addCellRenderer("
        function colorACTIVE_STUDENTS(v, p, record, rowIndex){
            var str = '<div style=\"padding:5px;height:50px;width:180px;background-color:' + record.data.BG_COLOR_ACTIVE_STUDENTS + '\"><span class=spanStatus>' + v + '</span></div>';
            return str;
        }
    ");

    $OBJECT_LOCATION_PARENT = new CamemisDynCombo("DATASET","PROVINCE");
    $OBJECT_LOCATION_PARENT->setLoadUrl('/dataset/jsonload/');
    $OBJECT_LOCATION_PARENT->objectTitle = CITY_PROVINCE;
    $OBJECT_LOCATION_PARENT->allowBlank = "true";
    $OBJECT_LOCATION_PARENT->width = 150;
    $OBJECT_LOCATION_PARENT->varName = "COUNTRY_PROVINCE";
    $OBJECT_LOCATION_PARENT->setLoadParams("cmd: 'jsonAllLocation',parentId:0");
    $OBJECT_LOCATION_PARENT->renderJS();

    $OBJECT_LOCATION_CHILD = new CamemisDynCombo("DATASET","TWON");
    $OBJECT_LOCATION_CHILD->setLoadUrl('/dataset/jsonload/');
    $OBJECT_LOCATION_CHILD->objectTitle = TOWN_CITY;
    $OBJECT_LOCATION_CHILD->allowBlank = "true";
    $OBJECT_LOCATION_CHILD->width = 150;
    $OBJECT_LOCATION_CHILD->varName = "TOWN_CITY";
    $OBJECT_LOCATION_CHILD->setLoadParams("cmd: 'jsonAllLocation',parentId:'1010101010'");
    $OBJECT_LOCATION_CHILD->renderJS();

    $OBJECT_SCHOOLYEAR = new CamemisDynCombo("ACADEMICDATE","COMBO");
    $OBJECT_SCHOOLYEAR->objectTitle = false;
    $OBJECT_SCHOOLYEAR->allowBlank = "true";
    $OBJECT_SCHOOLYEAR->setLoadUrl('/academicdate/jsonload/');
    $OBJECT_SCHOOLYEAR->varName = "SCHOOLYEAR";
    $OBJECT_SCHOOLYEAR->setLoadParams("cmd: 'allSchoolyearCombo'");
    $OBJECT_SCHOOLYEAR->renderJS();

    $CAMEMIS_PAGE_OBJECT->setAddTab();

    $PERSONAL_INFORMATION ="{
        xtype:'fieldset'
        ,collapsible: true
        ,collapsed: false
        ,title: '".PERSONAL_INFORMATION."'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;font-weight: bold; padding:10px'
        ,width: 310
        ,autoHeight:true
        ,items:[
            {".CamemisField::Textfield("STUDENT_SCHOOL_ID", "STUDENT_SCHOOL_ID", STUDENT_SCHOOL_ID, false, false, false, 150)."}
            ,{".CamemisField::Textfield("CODE_ID", "CODE", CODE_ID, false, false, false, 150)."}
            ,{".CamemisField::Textfield("LASTNAME_ID", "LASTNAME", LASTNAME, false, false, false, 150)."}
            ,{".CamemisField::Textfield("FIRSTNAME_ID", "FIRSTNAME", FIRSTNAME, false, false, false, 150)."}
            ,{".CamemisField::ComboGender(GENDER, false, false, 150)."}
            ,{".CamemisField::comboReligion(false, false, 150)."}
            ,{".CamemisField::comboEthnic(false, false, 150)."}
            ,{".CamemisField::comboNationality(false,false, 150)."}
        ]
   }";

    $REGISTRATION ="{
        xtype:'fieldset'
        ,collapsible: true
        ,collapsed: true
        ,title: '".REGISTRATION."'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;padding:10px'
        ,width: 310
        ,items:[{
            name: 'START_DATE'
            ,hidden: false
            ,width: 150
            ,fieldLabel: '" . START_DATE . "'
            ,xtype: 'datefield'
            ,id: 'START_DATE'
            ,vtype: 'daterange'
            ,endDateField: 'END_DATE'
            ,format: '" . setExtDatafieldFormat() . "'
            ,allowBlank: true
        },{
            name: 'END_DATE'
            ,hidden: false
            ,width: 150
            ,fieldLabel: '" . END_DATE . "'
            ,xtype: 'datefield'
            ,id: 'END_DATE'
            ,vtype: 'daterange'
            ,format: '" . setExtDatafieldFormat() . "'
            ,startDateField: 'START_DATE'
            ,allowBlank: true
        }]
    }";

    $ADDRESS ="{
        xtype:'fieldset'
        ,collapsible: true
        ,collapsed: true
        ,title: '".ADDRESS."'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;padding:10px'
        ,width: 310
        ,items:[
            {".CamemisField::Textfield("PHONE_ID", "PHONE", PHONE, false, false, false, 150)."}
            ,{".CamemisField::Textfield("EMAIL_ID", "EMAIL", EMAIL, false, false, false, 150)."}
            ,{xtype: '".$OBJECT_LOCATION_PARENT->getObjectXType()."'}
            ,{xtype: '".$OBJECT_LOCATION_CHILD->getObjectXType()."'}
        ]
    }";
    //
    $PRE_REQUIREMENTS ="{
        xtype:'fieldset'                        
        ,collapsible: true
        ,collapsed: true
        ,title: '".PRE_REQUIREMENTS."'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;padding:10px'
        ,width: 310
        ,items:[ 
             {".CamemisField::Textfield("NAME", "NAME", NAME, false, false, false, 150)."}     
            ,{".CamemisField::Textfield("DESCRIPTION", "DESCRIPTION", DESCRIPTION, false, false, false, 150)."} 
        ]
    }";
    
    $EDUCATION_BACKGROUND ="{                      
        xtype:'fieldset'
        ,collapsible: true
        ,collapsed: true
        ,title: '".EDUCATION_BACKGROUND."'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;padding:10px'
        ,width: 310
        ,items:[ 
            {".CamemisField::Textfield("ACADEMIC_YEAR", "ACADEMIC_YEAR", ACADEMIC_YEAR, false, false, false, 150)."}     
            ,{".CamemisField::Textfield("INSTITUTION_NAME", "INSTITUTION_NAME", INSTITUTION_NAME, false, false, false, 150)."}
            ,{".CamemisField::comboMajor(false,false, 150)."}  
            ,{".CamemisField::comboQualitycationDegree(false,false, 150)."}
        ]
    }";
    //
    $OBJECT_FORM->addTBarItems("
        text: '".RESET."'
        ,iconCls:'icon-arrow_undo'
        ,handler: function(){
            ".CamemisPage::setRequestURI(false)."
        }
    ");

    $OBJECT_FORM->addTBarItems("
        text: '".FIND."'
        ,id: 'FIND_ID'
        ,formBind:true
        ,iconCls:'icon-magnifier'
        ,scope:this
        ,handler: function(){
            var formObject = Ext.getCmp('".$OBJECT_FORM->getObjectId()."');
            var gridObject = Ext.getCmp('".$OBJECT_GRID->getObjectId()."');
            myAjaxRequest(formObject, gridObject);
        }
    ");

    $FORM_ITEMS = "[";
    $FORM_ITEMS .= "".$PERSONAL_INFORMATION;
    $FORM_ITEMS .= ",".$PRE_REQUIREMENTS;
    $FORM_ITEMS .= ",".$EDUCATION_BACKGROUND;
    $FORM_ITEMS .= ",".$REGISTRATION;
    $FORM_ITEMS .= ",".$ADDRESS;
    $FORM_ITEMS .= ",".Utiles::personalDescriptionDisplayFields("STUDENT",310);
    $FORM_ITEMS .= "]";

    $items = "
        border: false
        ,id: 'FORM_ITEMS'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor().";'
        ,items: ".$FORM_ITEMS."
    ";
    $OBJECT_FORM->addObjectItems($items);

    $OBJECT_FORM->setBodyStyle("padding:10px;background:".CamemisPage::userFormBgColor().";");
    $OBJECT_FORM->labelAlign = "left";
    $OBJECT_FORM->isObjectDefaultOnLoad = false;
    $OBJECT_FORM->isKeys = false;
    $OBJECT_FORM->renderJS();

    $OBJECT_GRID->addReadField("name: 'ID'");
    $OBJECT_GRID->addReadField("name: 'FULL_NAME'");
    $OBJECT_GRID->addReadField("name: 'CODE'");
    $OBJECT_GRID->addReadField("name: 'STUDENT_SCHOOL_ID'");
    $OBJECT_GRID->addReadField("name: 'FIRSTNAME'");
    $OBJECT_GRID->addReadField("name: 'LASTNAME'");
    $OBJECT_GRID->addReadField("name: 'GENDER'");
    $OBJECT_GRID->addReadField("name: 'DATE_BIRTH'");
    $OBJECT_GRID->addReadField("name: 'CURRENT_SCHOOLYEAR'");
    $OBJECT_GRID->addReadField("name: 'CURRENT_ACADEMIC'");
    $OBJECT_GRID->addReadField("name: 'CURRENT_COURSE'");
    $OBJECT_GRID->addReadField("name: 'STUDENT_SCHOOL_ID'");
    $OBJECT_GRID->addReadField("name: 'FIRSTNAME_LATIN'");
    $OBJECT_GRID->addReadField("name: 'LASTNAME_LATIN'");
    $OBJECT_GRID->addReadField("name: 'PHONE'");
    $OBJECT_GRID->addReadField("name: 'EMAIL'");
    $OBJECT_GRID->addReadField("name: 'DATE_BIRTH'");
    $OBJECT_GRID->addReadField("name: 'AGE'");
    $OBJECT_GRID->addReadField("name: 'CREATED_DATE'");
    $OBJECT_GRID->addReadField("name: 'BG_COLOR'");
    $OBJECT_GRID->addReadField("name: 'BG_COLOR_FONT'");
    $OBJECT_GRID->addReadField("name: 'STATUS_KEY'");
    $OBJECT_GRID->addReadField("name: 'STATUS'");
    $OBJECT_GRID->addReadField("name: 'NATIONALITY'");
    $OBJECT_GRID->addReadField("name: 'RELIGION'");
    $OBJECT_GRID->addReadField("name: 'ETHNIC_GROUPS'");

    switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
        case "VIETNAMESE": $width = 100;break;
        default: $width = 85;break;
    }

    $OBJECT_GRID->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.", hidden:".checkColHidden(1, $columndata).", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".CODE_ID."</b>', align:'center', width: 80, hidden:".checkColHidden(2, $columndata).", renderer: cssText, sortable: true, dataIndex: 'CODE',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".STUDENT_SCHOOL_ID."</b>', align:'center', hidden:".checkColHidden(3, $columndata).", width: 120, renderer: cssText, sortable: true, dataIndex: 'STUDENT_SCHOOL_ID',filter:{}");

    if(!SchoolDBAccess::displayPersonNameInGrid()){

        $OBJECT_GRID->addColumn("header: '<b>".LASTNAME."</b>', width: 120, hidden:".checkColHidden(4, $columndata).", renderer: cssText, sortable: true, dataIndex: 'LASTNAME',filter:{}");
        $OBJECT_GRID->addColumn("header: '<b>".FIRSTNAME."</b>', width: 120, hidden:".checkColHidden(5, $columndata).", renderer: cssText, sortable: true, dataIndex: 'FIRSTNAME',filter:{}");
        $OBJECT_GRID->addColumn("header: '<b>".LASTNAME_LATIN."</b>', width: 120, hidden:".checkColHidden(6, $columndata).", renderer: cssText, sortable: true, dataIndex: 'LASTNAME_LATIN',filter:{}");
        $OBJECT_GRID->addColumn("header: '<b>".FIRSTNAME_LATIN."</b>', width: 120, hidden:".checkColHidden(7, $columndata).", renderer: cssText, sortable: true, dataIndex: 'FIRSTNAME_LATIN',filter:{}");

    }else{

        $OBJECT_GRID->addColumn("header: '<b>".FIRSTNAME."</b>', width: 120, hidden:".checkColHidden(4, $columndata).", renderer: cssText, sortable: true, dataIndex: 'FIRSTNAME',filter:{}");
        $OBJECT_GRID->addColumn("header: '<b>".LASTNAME."</b>', width: 120, hidden:".checkColHidden(5, $columndata).", renderer: cssText, sortable: true, dataIndex: 'LASTNAME',filter:{}");
        $OBJECT_GRID->addColumn("header: '<b>".FIRSTNAME_LATIN."</b>', width: 120, hidden:".checkColHidden(6, $columndata).", renderer: cssText, sortable: true, dataIndex: 'FIRSTNAME_LATIN',filter:{}");
        $OBJECT_GRID->addColumn("header: '<b>".LASTNAME_LATIN."</b>', width: 120, hidden:".checkColHidden(7, $columndata).", renderer: cssText, sortable: true, dataIndex: 'LASTNAME_LATIN',filter:{}");
    }

    $OBJECT_GRID->addColumn("header: '<b>".DATE_BIRTH."</b>', align:'center',  width: 100, hidden:".checkColHidden(8, $columndata).", renderer: cssText, sortable: true, dataIndex: 'DATE_BIRTH',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".AGE."</b>', align:'center',  width: 100, hidden:".checkColHidden(9, $columndata).", renderer: cssText, sortable: true, dataIndex: 'AGE',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".GENDER."</b>', align:'center',  width: 100, hidden:".checkColHidden(10, $columndata).", renderer: cssText, sortable: true, dataIndex: 'GENDER',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".PHONE."</b>', width: 150, hidden:".checkColHidden(11, $columndata).", renderer: cssText, sortable: true, dataIndex: 'PHONE',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".EMAIL."</b>', width: 150, hidden:".checkColHidden(12, $columndata).", renderer: cssText, sortable: true, dataIndex: 'EMAIL',filter:{}");

    $OBJECT_GRID->addColumn("header: '<b>".CURRENT_CLASS."</b>', width: 150, hidden:".checkColHidden(13, $columndata).", renderer: cssText, align: 'center', sortable: true, dataIndex: 'CURRENT_ACADEMIC',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".CURRENT_SCHOOL_YEAR."</b>', align:'center', width: 150, hidden:".checkColHidden(14, $columndata).", renderer: cssText, sortable: true, dataIndex: 'CURRENT_SCHOOLYEAR',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".COURSE."</b>', width: 150, hidden:".checkColHidden(15, $columndata).", renderer: cssText, align: 'center', sortable: true, dataIndex: 'CURRENT_COURSE',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".CREATED_DATE."</b>', width: 150, hidden:".checkColHidden(16, $columndata).", renderer: cssText, sortable: true, dataIndex: 'CREATED_DATE',filter:{}");

    $OBJECT_GRID->addColumn("header: '<b>".NATIONALITY."</b>', width: 150, hidden:".checkColHidden(17, $columndata).", renderer: cssText, sortable: true, dataIndex: 'NATIONALITY',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".RELIGION."</b>', width: 150, hidden:".checkColHidden(18, $columndata).", renderer: cssText, sortable: true, dataIndex: 'RELIGION',filter:{}");
    $OBJECT_GRID->addColumn("header: '<b>".ETHNIC_GROUPS."</b>', width: 150, hidden:".checkColHidden(19, $columndata).", renderer: cssText, sortable: true, dataIndex: 'ETHNIC_GROUPS',filter:{}");

    $OBJECT_GRID->baseParams = "
        start:0
        ,limit:100
        ,cmd: 'searchStudent'
        ".$gridParam." 
    ";
    if($gridParam){
        $OBJECT_GRID->addTBarItems("
            tbar.add('-',[{
                text: '".CANCEL."'
                ,id: 'CANCEL_ID'
                ,formBind:true
                ,iconCls:'icon-cancel'
                ,scope:this
                ,handler: function(){
                    window.parent.Ext.getCmp('content').getLayout().setActiveItem(0);  
                }
            }]);
        ");
            
    }
    if(UserAuth::getACLValue("STUDENT_SEARCH_EXECUTE_RIGHT")){
        
        $OBJECT_GRID->addTBarItems("
            tbar.add('-',[{
                text: '" . GENERATE . "'
                ,iconCls:'icon-cog_go'
                ,handler: function(){
                    Ext.MessageBox.show({
                        msg: '".SAVING_YOUR_DATA_PLEASE_WAIT."',
                        progressText: 'Saving...',
                        width:300,
                        wait:true,
                        waitConfig: {interval:200},
                        icon:'ext-mb-download'
                    });
                    Ext.Ajax.request({
                        url:'/student/jsonsave/'
                        ,method: 'POST'
                        ,params: {cmd: 'jsonSetCurrentStudentAcademic'}
                        ,success: function(response, options) {
                            Ext.MessageBox.hide();
                        }
                        ,failure: function(response, options) {}
                    });
                }
            }]);
        ");
        
        $OBJECT_GRID->addTBarItems("
            tbar.add('-',[{
                text: '" . EXPORT_TO_EXCEL . "'
                ,id: 'EXPORT_TO_EXCEL'
                ,iconCls:'icon-page_excel'
                ,handler: function(){
                    Ext.MessageBox.show({
                        msg: '".SAVING_YOUR_DATA_PLEASE_WAIT."',
                        progressText: 'Saving...',
                        width:300,
                        wait:true,
                        waitConfig: {interval:200},
                        icon:'ext-mb-download'
                    });
                    myForm = Ext.getCmp('".$OBJECT_FORM->getObjectId()."').getForm();
                    Ext.Ajax.request({
                        url: '/export/jsonexcel/'
                        ,method: 'POST'
                        ,timeout: 600000
                        ,params:{cmd: 'studentSearch',objectId:'STUDENT_SEARCH_ID'}
                        ,form: myForm.getEl().dom
                        ,success: function(response, options) {
                            Ext.MessageBox.hide();
                            window.location='/export/openstudentlist/'
                        }
                    });
                }
            }]);
        ");
    }
    
    $OBJECT_GRID->addTBarItems("
        tbar.add('->');
    ");
    $OBJECT_GRID->loadMask = true;
    $OBJECT_GRID->isPagingToolbar = true;
    if($gridParam){
        $OBJECT_GRID->isObjectDefaultOnLoad = true;
    }else{
        $OBJECT_GRID->isObjectDefaultOnLoad = false;    
    }
    $OBJECT_GRID->forceFit = "false";
    $OBJECT_GRID->isFilterRow = true;
    $OBJECT_GRID->setUserColumn = true;
    $OBJECT_GRID->renderJS();
    ?>
    <?
    if($gridParam){
    ?>
    viewport = new Ext.Viewport({
        layout: 'fit'
        ,border: false
        ,items:[{
            layout: 'card'
            ,id:'content'
            ,activeItem: 0
            ,border: false
            ,items:[{xtype: '<?=$OBJECT_GRID->getObjectXtype();?>'}]
        }]
    });
    <?
    }else{
    ?>
    viewport = new Ext.Viewport({
        layout: 'fit'
        ,border: false
        ,items:[{
            layout: 'card'
            ,border: false
            ,activeItem: 0
            ,id: 'CONTENT'
            ,items:[{
                layout:'border'
                ,border: false
                ,defaults: {
                    collapsible: true
                    ,split: true
                }
                ,items: [{
                    title: ''
                    ,region:'west'
                    ,id: 'WEST_ID'
                    ,margins: '3 0 3 3'
                    ,cmargins: '3 3 3 3'
                    ,width:350
                    ,minSize:350
                    ,maxSize:350
                    ,keys:{
                        key:[13]
                        ,fn: keyEnter
                        ,scope:this
                    }
                    ,items: [{xtype: '<?=$OBJECT_FORM->getObjectXType();?>'}]
                },{
                    title: ''
                    ,collapsible: false
                    ,id: 'center'
                    ,region:'center'
                    ,layout: 'card'
                    ,activeItem: 0
                    ,margins: '3 3 3 0'
                    ,items:[{
                        layout:'fit'
                        ,bodyStyle: 'background:<?=CamemisPage::userBgColor();?>;padding:3px'
                        ,border: false
                        ,items:[{
                            xtype: 'tabpanel'
                            ,id:'TABPANEL_ID'
                            ,tabPosition: 'top'
                            ,plain:true
                            ,activeTab: 0
                            ,enableTabScroll:true
                            ,items:[{
                                title:'<?= SEARCH_RESULT;?>'
                                ,layout:'fit'
                                ,items:[{xtype: '<?=$OBJECT_GRID->getObjectXtype();?>'}]
                            }]
                        }]
                    }]
                }]
            }]
        }]
    });
    <?}?>
    var comboParent = Ext.getCmp('PROVINCE_ID');
    var comboChild = Ext.getCmp('TWON_ID');
    if(comboParent){
        comboParent.on('select', function() {
            comboChild.setValue('');
            comboChild.store.baseParams = {
                cmd: 'jsonAllLocation'
                ,parentId: comboParent.getValue()
            };
            comboChild.store.reload();
        });
    }

    <?

    $SHOW_DETAIL ="{";
    $SHOW_DETAIL .="text: '".SHOW_DETAIL." &raquo; ' + record.data.FULL_NAME";
    $SHOW_DETAIL .=",iconCls: 'icon-user'";
    $SHOW_DETAIL .=",handler: function(){";
    $SHOW_DETAIL .="contextMenu.hide();clickOpenPage('center','','/student/studentmonitor/?&target=".camemisId()."&objectId=' + record.data.ID + '&noSudentComboLsit=true');";
    $SHOW_DETAIL .="Ext.getCmp('WEST_ID').collapse();";
    $SHOW_DETAIL .="}";
    $SHOW_DETAIL .="}";

    if (UserAuth::getACLValue("STUDENT_PERSONAL_INFORMATION_READ_RIGHT"))
    $CONTEXTMENU_ITEMS[] = $SHOW_DETAIL;

    $SEND_SMS ="{";
    $SEND_SMS .="text: '".SEND." &raquo; ' + record.data.FULL_NAME";
    $SEND_SMS .=",iconCls: 'icon-email_add'";
    $SEND_SMS .=",handler: function(){";
    $SEND_SMS .="contextMenu.hide();clickOpenPage('center','".SEND_MAIL." &raquo; ' + record.data.FULL_NAME, '/communication/tostudent/?objectId=' + record.data.ID)";
    $SEND_SMS .="}";
    $SEND_SMS .="}";
    if (UserAuth::getACLValue("STUDENT_SEARCH_EXECUTE_RIGHT"))
    $CONTEXTMENU_ITEMS[] = $SEND_SMS;

    $PAYMENT_INFORMATION ="{";
    $PAYMENT_INFORMATION .="text: '".PAYMENT_INFORMATION." &raquo; ' + record.data.FULL_NAME";
    $PAYMENT_INFORMATION .=",iconCls: 'icon-cashier'";
    $PAYMENT_INFORMATION .=",handler: function(){";
    $PAYMENT_INFORMATION .="contextMenu.hide();clickOpenPage('center',record.data.FULL_NAME,'/finance/studentaccounthistory/?&target=".camemisId()."&objectId=' + record.data.ID);";
    $PAYMENT_INFORMATION .="}";
    $PAYMENT_INFORMATION .="}";
    if (UserAuth::getACLValue("STUDENT_SEARCH_EXECUTE_RIGHT"))
    $CONTEXTMENU_ITEMS[] = $PAYMENT_INFORMATION;

    $CHOOSE_CONTEXTMENU_ITEMS = implode(",", $CONTEXTMENU_ITEMS);

    if($CONTEXTMENU_ITEMS){
        $html = "";
        $html .="var grid = Ext.getCmp('".$OBJECT_GRID->getObjectId()."');";
        $html .="if (grid) grid.on('cellclick', function(grid, rowIndex, columnIndex, event) {";
            $html .="var record = grid.store.getAt(rowIndex);";
            $html .="var contextMenu = new Ext.menu.Menu({";
            $html .="items: [".$CHOOSE_CONTEXTMENU_ITEMS."]";
            $html .="});";
            $html .="event.stopEvent();";
            $html .="contextMenu.showAt(event.xy);";
        $html .="});";
        echo $html;
    }

    ?>
    Ext.state.Manager.setProvider(new Ext.state.HttpProvider({url: '/dataset/jsonsave/'}));

});
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>