<?
///////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 19.02.2012
// Am Stollheen 18, 55120 Mainz, Germany
///////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisTree.php';
require_once 'clients/CamemisBar.php';
require_once 'include/Common.inc.php';
require_once 'clients/CamemisGrid.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$LIST_OF_STUDENTS = new CamemisGrid("LIST_OF_STUDENTS", "LIST_OF_STUDENTS");
$LIST_OF_STUDENTS->setLoadUrl("/student/jsonload/");
$LIST_OF_STUDENTS->setSaveUrl("/student/jsonsave/");

$ASSIGNED_STUDENTS = new CamemisGrid("STUDENT", "LIST_CLASS");
$ASSIGNED_STUDENTS->setLoadUrl("/student/jsonload/");
$ASSIGNED_STUDENTS->setSaveUrl("/student/jsonsave/");

if(!$this->facette) {header("Location: /main/permission/");exit;}

$TERM_NUMBER = AcademicDBAccess::findAcademicTerm($this->facette->SCHOOL_YEAR);

function deleteStudent($ASSIGNED_STUDENTS, $academicId){
    
    $js = "";
    $js .= "window.parent.Ext.MessageBox.show({";
    $js .= "title:'" . STATUS . "'";
    $js .= ",width: 350";
    $js .= ",msg: '" . DELETE_THIS_ITEM . "'";
    $js .= ",buttons: Ext.MessageBox.YESNO";
    $js .= ",icon: Ext.MessageBox.WARNING";
    $js .= ",fn: function(btn, text){
        if (btn == 'yes'){
            Ext.Ajax.request({
                url: '/student/jsonsave/'
                ,method: 'POST'
                ,params: {cmd: 'jsonRemoveEnrolledStudentFromClass',academicId:'".$academicId."',removeId:record.data.ID}
                ,success: function(response, options) {
                    XMsg('".STATUS."','".WAR_REMOVED_SUCCESSFULLY."');
                    Ext.getCmp('" . $ASSIGNED_STUDENTS->getObjectId() . "').store.reload();
                }
                ,failure: function(response, options) {}
            });
        }
    }";
    $js .= "});";
    
    return $js;
}
         
print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();

?>
<script>
var studentId;
Ext.onReady(function() {
	
    Ext.Ajax.timeout = 600000;
    
    function cssStatus(v, p, record){
        return String.format('<div style=\"font-weight:bold;padding:4px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
        );
    }
    
    function cssText(value, metadata, record){
        return '<div style="font-weight:normal; color:#333; padding:3px;">' + value + '</div>';
    }
    <?
    $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
    $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();
    
    ///////////////////////////////////////////////////////
    $LIST_OF_STUDENTS->addReadField("name: 'CODE'");
    $LIST_OF_STUDENTS->addReadField("name: 'STUDENT_SCHOOL_ID'");
    $LIST_OF_STUDENTS->addReadField("name: 'LASTNAME'");
    $LIST_OF_STUDENTS->addReadField("name: 'FIRSTNAME'");
    $LIST_OF_STUDENTS->addReadField("name: 'GENDER'");
    $LIST_OF_STUDENTS->addReadField("name: 'DATE_BIRTH'");
    $LIST_OF_STUDENTS->addReadField("name: 'BG_COLOR'");
    $LIST_OF_STUDENTS->addReadField("name: 'BG_COLOR_FONT'");
    $LIST_OF_STUDENTS->addReadField("name: 'STATUS_KEY'");
    
    switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
        case "VIETNAMESE": $width = 100;break;
        default: $width = 85;break;
    }
    
    $LIST_OF_STUDENTS->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.",renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
    $LIST_OF_STUDENTS->addColumn("header: '<b>".CODE_ID."</b>', align:'left', renderer:cssText, sortable: true, width: 80,dataIndex: 'CODE'");
    
    if(!SchoolDBAccess::displayPersonNameInGrid()){
        $LIST_OF_STUDENTS->addColumn("header: '<b>".LASTNAME."</b>', width: 100,renderer:cssText, sortable: true, dataIndex: 'LASTNAME'");
        $LIST_OF_STUDENTS->addColumn("header: '<b>".FIRSTNAME."</b>', width: 100,renderer:cssText, sortable: true, dataIndex: 'FIRSTNAME'");
    }else{
        $LIST_OF_STUDENTS->addColumn("header: '<b>".FIRSTNAME."</b>', width: 100,renderer:cssText, sortable: true, dataIndex: 'FIRSTNAME'");
        $LIST_OF_STUDENTS->addColumn("header: '<b>".LASTNAME."</b>', width: 100,renderer:cssText, sortable: true, dataIndex: 'LASTNAME'");
    }
    
    $LIST_OF_STUDENTS->addColumn("header: '<b>".GENDER."</b>', width: 100,renderer: cssText, sortable: true, dataIndex: 'GENDER'");
    $LIST_OF_STUDENTS->addColumn("header: '<b>".DATE_BIRTH."</b>', width: 120,renderer: cssText, sortable: true, dataIndex: 'DATE_BIRTH'");
    
    $LIST_OF_STUDENTS->isQuickySearch = true;
    $LIST_OF_STUDENTS->isCheckboxSelect = true;

    if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT")){
        $LIST_OF_STUDENTS->addTBarItems("
            tbar.add('-');
        ");
        $LIST_OF_STUDENTS->addTBarItems("
            tbar.add([{
                id: 'LIST_ADD_ENROLLMENT_RECORD_ID'
                ,text: '<b>".APPLY_INTO_LIST_OF_STUDENTS."</b>'
                ,iconCls:'icon-disk'
                ,scope:this
                ,handler: this.onSelection
            }]);
        ");
    }
    
    $LIST_OF_STUDENTS->baseParams = "
        start:0
        ,limit:100
        ,academicId: '".$this->facette->GUID."'
        ,cmd: 'jsonUnassignedStudentsByClass'
    ";

    $LIST_OF_STUDENTS->setSelectionParams("
        cmd: 'jsonAddStudent2GradeClassSchoolyear'
        ,academicId: '".$this->facette->GUID."'
    ");

    $LIST_OF_STUDENTS->setSelectionEmbeddedEvents("
        Ext.getCmp('".$ASSIGNED_STUDENTS->getObjectId()."').store.reload();
    ");

    $LIST_OF_STUDENTS->forceFit = "false";
    $LIST_OF_STUDENTS->renderJS();
    
    ///////////////////////////////////////////////////////
    $ASSIGNED_STUDENTS->addTBarItems("
        tbar.add('-');
    ");
    
    $ASSIGNED_STUDENTS->addTBarItems("
        tbar.add([{
            text: '".CANCEL."'
            ,id: 'CANCEL_ID'
            ,formBind:true
            ,iconCls:'icon-cancel'
            ,scope:this
            ,handler: function(){
                window.parent.Ext.getCmp('center').getLayout().setActiveItem(0);
            }
        }]);
    ");
    
    $ASSIGNED_STUDENTS->addTBarItems("
        tbar.add('-',[{
            id: 'GRID_REFRESH_ID'
            ,text: '".REFRESH."'
            ,iconCls:'icon-reload'
            ,scope:this
            ,disabled: false
            ,handler: function(){
                Ext.getCmp('".$ASSIGNED_STUDENTS->getObjectId()."').store.reload();
            }
        }]);
    ");

    if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT")){
        $ASSIGNED_STUDENTS->addTBarItems("
            tbar.add(['-',{
                id: 'ADD_STUDENTS'
                ,iconCls:'icon-application_form_add'
                ,text: '".ADD_STUDENTS." '
                ,handler: function(){
                    openWinXType('WinXType','".ADD_STUDENTS."', '".$LIST_OF_STUDENTS->getObjectXType()."',percentWidth(80), percentHeight(85));
                }
            }]);
        ");
    }
    
    $ASSIGNED_STUDENTS->addTBarItems("
        tbar.add(['-', {
            text:''
            ,tooltip:'".CAMEMIS_HELP."'
            ,iconCls: 'icon-help'
            ,handler:function(){
                ".CamemisPage::setEmbeddedHelp("66B5-5155")."
            }
        }]);
    ");
    
    if(UserAuth::getACLValue("STUDENT_SEARCH_EXECUTE_RIGHT")){
        $ASSIGNED_STUDENTS->addTBarItems("
            tbar.add(['-',{
                text: '" . EXPORT_TO_EXCEL . "'
                ,id: 'EXPORT_TO_EXCEL'
                ,iconCls:'icon-page_excel'
                ,handler: function(){
                    Ext.MessageBox.show({
                        msg: '".SAVING_YOUR_DATA_PLEASE_WAIT."',
                        progressText: 'Saving...',
                        width:300,
                        wait:true,
                        waitConfig: {interval:200},
                        icon:'ext-mb-download'
                    });
                    Ext.Ajax.request({
                        url: '/export/jsonexcel/'
                        ,method: 'POST'
                        ,params:{cmd: 'studentSearch',objectId:'STUDENT_LIST_CLASS_ID',classId:'".$this->facette->ID."'}
                        ,success: function(response, options) {
                            Ext.MessageBox.hide();
                            window.location='/export/openstudentlist/'
                        }
                    });
                }
            }]);
        ");
    }
    
    ////////////////////////////////////////////////////////////////////////////
    $ASSIGNED_STUDENTS->addReadField("name: 'ID'");
    $ASSIGNED_STUDENTS->addReadField("name: 'CODE'");
    $ASSIGNED_STUDENTS->addReadField("name: 'FULL_NAME'");
    $ASSIGNED_STUDENTS->addReadField("name: 'FIRSTNAME'");
    $ASSIGNED_STUDENTS->addReadField("name: 'LASTNAME'");
    $ASSIGNED_STUDENTS->addReadField("name: 'STUDENT'");
    $ASSIGNED_STUDENTS->addReadField("name: 'GENDER'");
    $ASSIGNED_STUDENTS->addReadField("name: 'DATE_BIRTH'");
    $ASSIGNED_STUDENTS->addReadField("name: 'BG_COLOR'");
    $ASSIGNED_STUDENTS->addReadField("name: 'BG_COLOR_FONT'");
    $ASSIGNED_STUDENTS->addReadField("name: 'STATUS_KEY'");
    $ASSIGNED_STUDENTS->addReadField("name: 'STATUS'");
    
    $ASSIGNED_STUDENTS->addReadField("name: 'FIRST_ACADEMIC'");
    $ASSIGNED_STUDENTS->addReadField("name: 'SECOND_ACADEMIC'");
    $ASSIGNED_STUDENTS->addReadField("name: 'THIRD_ACADEMIC'");
    $ASSIGNED_STUDENTS->addReadField("name: 'FOURTH_ACADEMIC'");
    
    switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
        case "VIETNAMESE": $width = 100;break;
        default: $width = 85;break;
    }
    
    $ASSIGNED_STUDENTS->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
    $ASSIGNED_STUDENTS->addColumn("header: '<b>".CODE_ID."</b>', align:'center', width: 80, renderer: cssText, sortable: true, dataIndex: 'CODE'");

    if(!SchoolDBAccess::displayPersonNameInGrid()){
        $ASSIGNED_STUDENTS->addColumn("
            header: '<b>".LASTNAME."</b>'
            , width: 110
            , sortable: true
            , dataIndex: 'LASTNAME'
            , editor: new Ext.form.TextField({
                allowBlank: false
                ,name: 'LASTNAME'
            })
        ");

        $ASSIGNED_STUDENTS->addColumn("
            header: '<b>".FIRSTNAME."</b>'
            , width: 110
            , sortable: true
            , dataIndex: 'FIRSTNAME'
            , editor: new Ext.form.TextField({
                allowBlank: false
                ,name: 'FIRSTNAME'
            })
        ");

    }else{

        $ASSIGNED_STUDENTS->addColumn("
            header: '<b>".FIRSTNAME."</b>'
            , width: 110
            , sortable: true
            , dataIndex: 'FIRSTNAME'
            , editor: new Ext.form.TextField({
                allowBlank: false
                ,name: 'FIRSTNAME'
            })
        ");

        $ASSIGNED_STUDENTS->addColumn("
            header: '<b>".LASTNAME."</b>'
            , width: 110
            , sortable: true
            , dataIndex: 'LASTNAME'
            , editor: new Ext.form.TextField({
                allowBlank: false
                ,name: 'LASTNAME'
            })
        ");
    }
        
    $ASSIGNED_STUDENTS->addColumn("header: '<b>".GENDER."</b>', align:'center',  width: 100, renderer: cssText, sortable: true, dataIndex: 'GENDER'");
    $ASSIGNED_STUDENTS->addColumn("
        header: '<b>".DATE_BIRTH."</b>'
        , width: 110
        , sortable: true
        , dataIndex: 'DATE_BIRTH'
        , editor: new Ext.form.TextField({
            allowBlank: false
            ,name: 'DATE_BIRTH'
        })
    ");
    
    $ASSIGNED_STUDENTS->baseParams = "
        start:0
        ,limit:100
        ,classId: '".$this->facette->ID."'
        ,cmd: 'jsonEnrolledStudentsToClass'
    ";
    
    $ASSIGNED_STUDENTS->setRemoveEmbeddedEvents("
        Ext.getCmp('".$ASSIGNED_STUDENTS->getObjectId()."').store.reload();
    ");
    
    switch(UserAuth::getUserType()){
        case "ADMIN":
        case "SUPERADMIN":
            $ASSIGNED_STUDENTS->setSaveParams("
                cmd: 'actionStudentGradeClassSchoolyear'
                ,academicId: '".$this->facette->GUID."'
            ");
            $ASSIGNED_STUDENTS->setAftereditCallback("
                XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."'); 
            ");
            $ASSIGNED_STUDENTS->isGridEditing = true;
            break;
    }
    
    $ASSIGNED_STUDENTS->removeNAME = "STUDENT";
    $ASSIGNED_STUDENTS->loadMask = true;
    $ASSIGNED_STUDENTS->isQuickySearch = true;
    $ASSIGNED_STUDENTS->isObjectDefaultOnLoad = true;
    $ASSIGNED_STUDENTS->forceFit = "false";
    $ASSIGNED_STUDENTS->setUserColumn = true;
    $ASSIGNED_STUDENTS->renderJS();
    ///////////////////////////////////////////////////////
    
    $PENEL_ITEMS = Array();

    $ENROLLMENT_EXAMINATION = "{
        title: '".LIST_OF_STUDENTS."'
        ,layout: 'fit'
        ,items: [{xtype: '".$ASSIGNED_STUDENTS->getObjectXType()."'}]
    }";
    $PENEL_ITEMS[] = $ENROLLMENT_EXAMINATION;
    
    switch($this->facette->ENROLLMENT_TYPE){
        case 1:
            $SEMESTER_ENROLLMENT = "{
                title: '".SEMESTER_ENROLLMENT."'
                ,layout: 'fit'
                ,items:[new Ext.ux.IFrameComponent({ id: 'SEMESTER_ENROLLMENT', url: ''})]
            }";
            $PENEL_ITEMS[] = $SEMESTER_ENROLLMENT;
            break;
        case 2:
            $SUBJECT_ENROLLMENT = "{
                title: '".SUBJECT_ENROLLMENT."'
                ,layout: 'fit'
                ,items:[new Ext.ux.IFrameComponent({ id: 'SUBJECT_ENROLLMENT', url: ''})]
            }";
            $PENEL_ITEMS[] = $SUBJECT_ENROLLMENT;
            break;
    }
    $CHOOSE_ITEMS = "[".implode(',',$PENEL_ITEMS)."]";
    ?>
            
    viewport = new Ext.Viewport({
        layout: 'fit'
        ,border: false
        ,items:[{
            layout:'fit'
            ,bodyStyle: 'background:<?=CamemisPage::userBgColor();?>;padding:3px'
            ,border: false
            ,items:[{
                xtype: 'tabpanel'
                ,tabPosition: 'top'
                ,plain:true
                ,activeTab: 0
                ,enableTabScroll:true
                ,items:<?=$CHOOSE_ITEMS?>
            }]
        }]
    });

    <?
        $CONTEXT_ITEMS = array();
                                                           
        $DETAIL_INFORMATION = "
        {
            text: '".SHOW_DETAIL." &raquo; ' + record.data.FULL_NAME
            ,iconCls: 'icon-user'
            ,disabled:false
            ,handler: function(){
                clickOpenPage('center','".SHOW_DETAIL." &raquo; ' + record.data.FULL_NAME,'/student/studentmonitor/?target=".camemisId()."&objectId=' + record.data.ID);
            }
        }";
        $CONTEXT_ITEMS[] = $DETAIL_INFORMATION;

        $STUDENT_REMOVE_FROM_CLASS = "
        {
            text: '".REMOVE." &raquo; ' + record.data.FULL_NAME
            ,iconCls:'icon-delete'
            ,handler:function(){".deleteStudent($ASSIGNED_STUDENTS,$this->facette->GUID)."}
        }
        ";
        
        $CONTEXT_ITEMS[] = $STUDENT_REMOVE_FROM_CLASS;
        $CHOOSE_CONTEXT_ITEMS = implode(',', $CONTEXT_ITEMS);
        
        if($CONTEXT_ITEMS){
            $js = "";
            $js .="var grid = Ext.getCmp('".$ASSIGNED_STUDENTS->getObjectId()."');";
            $js .="if (grid) grid.on('cellclick', function(grid, rowIndex, columnIndex, event) {";
                $js .="var record = grid.store.getAt(rowIndex);";
                $js .= "if(columnIndex==1 || columnIndex==2){ ";
                    $js .="var contextMenu = new Ext.menu.Menu({";
                        $js .="items: [".$CHOOSE_CONTEXT_ITEMS."]";
                    $js .="});";
                    $js .="contextMenu.showAt(event.xy);";
                    $js .="event.stopEvent();";
                $js .="}";
            $js .="});";
            echo $js;
        } 
    ?>
});
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>