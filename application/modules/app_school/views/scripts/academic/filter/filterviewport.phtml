<?
///////////////////////////////////////////////////////////
// @Sor Veasna
// Date: 17.05.2014
///////////////////////////////////////////////////////////
require_once 'utiles/Utiles.php';
require_once 'models/UserAuth.php';
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'include/Common.inc.php';
require_once 'models/student_filter/SQLStudentFilterReport.php';
require_once setUserLoacalization();

abstract class filterviewport{
    
    public $datafield = array();
    public $exportExcel = false;
    
    public function __construct() {
                      
    }
    
    public function __get($name) {
        if (array_key_exists($name, $this->datafield)) {
            return $this->datafield[$name];
        }
        return null;
    }

    public function __set($name, $value) {
        $this->datafield[$name] = $value;
    }

    public function __isset($name) {
        return array_key_exists($name, $this->datafield);
    }

    public function __unset($name) {
        unset($this->datafield[$name]);
    }
    
    public function difineGrid(){
        
        $this->OBJECT_GRID = new CamemisGrid($this->gridType,$this->objectType);
        switch($this->gridType){
            case 'STUDENT_FILTER':
                $this->OBJECT_GRID->setLoadUrl('/student/jsonload/');
                $this->OBJECT_GRID->setSaveUrl('/student/jsonsave/');
                break;
            case 'STUDENT_ATTENDANCE_FILTER':
                $this->OBJECT_GRID->setLoadUrl('/attendance/jsonload');
                $this->OBJECT_GRID->setSaveUrl('/attendance/jsonsave/'); 
                break;
            case 'STUDENT_DISCIPLINE_FILTER':
                $this->OBJECT_GRID->setLoadUrl('/discipline/jsonload');
                $this->OBJECT_GRID->setSaveUrl('/discipline/jsonsave/');
                break;
            case 'STUDENT_ADVISORY_FILTER':
                $this->OBJECT_GRID->setLoadUrl('/advisory/jsonload');
                $this->OBJECT_GRID->setSaveUrl('/advisory/jsonsave/');
                break;
                
        }
        $this->columndata = Utiles::getGridColumnData($this->OBJECT_GRID->getObjectId());     
        $this->urlEncryp = new URLEncryption();
    }
    
    public function setCmdParams(){
        $cmdParams = "start:0";
        $cmdParams .=",limit:100";
        if($this->campusId)
        $cmdParams .=",campusId: '".$this->campusId."'";
        if($this->gradeId)
        $cmdParams .=",gradeId: '".$this->gradeId."'";
        if($this->schoolyearId)
        $cmdParams .=",schoolyearId: '".$this->schoolyearId."'";
        if($this->classId)
        $cmdParams .=",classId: '".$this->classId."'";
        
        return $cmdParams;
    }
    
    public function getObjectCAMEMISType(){
        switch($this->gridType){
            case 'STUDENT_ATTENDANCE_FILTER':
                $stdClass['personType']="STUDENT";
                $stdClass['status']=1;
                $objectCAMEMISType = SQLStudentFilterReport::getAttendanceType((object)$stdClass); 
                $this->Prefix = "ATTENDANCE";
                break;
            case 'STUDENT_DISCIPLINE_FILTER':
                $objectCAMEMISType = SQLStudentFilterReport::getDisciplineType(); 
                $this->Prefix = "DISCIPLINE";
                break;
            case 'STUDENT_ADVISORY_FILTER':
                $objectCAMEMISType = SQLStudentFilterReport::getAdvisoryType(); 
                $this->Prefix = "ADVISORY";
                break;
                
        }
        return $objectCAMEMISType;  
   }
   
   public function setFilterColumn($columns){
        $i=1;
        if($columns)
        {
            foreach($columns as $value)
            {
                $this->OBJECT_GRID->addReadField("name: '".$value."'"); 
                $fieldFilter = "";
                switch ($value) {
                    case "CODE":
                        $CONST_NAME = CODE_ID;
                        $colWidth = 120;
                        $filter = false;
                        break;
                    case "GENDER":
                        $CONST_NAME = GENDER;
                        $colWidth = 120;
                        $filter = true;
                        $fieldFilter = "field: {
                                        xtype: 'combo',
                                            mode: 'local',
                                            store: new Ext.data.ArrayStore({
                                                id: 0,
                                                fields: ['value'],
                                                data: [['-'], ['" . MALE . "'], ['" . FEMALE . "']]
                                            }),
                                            valueField: 'value',
                                            displayField: 'value',
                                            triggerAction: 'all',
                                            value: '-'
                                        },
                                        fieldEvents: ['select'],
                                        test: function(filterValue, value, record) {
                                            return filterValue === '-' || filterValue === value;
                                        }
                        ";
                        break;
                    case "AGE":
                        $CONST_NAME = AGE;
                        $colWidth = 80;
                        $filter = true;
                        $fieldFilter = "";
                        break;
                    case "CURRENT_CAMPUS":
                        $CONST_NAME = CAMPUS;
                        $colWidth = 200;
                        $filter = true;
                        $fieldFilter = "";
                        break;
                    default:
                        $CONST_NAME = defined($value) ? constant($value) : $value;
                        $colWidth = 120;
                        $filter = true;
                        $fieldFilter = "";
                        break;
                }
                
                $columnProperies = "header: '<b>".$CONST_NAME."</b>'";
                $columnProperies .= ", width: ".$colWidth."";
                $columnProperies .= ", align:'center'";
                $columnProperies .= ", hidden:".checkColHidden($i, $this->columndata)."";
                $columnProperies .= ", renderer: cssText";
                $columnProperies .= ", sortable: true";
                $columnProperies .= ", dataIndex: '".$value."'";
                if($filter)
                $columnProperies .= ",filter:{".$fieldFilter."}";
                $this->OBJECT_GRID->addColumn($columnProperies);      
                $i++;
            }
        } 
   }
   
   public function setGridCAMEMISTypeFirstColumn(){
        switch($this->objectType){
            case 'CAMPUS':
                $this->OBJECT_GRID->addColumn("
                    header: '<b>".GRADE."</b>'
                    , width: 160, hidden:".checkColHidden(1, $this->columndata)."
                    , sortable: true
                    , dataIndex: 'FIRST_CULUMN'
                ");
                break;
            case 'GRADE':
                $this->OBJECT_GRID->addColumn("
                    header: '<b>".GRADE_CLASS."</b>'
                    , width: 160, hidden:".checkColHidden(1, $this->columndata)."
                    , sortable: true
                    , dataIndex: 'FIRST_CULUMN'  
                ");
                break;
            case 'CLASS':
                $this->OBJECT_GRID->addColumn("
                    header: '<b>".FULL_NAME."</b>'
                    , width: 160, hidden:".checkColHidden(1, $this->columndata)."
                    , renderer: renderTextBold
                    , sortable: true
                    , dataIndex: 'FIRST_CULUMN'
                ");
                break;      
        }    
   }
   
   public function setCountFilterColumn(){
        
        $this->OBJECT_GRID->addReadField("name: 'FIRST_CULUMN'");
        $objectCAMEMISType=$this->getObjectCAMEMISType();
        if($objectCAMEMISType){
            foreach($objectCAMEMISType as $value){
                $this->OBJECT_GRID->addReadField("name: '".$this->Prefix."_".$value->ID."'");
            }
            $this->setGridCAMEMISTypeFirstColumn();
            $i=2;
            foreach($objectCAMEMISType as $value){
                $this->OBJECT_GRID->addColumn("
                    header: '<b>".$value->NAME."</b>'
                    , width: 160, hidden:".checkColHidden($i, $this->columndata)."
                    ,  sortable: true
                    , dataIndex: '".$this->Prefix."_".$value->ID."'
                ");
                $i++;
            } 
        }     
    }
    
   public function tbarExport($cmdParams){
        if(UserAuth::getACLValue("STUDENT_SEARCH_EXECUTE_RIGHT")){
            $this->OBJECT_GRID->addTBarItems("
                tbar.add([{
                    text: '" . EXPORT_TO_EXCEL . "'
                    ,id: 'EXPORT_TO_EXCEL'
                    ,iconCls:'icon-page_excel'
                    ,handler: function(){
                        Ext.MessageBox.show({
                            msg: '".SAVING_YOUR_DATA_PLEASE_WAIT."',
                            progressText: 'Saving...',
                            width:300,
                            wait:true,
                            waitConfig: {interval:200},
                            icon:'ext-mb-download'
                        });
                        Ext.Ajax.request({
                            url: '/export/jsonexcel/'
                            ,method: 'POST'
                            ,timeout: 600000
                            ,params:{".$cmdParams.",objectId:'".$this->OBJECT_GRID->getObjectId()."'}
                            ,success: function(response, options) {
                                Ext.MessageBox.hide();
                                window.location='/export/openstudentlist/'
                            }
                        });
                    }
                }]);
            ");
        }  
    }
    
    public function getChart($params){
        
        switch($this->gridType){
            case 'STUDENT_FILTER':
                $js = ",items: [new Ext.ux.IFrameComponent({ id: 'TRADITIONAL_EDUCATION_SYSTEM', url:'/chart/studentacademictraditional/?camIds=".$this->urlEncryp->encryptedGet($params)."'})]";
                break;
            case 'STUDENT_ATTENDANCE_FILTER':
                $js = ",items: [new Ext.ux.IFrameComponent({ id: 'TRADITIONAL_EDUCATION_SYSTEM', url:'/chart/studentattendance/?camIds=".$this->urlEncryp->encryptedGet($params)."'})]";
                break;
            case 'STUDENT_DISCIPLINE_FILTER':
                $js = ",items: [new Ext.ux.IFrameComponent({ id: 'TRADITIONAL_EDUCATION_SYSTEM', url:'/chart/discipline/?camIds=".$this->urlEncryp->encryptedGet($params."&personType=STUDENT")."'})]";
                break;
            case 'STUDENT_ADVISORY_FILTER':
                $js = ",items: [new Ext.ux.IFrameComponent({ id: 'TRADITIONAL_EDUCATION_SYSTEM', url:'/chart/studentadvisory/?camIds=".$this->urlEncryp->encryptedGet("objectType=YEARLY")."'})]";
                break;
            default:
                $js = ",items: [new Ext.ux.IFrameComponent({ id: 'TRADITIONAL_EDUCATION_SYSTEM', url:'/chart/studentacademictraditional/?camIds=".$this->urlEncryp->encryptedGet($params)."'})]";
                break; 
        }
        return $js;    
    }
    
    public function redererViewPort($params){
        $js = "";
            $js .= "viewport = new Ext.Viewport({";
                $js .= "layout: 'fit'";
                $js .= ",border: false";
                $js .= ",items:[{";
                    $js .= "layout:'border'";
                    $js .= ",border: false";
                    $js .= ",defaults: {";
                        $js .= "collapsible: true";
                        $js .= ",split: true";
                    $js .= "}";
                    $js .= ",items: [{";
                        $js .= "region:'north'";
                        $js .= ",id:'NORTH_ID'";
                        $js .= ",margins: '3 3 0 3'";
                        $js .= ",cmargins: '3 3 3 3'";
                        $js .= ",autoScroll: true";
                        $js .= ",height:300";
                        $js .= ",minSize:300";
                        $js .= ",maxSize:300";
                        $js .= ",layout: 'fit'";
                        $js .= $this->getChart($params);
                    $js .= "},{";
                        $js .= "collapsible: false";
                        $js .= ",id: 'center'";
                        $js .= ",region:'center'";
                        $js .= ",margins: '0 3 3 3'";
                        $js .= ",layout: 'card'";
                        $js .= ",activeItem: 0";
                        $js .= ",items: [{xtype: '".$this->OBJECT_GRID->getObjectXType()."'}]";
                    $js .= "}]";
                $js .= "}]";
            $js .= "});";
            $js .= "Ext.state.Manager.setProvider(new Ext.state.HttpProvider({url: '/dataset/jsonsave/'}));";
        echo $js;    
    }
      
}
