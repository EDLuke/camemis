<?

////////////////////////////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 31.03.2014
// Am Stollheen 18, 55120 Mainz, Germany
////////////////////////////////////////////////////////////////////////////////

require_once("Zend/Loader.php");
require_once 'models/export/CamemisExportDBAccess.php';
require_once 'models/export/CamemisExportDBAccess.php';

class ScoreExportTemplateDBAccess extends CamemisExportDBAccess {

    function __construct($actionType, $academicId, $subjectId, $assignmentId, $term, $date, $monthyear, $section) {

        $this->actionType = $actionType;
        $this->academicId = (int) $academicId;
        $this->subjectId = (int) $subjectId;
        $this->assignmentId = (int) $assignmentId;
        $this->term = $term;
        $this->date = $date;
        $this->section = $section;
        $this->monthyear = $monthyear;

        $this->evaluation = new EvaluationSubjectAssessment();
        $this->evaluation->setAcademicId($this->academicId);
        $this->evaluation->setSubjectId($this->subjectId);
        $this->evaluation->setAssignmentId($this->assignmentId);
        $this->evaluation->setDate($this->date);
        $this->evaluation->setTerm($this->term);
        $this->evaluation->setMonthYear($this->monthyear);

        $this->startHeader = 3;
        parent::__construct();
    }

    public function setAssignmentId($value) {
        $this->evaluation->setAssignmentId($value);
        $this->assignmentId = $value;
    }

    public function setNewStartContent() {
        //startContent()

        if ($this->evaluation->getSettingEvaluationOption()) {
            return $this->startContent() - 1;
        } else {
            return $this->startContent();
        }
    }

    public function setTitleSheet() {
        if ($this->evaluation->getSettingEvaluationOption()) {
            $this->EXCEL->getActiveSheet()->setTitle(SUBJECT);
        } else {
            $this->EXCEL->getActiveSheet()->setTitle($this->evaluation->getAssignment()->SHORT);
        }
    }

    public function setTableHeader() {

        if ($this->evaluation->getSettingEvaluationOption()) {
            $this->setTableHeaderEvaluationOfSubject();
        } else {
            $this->setTableHeaderEvaluationOfAssignment();
        }
    }

    public function setParams() {
        if ($this->evaluation->getSettingEvaluationOption()) {

            if ($this->term) {
                return array(
                    "academicId" => $this->academicId
                    , "subjectId" => $this->subjectId
                    , "term" => $this->term
                    , "section" => $this->section
                );
            } else {
                return array(
                    "academicId" => $this->academicId
                    , "subjectId" => $this->subjectId
                    , "term" => $this->term
                    , "section" => $this->section
                );
            }
        } else {
            return array(
                "academicId" => $this->academicId
                , "subjectId" => $this->subjectId
                , "assignmentId" => $this->assignmentId
                , "date" => $this->date
            );
        }
    }

    public function getFileName() {
        return self::getUserPhath("_scoreimporttemplate.xls");
    }

    public function setTableHeaderEvaluationOfAssignment() {

        $content = $this->evaluation->getCurrentClass()->NAME . " (" . $this->evaluation->getCurrentSchoolyear()->NAME . ")";
        $content .= "\r";

        if ($this->monthyear) {
            $content .= diplayNameMonthYear($this->monthyear);
            $content .= "\r";
        }

        $content .= $this->evaluation->getSubject()->SUBJECT_NAME;
        $content .= "\r";
        $content .= $this->evaluation->getSubjectScorePossible();

        if ($this->assignmentId) {
            $content .= "\r";
            $content .= $this->evaluation->getAssignment()->SHORT;
        }

        $this->setCellMergeContent(0, 1, $content, "A1", "C1");
        $this->setFontStyle(0, 1, true, 11, "000000");
        $this->setFullStyle(0, 1, "FFFFFF");
        $this->setCellStyle(0, 1, false, 100, false);

        $this->setCellContent(0, 2, "DATE");
        $this->setBorderStyle(0, 2, false);
        $this->setFontStyle(0, 2, true, 11, "000000");
        $this->setCellStyle(0, 2, 20, 30);

        if ($this->date) {
            $this->setCellContent(1, 2, getShowDate($this->date));
            $this->setBorderStyle(1, 2, false);
            $this->setFontStyle(1, 2, true, 11, "000000");
            $this->setCellStyle(1, 2, 20, 30);
        } else {
            if ($this->actionType == "MULTI") {
                $this->setCellContent(1, 2, Zend_Registry::get('SCHOOL')->SYSTEM_DATE_FORMAT);
                $this->setBorderStyle(1, 2, false);
                $this->setFontStyle(1, 2, true, 11, "000000");
                $this->setCellStyle(1, 2, 20, 30);
            }
        }

        $this->setCellContent(2, 2, $this->academicId . "_" . $this->subjectId . "_" . $this->assignmentId);
        $this->setBorderStyle(2, 2, false);
        $this->setFontStyle(2, 2, true, 11, "000000");
        $this->setCellStyle(2, 2, 20, 30);

        $this->setCellContent(0, 3, "CODE_ID");
        $this->setFontStyle(0, 3, true, 11, "000000");
        $this->setFullStyle(0, 3, "DFE3E8");
        $this->setCellStyle(0, 3, 20, 30);

        $this->setCellContent(1, 3, "STUDENT");
        $this->setFontStyle(1, 3, true, 11, "000000");
        $this->setFullStyle(1, 3, "DFE3E8");
        $this->setCellStyle(1, 3, 30, 30);

        $this->setCellContent(2, 3, "SCORE");
        $this->setFontStyle(2, 3, true, 11, "000000");
        $this->setFullStyle(2, 3, "DFE3E8");
        $this->setCellStyle(2, 3, 20, 30);
    }

    public function setTableHeaderEvaluationOfSubject() {

        $content = $this->evaluation->getCurrentClass()->NAME . " (" . $this->evaluation->getCurrentSchoolyear()->NAME . ")";
        $content .= "\r";
        $content .= $this->evaluation->getSubject()->SUBJECT_NAME;
        $content .= "\r";
        $content .= $this->evaluation->getSubjectScorePossible();
        $this->setCellMergeContent(0, 1, $content, "A1", "C1");
        $this->setFontStyle(0, 1, true, 11, "000000");
        $this->setFullStyle(0, 1, "FFFFFF");
        $this->setCellStyle(0, 1, false, 100, false);

        $this->setCellContent(0, 2, "CODE_ID");
        $this->setFontStyle(0, 2, true, 11, "000000");
        $this->setFullStyle(0, 2, "DFE3E8");
        $this->setCellStyle(0, 2, 20, 30);

        $this->setCellContent(1, 2, "STUDENT");
        $this->setFontStyle(1, 2, true, 11, "000000");
        $this->setFullStyle(1, 2, "DFE3E8");
        $this->setCellStyle(1, 2, 30, 30);

        $this->setCellContent(2, 2, "SCORE");
        $this->setFontStyle(2, 2, true, 11, "000000");
        $this->setFullStyle(2, 2, "DFE3E8");
        $this->setCellStyle(2, 2, 20, 30);

        $this->setCellContent(3, 2, "RANK");
        $this->setFontStyle(3, 2, true, 11, "000000");
        $this->setFullStyle(3, 2, "DFE3E8");
        $this->setCellStyle(3, 2, 20, 30);
    }

    public function setTableContent() {

        $stdClass = (object) $this->setParams();

        $entries = $this->evaluation->listClassStudents();

        if ($entries) {

            $i = 0;
            $colIndex = 0;

            foreach ($entries as $value) {

                $rowIndex = $i + $this->setNewStartContent();

                $STUDENT = getFullName($value->FIRSTNAME, $value->LASTNAME);
                $stdClass->studentId = $value->ID;

                $this->setCellContent(0, $rowIndex, $value->CODE);
                $this->setFontStyle(0, $rowIndex, false, 9, "000000");
                $this->setCellStyle(0, $rowIndex, false, 20);

                $this->setCellContent(1, $rowIndex, $STUDENT);
                $this->setFontStyle(1, $rowIndex, false, 9, "000000");
                $this->setCellStyle(1, $rowIndex, false, 20);

                if ($this->evaluation->getSettingEvaluationOption()) {
                    $this->setCellContent(2, $rowIndex, "");
                } else {
                    $facette = SQLEvaluationStudentAssignment::getScoreSubjectAssignment($stdClass);
                    $this->setCellContent(2, $rowIndex, $facette ? $facette->POINTS : "");
                }

                $this->setFontStyle(2, $rowIndex, false, 9, "000000");
                $this->setCellStyle(2, $rowIndex, false, 20);

                $i++;
            }
        }
    }

    public function setSaveExcel() {
        switch ($this->actionType) {
            case "MULTI":

                if ($this->evaluation->getCurrentClassAssignments()) {
                    $i = 0;
                    foreach ($this->evaluation->getCurrentClassAssignments() as $value) {
                        $this->setAssignmentId($value->ASSIGNMENT_ID);
                        if ($i)
                            $this->EXCEL->createSheet();
                        $this->EXCEL->setActiveSheetIndex($i);
                        $this->setTableHeaderEvaluationOfAssignment();
                        $this->setTableContent();
                        $this->EXCEL->getActiveSheet()->setTitle($value->SHORT);

                        $i++;
                    }
                }

                $this->WRITER->save($this->getFileName());

                break;
            default:
                $this->EXCEL->setActiveSheetIndex(0);
                $this->setTableHeader();
                $this->setTableContent();
                $this->setTitleSheet();
                $this->WRITER->save($this->getFileName());
                break;
        }
    }

}

$actionType = isset($_GET["actionType"]) ? addText($_GET["actionType"]) : "";
$academicId = isset($_GET["academicId"]) ? (int) $_GET["academicId"] : "";
$subjectId = isset($_GET["subjectId"]) ? (int) $_GET["subjectId"] : "";
$assignmentId = isset($_GET["assignmentId"]) ? (int) $_GET["assignmentId"] : "";
$date = isset($_GET["date"]) ? addText($_GET["date"]) : "";
$term = isset($_GET["term"]) ? addText($_GET["term"]) : "";
$monthyear = isset($_GET["monthyear"]) ? addText($_GET["monthyear"]) : "";

$section = "";
switch ($term) {
    case "FIRST_SEMESTER":
    case "SECOND_SEMESTER":
        $section = "2";
        break;
    case "FIRST_TERM":
    case "SECOND_TERM":
    case "THIRD_TERM":
        $section = "4";
        break;
    case "FIRST_QUARTER":
    case "SECOND_QUARTER":
    case "THIRD_QUARTER":
    case "FOURTH_QUARTER":
        $section = "5";
        break;
}

$exportTemplate = new ScoreExportTemplateDBAccess(
        $actionType
        , $academicId
        , $subjectId
        , $assignmentId
        , $term
        , $date
        , $monthyear
        , $section);
$exportTemplate->setSaveExcel();

$fileName = UserAuth::getUserId() . "_scoreimporttemplate.xls";
$exportFile = "../public/" . UserAuth::getMyFolder() . "/" . $fileName . "";

header("Content-Type: application/x-msexcel;");
header("Content-Disposition: attachment; filename=\"" . $fileName . "\"");
// IE <= 6 cache fix
header('Expires: 0');
header('Pragma: cache');
header('Cache-Control: private');

if (file_exists($exportFile)) {
    $fh = fopen($exportFile, 'r');
    fpassthru($fh);
    fclose($fh);
    unlink($exportFile);
}
?>