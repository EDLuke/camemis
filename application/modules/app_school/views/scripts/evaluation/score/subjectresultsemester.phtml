<?
////////////////////////////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 01.05.2014
// Am Stollheen 18, 55120 Mainz, Germany
////////////////////////////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisTree.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisBar.php';
require_once 'include/Common.inc.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$OBJECT_GRID = new CamemisGrid("SUBJECT_EVALUATION", "LIST");
$OBJECT_GRID->setLoadUrl('/evaluation/jsonload/');
$OBJECT_GRID->setSaveUrl('/evaluation/jsonsave/');

$term = isset($_GET["term"])?addText($_GET["term"]):"";

switch($term){
    case "FIRST_SEMESTER":
        $section ="2";
        $SELECTED_MENU = FIRST_SEMESTER_RESULT;
        break;
    case "SECOND_SEMESTER":
        $section ="2";
        $SELECTED_MENU = SECOND_SEMESTER_RESULT;
        break;
    case "FIRST_TERM":
        $section ="4";
        $SELECTED_MENU = FIRST_TERM_RESULT;
        break;
    case "SECOND_TERM":
        $section ="4";
        $SELECTED_MENU = SECOND_TERM_RESULT;
        break;
    case "THIRD_TERM":
        $section ="4";
        $SELECTED_MENU = THIRD_TERM_RESULT;
        break;
    case "FIRST_QUARTER":
        $section ="5";
        $SELECTED_MENU = FIRST_QUARTER_RESULT;
        break;
    case "SECOND_QUARTER":
        $section ="5";
        $SELECTED_MENU = SECOND_QUARTER_RESULT;
        break;
    case "THIRD_QUARTER":
        $section ="5";
        $SELECTED_MENU = THIRD_QUARTER_RESULT;
        break;
    case "FOURTH_QUARTER":
        $section ="5";
        $SELECTED_MENU = FOURTH_QUARTER_RESULT;
    break;
}

$academicObject = AcademicDBAccess::findGradeFromId($this->academicId);

if(!$academicObject) {header("Location: /main/permission/");exit;}

if($academicObject->EVALUATION_TYPE){
    $TOTAL_AVG_RESULT = "AVG (%)";
    $TOTAL_AVG_RESULT_REPEAT = "REPEAT (%)";
}else{
    $TOTAL_AVG_RESULT = "AVG";
    $TOTAL_AVG_RESULT_REPEAT = "REPEAT";
}

$GRADING_TYPE = $academicObject->GRADING_TYPE?"LETTER_GRADE":"ASSESSMENT";

////////////////////////////////////////////////////////////////////////////////
if($academicObject->EDUCATION_SYSTEM){
    $subjectId = $academicObject->SUBJECT_ID;
    $subjectObject = SubjectDBAccess::getAcademicSubject($subjectId,$academicObject->PARENT);
}else{
    $subjectId = $this->subjectId;
    $subjectObject = SubjectDBAccess::getAcademicSubject($subjectId,$academicObject->ID);
} 

if(!is_object($subjectObject)) {header("Location: /main/permission/");exit;}

$academicId = $academicObject->ID;
$campusObject = AcademicDBAccess::findGradeFromId($academicObject->CAMPUS_ID);

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();

////////////////////////////////////////////////////////////////////////////////
switch($subjectObject->SCORE_TYPE){
    case 1:
        $comboAssessment = "
            new Ext.form.ComboBox({
                triggerAction:'all'
                ,mode:'local'
                ,store: new Ext.data.JsonStore({
                    autoDestroy: true
                    ,fields: ['chooseValue', 'chooseDisplay']
                    ,data:[".AssessmentConfig::comboGradingSystem(1, $academicObject)."]
                })
                ,valueField: 'chooseValue'
                ,displayField: 'chooseDisplay'
                ,editable: false
                ,listeners: {
                    select: function(combo, record, index) {
                        replaceValue = combo.getValue();
                        var newDisplay = record.get('chooseDisplay');
                        combo.setValue(newDisplay);
                        comboValue = record.get('chooseValue');
                    }
                }
            })
        ";
        break;
    case 2:
        ////////////////////////////////////////////////////////////////////
        $STORE_DATA = array();
        $scoresEntries = explode(',',$subjectObject->MAX_POSSIBLE_SCORE);
        $STORE_DATA[0] = "{chooseValue: '0', chooseDisplay: '---'}";
        if($scoresEntries){
            $i=0;
            foreach($scoresEntries as $value){
                $j = $i+1;
                //error_log($value);
                $gradingObject = AssessmentConfig::getSQLGradingScale(trim($value), 2, $campusObject->QUALIFICATION_TYPE, false);
                if($gradingObject && trim($value)){
                    $STORE_DATA[$j] = ",{chooseValue: '".$gradingObject->ID."', chooseDisplay: '".trim($value)."'}";
                }
                $i++;
            }
        }
            
        $comboAssessment = "
            new Ext.form.ComboBox({
                triggerAction:'all'
                ,mode:'local'
                ,store: new Ext.data.JsonStore({
                        autoDestroy: true
                        ,fields: ['chooseValue', 'chooseDisplay']
                        ,data:[".implode($STORE_DATA)."]
                    })
                ,valueField: 'chooseValue'
                ,displayField: 'chooseDisplay'
                ,editable: false
                ,listeners: {
                    select: function(combo, record, index) {
                        replaceValue = combo.getValue();
                        var newDisplay = record.get('chooseDisplay');
                        combo.setValue(newDisplay);
                        comboValue = replaceValue;
                    }
                }
            })
        ";
    break;
}

////////////////////////////////////////////////////////////////////////////////
//CATEGORY OF ROW...
////////////////////////////////////////////////////////////////////////////////
$CATEGORY_ROW = "";
$CATEGORY_ROW .= "{header: '<b>".PERSONAL_INFORMATION."</b>', colspan: 4, align: 'center'}";
switch($subjectObject->SCORE_TYPE){
    case 1:
        $CATEGORY_ROW .= ",{header: '<b>".ASSESSMENT_INFORMATION."</b>', colspan: 4, align: 'center'}";
        break;
    default:
        $CATEGORY_ROW .= ",{header: '<b>".ASSESSMENT_INFORMATION."</b>', colspan: 1, align: 'center'}";
        break;
}
$listAssignmentCategory = AssessmentConfig::getListAssignmentCategoryScoreDate(
        $academicId
        , $subjectId
        , $term
        , false);
if($listAssignmentCategory){
    foreach($listAssignmentCategory as $value){
        $colspan = AssessmentConfig::getTermCountCategoryScoreDate($value->ID, $academicId, $subjectId, $term);
        $CATEGORY_ROW .= ",{header: '<b>".$value->TITLE."</b>', colspan: ".$colspan.", align: 'center'}";  
    }
}

////////////////////////////////////////////////////////////////////////////////
//GROUP OF ROW...
////////////////////////////////////////////////////////////////////////////////
$setParams = "";
$setParams .="&subjectId=".$subjectObject->SUBJECT_ID."";
$setParams .="&academicId=".$this->academicId."";
$setParams .="&term=".$term."";
$setParams .="&section=".$section."";

$GROUP_ROW = "";
$GROUP_ROW .= "{header: '&nbsp;', colspan: 1, align: 'center'}";
switch($subjectObject->SCORE_TYPE){
    case 1:
        $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
        $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
        $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
        $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
        break;
    default:
        $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
        break;
}

$GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
$GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
$GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";

if(!$academicObject->EVALUATION_OPTION){
    $listGroupAssignments = AssessmentConfig::getListAssignmentScoreDate($academicId, $subjectId, $term, false, true);
    if($listGroupAssignments){
        foreach($listGroupAssignments as $value){

            switch($subjectObject->SCORE_TYPE){
                case 1:
                    $COEFF_VALUE = $value->COEFF_VALUE?$value->COEFF_VALUE:1;
                    $TITLE = $academicObject->EVALUATION_TYPE?"$value->SHORT (".$COEFF_VALUE."%)":"$value->SHORT (".$COEFF_VALUE.")";
                break;
                default:
                    $TITLE = $value->SHORT;
                break;
            }

            $colspan =  AssessmentConfig::getTermCountScoreDate($value->ID, $academicId, $subjectId, $term);
            $GROUP_ROW .= ",{header: '<b>".$TITLE."</b>', colspan: ".$colspan.", align: 'center'}";  
        }
    }
}

$COLUMS = "";
$COLUMS .= "new Ext.grid.RowNumberer()";
$COLUMS .= ",{dataIndex: 'STATUS_KEY', header: '<b>".STATUS."</b>', width:90, renderer:cssStatus, align:'center',sortable: true}";
$COLUMS .= ",{dataIndex: 'STUDENT', header: '<b>".FULL_NAME."</b>', width:130,sortable: true, renderer:cssDefault}";
$COLUMS .= ",{dataIndex: 'GENDER', header: '<b>".GENDER."</b>', width:80,sortable: true,align:'center',renderer:cssDefault}";

switch($subjectObject->SCORE_TYPE){
    case 1:
        $COLUMS .= ",{dataIndex: 'RANK', header: '<b>".RANK."</b>', width: 80 ,align: 'center',sortable: true,renderer:cssNumber}";
        $COLUMS .= ",{header: '<b>".constant($GRADING_TYPE)."</b>'
        , width: 100
        , align: 'center'
        , sortable: true
        , dataIndex: 'ASSESSMENT'
        , renderer:cssNumber
        , editor: ".$comboAssessment."}";
        $COLUMS .= ",{
            dataIndex:'DISPLAY_TOTAL'
            ,header: '<b>".$TOTAL_AVG_RESULT."</b>'
            ,width:70
            ,renderer:cssNumber
            ,align: 'center'
            ,sortable: true
            ,editor: new Ext.form.NumberField({
                allowBlank: false
                ,name: 'DISPLAY_TOTAL'   
            })
        }";
        $COLUMS .= ",{
            dataIndex:'DISPLAY_REPEAT'
            ,header: '<b>".$TOTAL_AVG_RESULT_REPEAT."</b>'
            ,width:80
            ,renderer:cssNumberRepeat
            ,align: 'center'
            ,sortable: true
        }";
        break;
    default:
        $COLUMS .= ",{header: '<b>".constant($GRADING_TYPE)."</b>'
        , width: 100
        , align: 'center'
        , sortable: true
        , dataIndex: 'ASSESSMENT'
        , renderer:cssNumber
        , editor: ".$comboAssessment."}";
        break;
}

$FIELDS = "";
$FIELDS .= "{name: 'ID'}";
$FIELDS .= ",{name: 'STATUS_KEY'}";
$FIELDS .= ",{name: 'BG_COLOR'}";
$FIELDS .= ",{name: 'BG_COLOR_FONT'}";
$FIELDS .= ",{name: 'STATUS_KEY'}";
$FIELDS .= ",{name: 'STUDENT'}";
$FIELDS .= ",{name: 'GENDER'}";

switch($subjectObject->SCORE_TYPE){
    case 1:
        $FIELDS .= ",{name: 'DISPLAY_TOTAL'}";
        $FIELDS .= ",{name: 'TOTAL_RESULT'}";
        $FIELDS .= ",{name: 'ASSESSMENT'}";
        $FIELDS .= ",{name: 'RANK'}";
        $FIELDS .= ",{name: 'DISPLAY_REPEAT'}";
        break;
    default:
        $FIELDS .= ",{name: 'ASSESSMENT'}";
        break;
}

if(!$academicObject->EVALUATION_OPTION){
    $listAssignments = AssessmentConfig::getListAssignmentScoreDate($academicId, $subjectId, $term, false, false);
    if($listAssignments){
        foreach($listAssignments as $value){

            $COLUMS .= ",{dataIndex:'A_".$value->OBJECT_ID."',header:'".getShowDate($value->SCORE_INPUT_DATE)."',width:100,align:'center',renderer:cssDefault}"; 
            $FIELDS .= ",{name: 'A_".$value->OBJECT_ID."'}";
        }
    }
}

?>

<style>
    @media screen and (-webkit-min-device-pixel-ratio:0) { 
    .x-grid3-cell, /* Normal grid cell */
    .x-grid3-gcell /* Grouped grid cell (esp. in head)*/
    {
        box-sizing: border-box;
    }
}
</style>

<script>
var _chooseValue,_chooseDisplay,term = '<?=$this->term?>',comboValue;
Ext.onReady(function() {
    
    function cssStatus(v, p, record){
        return String.format('<div style=\"font-weight:normal;padding:3px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
        );
    }
    
    function cssDefault(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:normal; color:#333; padding:3px;">' + value + '</div>';
    }
    
    function cssNumber(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:bold; color:#333; padding:3px;">' + value + '</div>';
    }
    
    function cssNumberRepeat(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:bold; color:#FFF; padding:3px;background:#FF0000">' + value + '</div>';
    }
    
    <?php

    $setActionPareams = $setParams;
    $setActionPareams .= "&target=TERM";
    
    $html = "";
    
    $html .= "var fields = [],columns = [],categoryGroupRow = [],groupRow = [];";
    
    $html .="var categoryGroupRow = [".$CATEGORY_ROW."];";
    $html .= "var groupRow = [".$GROUP_ROW."];";
    $html .= "var group = new Ext.ux.grid.ColumnHeaderGroup({rows: [categoryGroupRow,groupRow]});";
    $html .= "var fields =  [".$FIELDS."];";
    $html .= "var columns = [".$COLUMS."];";
    
    $html .= "var myStore = new Ext.data.Store({";
        $html .= "proxy: new Ext.data.HttpProxy({url:'/evaluation/jsonload/', method: 'POST'})";
        $html .= ",baseParams:{";
            $html .= "start:0";
            $html .= ",limit:100";
            $html .= ",cmd:'jsonSubjectResultsByTerm'";
            $html .= ",camIds: '".$this->urlEncryp->encryptedGet($setParams)."'";
        $html .= "}";
        $html .= ",reader:new Ext.data.JsonReader({";
            $html .= "id:'NAME'";
            $html .= ",totalProperty:'totalCount'";
            $html .= ",root:'rows'";
            $html .= ",fields:fields";
        $html .= "})";
    $html .= "});";

    $html .= "var grid = new Ext.grid.EditorGridPanel({";
        $html .= "tbar:[{";
            $html .= "text: '<b>".REFRESH."</b>'";
            $html .= ",iconCls:'icon-reload'";
            $html .= ",handler: function(){";
                $html .= "".CamemisPage::setRequestURI(false)."";
            $html .= "}";
            
        switch($subjectObject->SCORE_TYPE){
            case 1:
                $html .= "},'-',{";
                $html .= "text: '<b>".CALCULATION."</b>'";
                $html .= ",iconCls:'icon-calculator_add'";
                $html .= ",handler: function(){";
                    $html .= "Ext.MessageBox.show({";
                        $html .= "msg: '".SAVING_YOUR_DATA_PLEASE_WAIT."',";
                        $html .= "progressText: 'Saving...',";
                        $html .= "width:300,";
                        $html .= "wait:true,";
                        $html .= "waitConfig: {interval:200},";
                        $html .= "icon:'ext-mb-download'";
                    $html .= "});";
                    $html .= "Ext.Ajax.request({";
                        $html .= "url: '/evaluation/jsonsave/'";
                        $html .= ",method: 'POST'";
                        $html .= ",params:{";
                            $html .= "cmd: 'jsonActionCalculationSubjectEvaluation'";
                            $html .= ",camIds: '".$this->urlEncryp->encryptedGet($setActionPareams)."'";
                        $html .= "}";
                        $html .= ",success: function() {";
                            $html .= "Ext.MessageBox.hide();";
                            $html .= "grid.store.load();";
                        $html .= "}";
                    $html .= "});";
                $html .= "}";
            break;
        }
        
        if($academicObject->EVALUATION_OPTION){
            $html .= "},'-',{";
                $html .= "text: '<b>".EXCEL_TEMPLATE."</b>'";
                $html .= ",iconCls:'icon-page_excel'";
                $html .= ",handler: function(){window.location='/evaluation/scoreimporttemplate/?camIds=".$this->urlEncryp->encryptedGet($setParams)."';}";
            $html .= "},'-',{";
                $html .= "text: '<b>".IMPORT."</b>'";
                $html .= ",iconCls:'icon-database_copy'";
                $html .= ",handler: function(){window.location='/evaluation/scoreimporttemplate/?camIds=".$this->urlEncryp->encryptedGet($setParams)."';}";
            $html .= "";
        }
        
        //Task for Ratha
        $html .= "},'-',{";
            $html .= "text: '<b>".EXPORT_TO_EXCEL."</b>'";
            $html .= ",iconCls:'icon-page_excel'";
            $html .= ",disabled:true";
            $html .= ",handler: function(){}";
        $html .= "";
            
        $html .= "},'->','<b>".$SELECTED_MENU."</b>']";
        
        $html .= ",loadMask: new Ext.LoadMask(Ext.getBody(), {msg:'<b>CAMEMIS " . LOADING . "</b>', msgCls:'x-mask-loading-camemis'})";
        $html .= ",clicksToEdit:1";
        $html .= ",border:false";
        $html .= ",store: myStore";
        $html .= ",columns: columns";
        $html .= ",viewConfig: {";
            $html .= "forceFit: false";
        $html .= "}";
        $html .= ",plugins: group";
        $html .= ",listeners: {";
            $html .= "afteredit: function (e){";
                $html .= "Ext.Ajax.request({";
                    $html .= "url: '/evaluation/jsonsave/'";
                    $html .= ",method: 'POST'";
                    $html .= ",params: {";
                            $html .= "cmd:'jsonActionStudentSubjectAssessment'";
                            $html .= ",camIds: '".$this->urlEncryp->encryptedGet($setParams)."'";
                            $html .= ",id:e.record.get('ID')";
                            $html .= ",oldValue:e.record.get('TOTAL_RESULT')";
                            $html .= ",field: e.field";
                            $html .= ",newValue: e.value";
                            $html .= ",comboValue:comboValue";
                    $html .= "}";
                    $html .= ",success: function (result, request ) {";
                        $html .= "XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."');";
                        $html .= "jsonData = Ext.util.JSON.decode(result.responseText);";
                        $html .= "if (jsonData.data.DISPLAY_REPEAT) e.record.set('DISPLAY_REPEAT',jsonData.data.DISPLAY_REPEAT);";
                        $html .= "grid.getStore().commitChanges();";
                    $html .= "}";
                $html .= "});";
            $html .= "}";
        $html .= "}";
        $html .= ",bbar:new Ext.PagingToolbar({";
            $html .= "store:myStore";
            $html .= ",displayInfo:true";
            $html .= ",pageSize:100";
        $html .= "})";
    $html .= "});";
    $html .= "grid.store.reload();";
    
    $html .= "viewport = new Ext.Viewport({";
        $html .= "layout: 'fit'";
        $html .= ",border: false";
        $html .= ",items:[{";
            $html .= "layout:'fit'";
            $html .= ",border: false";
            $html .= ",items:[grid]";
        $html .= "}]";
    $html .= "});";
    
    echo $html;
    ?>
});
</script>

<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>