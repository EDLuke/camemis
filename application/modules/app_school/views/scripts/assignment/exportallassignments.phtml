<?///////////////////////////////////////////////////////////// @Thou Morng Sothearung// Date: 15.11.2010// 03 Rue des Pibleus Bailly Romainvilliers///////////////////////////////////////////////////////////require_once 'include/Common.inc.php';require_once 'excel/phpexcel/Classes/PHPExcel.php';require_once 'excel/phpexcel/Classes/PHPExcel/IOFactory.php';require_once 'models/app_school/evaluation/EvaluationQueryDBAccess.php';require_once 'models/app_school/evaluation/EvaluationQueryDBAccess.php';require_once 'models/app_school/subject/SubjectDBAccess.php';require_once 'clients/CamemisExcelReport.php';require_once 'models/app_school/academic/AcademicDBAccess.php';require_once 'models/app_school/staff/StaffDBAccess.php';require_once 'models/app_school/AcademicDateDBAccess.php';require_once 'models/app_school/evaluation/CalculationAnalysis.php';require_once 'models/app_school/evaluation/AssignmentDBAccess.php';require_once setUserLoacalization();$db_calculatedStudentAssessment = CalculationAnalysis::getInstance();$db_assignment = AssignmentDBAccess::getInstance();$db_grade = AcademicDBAccess::getInstance();$db_schoolyear = AcademicDateDBAccess::getInstance();$db_subject = SubjectDBAccess::getInstance();$db_teacher = StaffDBAccess::getInstance();$classId = isset($_GET["classId"]) ? $_GET["classId"] : "";$teacherId = isset($_GET["teacherId"]) ? $_GET["teacherId"] : "";$schoolyearId = isset($_GET["schoolyearId"]) ? $_GET["schoolyearId"] : "";$subjectId = isset($_GET["subjectId"]) ? $_GET["subjectId"] : "";$term = isset($_GET["term"]) ? $_GET["term"] : "";$gradeId = $db_grade->findGradeIdFromObjectId($classId);$params["gradeId"] = $gradeId;$params["classId"] = $classId;$params["subjectId"] = $subjectId;$params["term"] = $term;$objectEntries = $db_assignment->jsonAssignmentsByGrade($params, false);$entries;$i = 0;$j = 0;$k = 0;$assignment = array();foreach ($objectEntries as $key => $value) {    switch ($value["ASSESSMENT_TYPE"]) {        case "RT":            $assignment["RT"][$i]["ID"] = $value["ID"];            $assignment["RT"][$i]["NAME"] = $value["OBJECT_NAME"];            $assignment["RT"][$i]["CATEGORY_ID"] = $value["CATEGORY_ID"];            $assignment["RT"][$i]["ASSESSMENT_TYPE"] = $value["ASSESSMENT_TYPE"];            $i++;            break;        case "PT":            $assignment["PT"][$j]["ID"] = $value["ID"];            $assignment["PT"][$j]["NAME"] = $value["OBJECT_NAME"];            $assignment["PT"][$j]["CATEGORY_ID"] = $value["CATEGORY_ID"];            $assignment["PT"][$j]["ASSESSMENT_TYPE"] = $value["ASSESSMENT_TYPE"];            $j++;            break;        case "ST":            $assignment["ST"][$k]["ID"] = $value["ID"];            $assignment["ST"][$k]["NAME"] = $value["OBJECT_NAME"];            $assignment["ST"][$k]["CATEGORY_ID"] = $value["CATEGORY_ID"];            $assignment["ST"][$k]["ASSESSMENT_TYPE"] = $value["ASSESSMENT_TYPE"];            $k++;            break;    }}$tab = array("RT", "PT", "ST");$assignmentTab = array();foreach ($tab as $key => $value) {    foreach ($assignment as $key2 => $value2) {        if ($value == $key2) {            $assignmentTab[$value] = $assignment[$value];        }    }}$entries = array();$entries[0]["CODE"] = "test";$entries[0]["STUDENT"] = "TEST student";$entries[0]["NUMBER"] = "0";$info = "";$columns[] = "NUMBER";$columns[] = "CODE";$columns[] = "STUDENT";$ShowColumns[] = "NÂ°";$ShowColumns[] = CODE_ID;$ShowColumns[] = STUDENT;$PT = 0;$RT = 0;$ST = 0;$range = 4;$value = null;foreach ($assignmentTab as $key => $value) {    foreach ($value as $key2 => $entry) {        $params["assignmentId"] = $entry["ID"];        $students = $db_calculatedStudentAssessment->jsonStudentAssignment($params, false);        $i = 0;        foreach ($students as $key3 => $data) {            $entries[$i]["NUMBER"] = $i + 1;            $entries[$i]["CODE"] = $data["CODE"];            $entries[$i]["STUDENT"] = $data["STUDENT"];            $entries[$i][$entry["ASSESSMENT_TYPE"] . "_" . $entry["ID"]] = $data["POINTS"];            $i++;        }        $$entry["ASSESSMENT_TYPE"] ++;        $columns[] = $entry["ASSESSMENT_TYPE"] . "_" . $entry["ID"];        $ShowColumns[] = $entry["NAME"];        $info .= $entry["ASSESSMENT_TYPE"] . "_" . $entry["ID"] . "_" . $range . "|";        $range++;    }}$classObject = $db_grade->findObjectClassFromId($classId);$schoolyearObject = $db_schoolyear->findAcademicDateFromId($classObject->SCHOOL_YEAR);$TEACHER_OBJECT = $db_teacher->getSaffDataFromId($classObject->INSTRUCTOR);$SUBJECT_DATA = $db_subject->getSubjectDataFromId($subjectId);$TITLE = SCORES_BY_ASSIGNMENT;$TITLE .= " " . $schoolyearObject->NAME;$TITLE .= "\n" . $SUBJECT_DATA["NAME"];$TITLE .= " - " . constant($term);$SCHOOL_INFO = SCHOOL . " : " . setShowText(Zend_Registry::get('SCHOOL')->NAME);$SCHOOL_INFO .= "\n" . GRADE_CLASS . " : " . setShowText($classObject->NAME);$SCHOOL_INFO .= "\n" . TEACHER . " : " . setShowText($TEACHER_OBJECT["BOX_NAME"]);$SCHOOL_INFO .= "\n" . DATE . " : " . getShowDate(getCurrentDBDate());$CamemisExcelReport = CamemisExcelReport::GetInstance();$CamemisExcelReport->iHeaderRowStart = 6;$CamemisExcelReport->iRowStart = 7;$objPHPExcel = $CamemisExcelReport->createExcelObject($columns, $ShowColumns, $entries, null, true, true);$column = $objPHPExcel->getActiveSheet()->getHighestColumn();$CamemisExcelReport->createTitle($TITLE, $column);$CamemisExcelReport->createInfoBloc($SCHOOL_INFO, $column);$objPHPExcel->getActiveSheet()->setCellValue("A3", $info);$objPHPExcel->getActiveSheet()->mergeCells("A3:" . $column . "3");$objPHPExcel->getActiveSheet()->setCellValue("A4", $classId);$objPHPExcel->getActiveSheet()->setCellValue("B4", $subjectId);$objPHPExcel->getActiveSheet()->setCellValue("C4", $teacherId);$objPHPExcel->getActiveSheet()->setCellValue("D4", $term);$col = "C";for ($i = 0; $i < $RT; $i++) {    $col++;}$style = array(    'alignment' => array(        'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,    ),    'font' => array(        'bold' => true,        'size' => 13,        'color' => array(            'argb' => PHPExcel_Style_Color::COLOR_DARKBLUE        )    ));$col2 = $col;if ($RT) {    $objPHPExcel->getActiveSheet()->mergeCells("D5:" . $col . "5");    $objPHPExcel->getActiveSheet()->setCellValue("D5", REGULAR_TEST);    $objPHPExcel->getActiveSheet()->getStyle("D5")->applyFromArray($style);    $col++;}if ($PT) {    for ($i = 0; $i < $PT; $i++) {        $col2++;    }    $objPHPExcel->getActiveSheet()->mergeCells($col . "5:" . $col2 . "5");    $objPHPExcel->getActiveSheet()->setCellValue($col . "5", PERIODICAL_TEST);    $objPHPExcel->getActiveSheet()->getStyle($col . "5")->applyFromArray($style);}$col2++;if ($ST) {    $objPHPExcel->getActiveSheet()->mergeCells($col2 . "5:" . $column . "5");    $objPHPExcel->getActiveSheet()->setCellValue($col2 . "5", SEMESTER_TEST);    $objPHPExcel->getActiveSheet()->getStyle($col2 . "5")->applyFromArray($style);}$objPHPExcel->getActiveSheet()->getRowDimension("3")->setVisible(false);$objPHPExcel->getActiveSheet()->getRowDimension("4")->setVisible(false);for ($startColumn = "B"; $startColumn <= $column; $startColumn++) {    $objPHPExcel->getActiveSheet()->getColumnDimension($startColumn)->setAutoSize(false);    $objPHPExcel->getActiveSheet()->getColumnDimension($startColumn)->setWidth(18);}$objPHPExcel->getActiveSheet()->getColumnDimension("B")->setWidth(13);$objPHPExcel->getActiveSheet()->getColumnDimension("C")->setWidth(25);$TITLE = ASSIGNMENT . " ";$TITLE .= $classObject->NAME . " - ";$TITLE .= $SUBJECT_DATA["NAME"] . " - ";$TITLE .= constant($term);$TITLE = str_replace(array("/", "\\"), "", $TITLE);$filename = $TITLE;$CamemisExcelReport->createSignatureField();header("Content-Type: application/x-msexcel; name=\"" . $filename . ".xls\"");header("Content-Disposition: attachment; filename=\"" . $filename . ".xls\"");// IE <= 6 cache fixheader('Expires: 0');header('Pragma: cache');header('Cache-Control: private');$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');$objWriter->save('php://output');?>