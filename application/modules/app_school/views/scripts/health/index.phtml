<?
///////////////////////////////////////////////////////////
// @sor veasna
// Date: 18.02.2014
// 
///////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisBar.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisDynamicCombo.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisTree.php';
require_once 'include/Common.inc.php';
require_once 'utiles/Utiles.php';
require_once 'clients/CamemisViewport.php';
require_once 'models/UserAuth.php';
require_once 'models/app_school/LocationDBAccess.php';
require_once 'models/app_school/student/StudentDBAccess.php';
require_once 'models/app_school/student/StudentHealthDBAccess.php';
require_once 'models/HealthSettingDBAccess.php';

require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$OBJECT_FORM = new CamemisForm("STUDENT");
$OBJECT_FORM->setLoadUrl('/student/jsonload/');
$OBJECT_FORM->setSaveUrl('/student/jsonsave/');

$OBJECT_GRID = new CamemisGrid("STUDENT", "STUDENT_GRID");
$OBJECT_GRID->setLoadUrl("/student/jsonload/");
$OBJECT_GRID->setSaveUrl("/student/jsonsave/");
$entries = HealthSettingDBAccess:: sqlHealthSetting(false, false);
foreach($entries as $values){
    $comboItem[]="['".$values->ID."', '".$values->NAME."']";           
}
$comboItem[] = "['GROWTH_CHART','Growth Chart']";
$comboItem[] = "['MEDICAL_VISIT','Medical Visit']";
$comboItem[] = "['BMI','BMI']";
$INFORMATION_HEALTH_STORE = "[".implode(',',$comboItem)."]";

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();

$columndata = Utiles::getGridColumnData("STUDENT_STUDENT_GRID_ID");

?>
<script>
    Ext.onReady(function() {

    function cssStatus(v, p, record){
        return String.format('<div style=\"font-weight:bold;padding:4px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
        );
    }

    function cssText(value, metadata, record){
        return '<div style="font-weight:normal; color:#333; padding: 5px;">' + value + '</div>';
    }
    
    function getFieldArray() {
        var fieldArray = new Array();
        <?
        foreach($entries as $values){
            $facette = HealthSettingDBAccess::sqlHealthSetting($values->ID, false); 
            $str=array();
            foreach($facette as $item){ 
                $str[] = "'FIELDSET_".$item->ID."'";
            }
        ?>
        fieldArray[<?=$values->ID;?>] = [<?=implode(',',$str);?>]; 
        <?
        } 
        ?>  
        fieldArray['GROWTH_CHART'] = ['FIELDSET_GROWTH_CHART']; 
        fieldArray['MEDICAL_VISIT'] = ['FIELDSET_MEDICAL_VISIT'];
        fieldArray['BMI'] = ['FIELDSET_BMI'];
        return fieldArray; 
    }
    
    function hideFieldSet(allFielSets) {
        
        <?
        foreach($entries as $values){
        ?>
        for (var i=0; i<allFielSets[<?=$values->ID;?>].length; i++){
                Ext.getCmp(allFielSets[<?=$values->ID;?>][i]).hide();
            }  
        <?    
        }
        
        ?> 
        Ext.getCmp('PERSONAL_INFORMATION_ID').hide();
        Ext.getCmp('START_AND_END_DATE').hide(); 
        Ext.getCmp('FIELDSET_MEDICAL_VISIT').hide(); 
        Ext.getCmp('FIELDSET_GROWTH_CHART').hide();
        Ext.getCmp('FIELDSET_BMI').hide();
    }
    var myarray = getFieldArray();
    
    <?
    $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
    $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();
    
    $OBJECT_FORM->addObjectItems("
        xtype:'fieldset'
        ,id:'INFORMATION_ID'
        ,checkboxToggle:true
        ,collapsed: false
        ,title: '".HEALTH_INFORMATION."'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;font-weight: bold; padding:10px'
        ,width: 320
        ,items:[
            {".CamemisField::Combo("HEALTH_INFORMATION", HEALTH, $INFORMATION_HEALTH_STORE, false, false, 150, false, false)."}
        ]
    "); 
   
    $OBJECT_FORM->addObjectItems("
        xtype:'fieldset'
        ,id: 'PERSONAL_INFORMATION_ID'
        ,checkboxToggle:true
        ,collapsed: false
        ,title: '".PERSONAL_INFORMATION."'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;font-weight: bold; padding:10px'
        ,width: 320
        ,autoHeight:true
        ,items:[
            {".CamemisField::Textfield("STUDENT_SCHOOL_ID", "STUDENT_SCHOOL_ID", STUDENT_SCHOOL_ID, false, false, false, 150)."}
            ,{".CamemisField::Textfield("CODE_ID", "CODE", CODE_ID, false, false, false, 150)."}
            ,{".CamemisField::Textfield("LASTNAME_ID", "LASTNAME", LASTNAME, false, false, false, 150)."}
            ,{".CamemisField::Textfield("FIRSTNAME_ID", "FIRSTNAME", FIRSTNAME, false, false, false, 150)."}
            ,{".CamemisField::ComboGender(GENDER, false, false, 150)."}
        ]
    ");
    
    $OBJECT_FORM->addObjectItems("
        xtype:'fieldset'
        ,id: 'START_AND_END_DATE'
        ,checkboxToggle:true
        ,title: 'Examination Date'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;font-weight: bold; padding:10px'
        ,width: 320
        ,items:[{
            name: 'START_DATE'
            ,hidden: false
            ,width: 150
            ,fieldLabel: '" . START_DATE . "'
            ,xtype: 'datefield'
            ,id: 'START_DATE'
            ,vtype: 'daterange'
            ,endDateField: 'END_DATE'
            ,format: '" . setExtDatafieldFormat() . "'
            ,allowBlank: true
        },{
            name: 'END_DATE'
            ,hidden: false
            ,width: 150
            ,fieldLabel: '" . END_DATE . "'
            ,xtype: 'datefield'
            ,id: 'END_DATE'
            ,vtype: 'daterange'
            ,format: '" . setExtDatafieldFormat() . "'
            ,startDateField: 'START_DATE'
            ,allowBlank: true
        }]
    "); 
    
    $OBJECT_FORM->addObjectItems("
        xtype:'fieldset'
        ,id:'FIELDSET_GROWTH_CHART'
        ,checkboxToggle:true
        ,collapsed: false
        ,title: 'Growth Chart'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;font-weight: bold; padding:10px'
        ,width: 320
        ,items:[
            {".CamemisField::Textfield("WEIGHT_ID", "WEIGHT", WEIGHT, false, false, false, 150)."}
            ,{".CamemisField::Textfield("HEIGHT_ID", "HEIGHT", 'Height', false, false, false, 150)."}
            ,{".CamemisField::Textfield("PULSE_ID", "PULSE", 'Pulse', false, false, false, 150)."}
            ,{".CamemisField::Textfield("BLOOD_PRESSURE_ID", "BLOOD_PRESSURE", 'Blood Pressure', false, false, false, 150)."}
        ]
    ");
    
    $OBJECT_FORM->addObjectItems("
        xtype:'fieldset'
        ,id:'FIELDSET_MEDICAL_VISIT'
        ,checkboxToggle:true
        ,collapsed: false
        ,title: 'Medical Visit'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;font-weight: bold; padding:10px'
        ,width: 320
        ,items:[
            {".CamemisField::Textfield("DOCTOR_NAME_ID", "DOCTOR_NAME", 'Doctor Name', false, false, false, 150)."}
            ,{".CamemisField::Datefield("NEXT_VISIT","Next Visit",false,false,150)."}
        ]
    "); 
    $store = "[[0, '[---]'],[1, 'Underweight'],[2, 'Normal weight'],[3, 'Overweight'],[4, 'Obesity']]";
    $OBJECT_FORM->addObjectItems("
        xtype:'fieldset'
        ,id:'FIELDSET_BMI'
        ,checkboxToggle:true
        ,collapsed: false
        ,title: 'BMI'
        ,bodyStyle: 'background:".CamemisPage::userFormBgColor()."; color:#000;font-weight: bold; padding:10px'
        ,width: 320
        ,items:[
            {".CamemisField::Textfield("WEIGHT_BMI_ID", "WEIGHT_BMI", WEIGHT, false, false, false, 150)."}
            ,{".CamemisField::Textfield("HEIGHT_BMI_ID", "HEIGHT_BMI", 'Height', false, false, false, 150)."}
            ,{".CamemisField::Combo('BMI_STATUS', STATUS, $store, false, false, 150, $hidden = false, $allowBlank = false)."}    
        ]
    "); 
    
    foreach($entries as $values){
        $formItem = HealthSettingDBAccess::renderHealthField($values->ID,320,true,true);

        foreach($formItem as $fieldSet){
            $OBJECT_FORM->addObjectItems($fieldSet);    
        }
    }     

    $OBJECT_FORM->addTBarItems("
        text: '".RESET."'
        ,iconCls:'icon-arrow_undo'
        ,handler: function(){
            ".CamemisPage::setRequestURI(false)."
        }
    ");
    $OBJECT_FORM->addTBarItems("
        text: '".FIND."'
        ,id: 'FIND_ID'
        ,formBind:true
        ,iconCls:'icon-magnifier'
        ,scope:this
        ,handler: function(){
            Ext.getCmp('content').getLayout().setActiveItem(0);
            Ext.getCmp('TABPANEL_ID').getLayout().setActiveItem(1);
            form = this.getForm();
            health_type = this.getForm().findField('HEALTH_INFORMATION').getValue();
            if(health_type){
                switch(health_type){
                    case 'GROWTH_CHART':
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(6, false);   
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(7, false); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(8, false); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(9, false);
                    
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(10, true);   
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(11, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(12, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(13, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(14, true);
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(15, true);
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(17, true);
                        break;
                    case 'MEDICAL_VISIT':
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(6, true);   
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(7, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(8, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(9, true);
                    
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(10, false);   
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(11, false); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(12, false); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(13, false); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(14, true);
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(15, true);
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(17, true);
                        break;
                    case 'BMI':
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(6, false);   
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(7, false); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(8, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(9, true);
                    
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(10, true);   
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(11, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(12, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(13, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(14, false);
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(15, false);
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(17, true);
                        break;
                    default:
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(6, true);   
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(7, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(8, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(9, true);
                    
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(10, true);   
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(11, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(12, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(13, true); 
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(14, true);
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(15, true);
                            Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getColumnModel().setHidden(17, false);
                        break;
                }
                 
                var loadMask = new Ext.LoadMask(Ext.getBody(), {msg:'<b>CAMEMIS " . LOADING . "</b>', msgCls:'x-mask-loading-camemis'});
                loadMask.show(); 
                Ext.Ajax.request({
                    url: '/student/jsonload/'
                    ,method: 'POST'
                    ,params:{start:0,limit:100,cmd: 'searchStudentHealth',health_type: health_type}
                    ,form: ".$OBJECT_FORM->ExtgetCmp().".getForm().getEl().dom
                    ,success: function(response, options) {
                        jsonData = Ext.util.JSON.decode(response.responseText);
                        Ext.getCmp('".$OBJECT_GRID->getObjectId()."').getStore().loadData(jsonData);
                        loadMask.hide();
                    }
                });
               
            }else{
                Ext.Msg.show({
                    title:'".STATUS."'
                    ,width: '250'
                    ,icon: Ext.MessageBox.QUESTION
                    ,msg: 'Please Select Health Type for Search...'
                    ,buttons: Ext.Msg.OK
                });
            }
        }
    ");

    $OBJECT_FORM->setBodyStyle("padding:10px;background:#D1DDEF;");
    $OBJECT_FORM->labelAlign = "left";
    $OBJECT_FORM->isObjectDefaultOnLoad = false;
    $OBJECT_FORM->isKeys = false;
    $OBJECT_FORM->renderJS();

    ////////////////////////////////////////////////////////////////////////////
    $OBJECT_GRID->addReadField("name: 'ID'");
    $OBJECT_GRID->addReadField("name: 'CODE'");
    $OBJECT_GRID->addReadField("name: 'STUDENT_SCHOOL_ID'");
    $OBJECT_GRID->addReadField("name: 'STUDENT'");
    $OBJECT_GRID->addReadField("name: 'STUDENT_ID'");
    $OBJECT_GRID->addReadField("name: 'FIRSTNAME'");
    $OBJECT_GRID->addReadField("name: 'LASTNAME'");    
    $OBJECT_GRID->addReadField("name: 'FULL_NAME'");
    $OBJECT_GRID->addReadField("name: 'GENDER'");
    $OBJECT_GRID->addReadField("name: 'DATE_BIRTH'");
    $OBJECT_GRID->addReadField("name: 'TRAINING_NAME'");
    $OBJECT_GRID->addReadField("name: 'STUDENT_SCHOOL_ID'");
    $OBJECT_GRID->addReadField("name: 'FIRSTNAME_LATIN'");
    $OBJECT_GRID->addReadField("name: 'LASTNAME_LATIN'");
    $OBJECT_GRID->addReadField("name: 'FULLNAME_MOTHER'");
    $OBJECT_GRID->addReadField("name: 'FULLNAME_FATHER'");
    $OBJECT_GRID->addReadField("name: 'CREATED_DATE'");
    $OBJECT_GRID->addReadField("name: 'BG_COLOR'");
    $OBJECT_GRID->addReadField("name: 'BG_COLOR_FONT'");
    $OBJECT_GRID->addReadField("name: 'STATUS_KEY'");   
    $OBJECT_GRID->addReadField("name: 'MEDICAL_SETTING_ID'"); 
    //growth chart
    $OBJECT_GRID->addReadField("name: 'WEIGHT'"); 
    $OBJECT_GRID->addReadField("name: 'HEIGHT'"); 
    $OBJECT_GRID->addReadField("name: 'PULSE'");
    $OBJECT_GRID->addReadField("name: 'BLOOD_PRESSURE'"); 
    //Medical visit
    $OBJECT_GRID->addReadField("name: 'DOCTOR_NAME'"); 
    $OBJECT_GRID->addReadField("name: 'REASON'"); 
    $OBJECT_GRID->addReadField("name: 'DOCTOR_COMMENT'");
    $OBJECT_GRID->addReadField("name: 'NEXT_VISIT'");
    //BMI
    $OBJECT_GRID->addReadField("name: 'STATUS'");
    $OBJECT_GRID->addReadField("name: 'BMI'"); 
    
    $OBJECT_GRID->addReadField("name: 'MEDICAL_DATE'");
    $OBJECT_GRID->addReadField("name: 'DESCRIPTION'"); 
    
    switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
        case "VIETNAMESE": $width = 125;break;
        default: $width = 85;break;
    }

    $OBJECT_GRID->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.",hidden:".checkColHidden(1, $columndata).", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
    $OBJECT_GRID->addColumn("header: '<b>".CODE_ID."</b>', align:'center', width: 80,hidden:".checkColHidden(2, $columndata).", renderer: cssText, sortable: true, dataIndex: 'CODE'");
    $OBJECT_GRID->addColumn("header: '<b>".STUDENT_SCHOOL_ID."</b>', align:'center', width: 120,hidden:".checkColHidden(3, $columndata).", renderer: cssText, sortable: true, dataIndex: 'STUDENT_SCHOOL_ID'");
    $OBJECT_GRID->addColumn("header: '<b>".NAME."</b>', width: 200,hidden:".checkColHidden(4, $columndata).", renderer: cssText, sortable: true, dataIndex: 'FULL_NAME'");
    $OBJECT_GRID->addColumn("header: '<b>".GENDER."</b>', align:'center',  width: 100,hidden:".checkColHidden(5, $columndata).", renderer: cssText, sortable: true, dataIndex: 'GENDER'");
    //growth chart
    $OBJECT_GRID->addColumn("header: '<b>Weight</b>', align:'center', width: 120,hidden:".checkColHidden(6, $columndata).", renderer: cssText, sortable: true, dataIndex: 'WEIGHT'");
    $OBJECT_GRID->addColumn("header: '<b>Height</b>', align:'center', width: 120,hidden:".checkColHidden(7, $columndata).", renderer: cssText, sortable: true, dataIndex: 'HEIGHT'");
    $OBJECT_GRID->addColumn("header: '<b>Pulse</b>', align:'center', width: 120,hidden:".checkColHidden(8, $columndata).", renderer: cssText, sortable: true, dataIndex: 'PULSE'");
    $OBJECT_GRID->addColumn("header: '<b>Blood Pressure</b>', align:'center', width: 120,hidden:".checkColHidden(9, $columndata).", renderer: cssText, sortable: true, dataIndex: 'BLOOD_PRESSURE'");
    //Medical visit
    $OBJECT_GRID->addColumn("header: '<b>Doctor Name</b>', align:'center', width: 120,hidden:".checkColHidden(10, $columndata).", renderer: cssText, sortable: true, dataIndex: 'DOCTOR_NAME'");
    $OBJECT_GRID->addColumn("header: '<b>Reason</b>', align:'center', width: 120,hidden:".checkColHidden(11, $columndata).", renderer: cssText, sortable: true, dataIndex: 'REASON'");
    $OBJECT_GRID->addColumn("header: '<b>Doctor Comment</b>', align:'center', width: 200,hidden:".checkColHidden(12, $columndata).", renderer: cssText, sortable: true, dataIndex: 'DOCTOR_COMMENT'");
    $OBJECT_GRID->addColumn("header: '<b>Next Visit</b>', align:'center', width: 120,hidden:".checkColHidden(13, $columndata).", renderer: cssText, sortable: true, dataIndex: 'NEXT_VISIT'");
    //BMI
    $OBJECT_GRID->addColumn("header: '<b>BMI</b>', align:'center', width: 120,hidden:".checkColHidden(14, $columndata).", renderer: cssText, sortable: true, dataIndex: 'BMI'");
    $OBJECT_GRID->addColumn("header: '<b>Status</b>', align:'center', width: 120,hidden:".checkColHidden(15, $columndata).", renderer: cssText, sortable: true, dataIndex: 'STATUS'");
    
    $OBJECT_GRID->addColumn("header: '<b>Medical Date</b>', align:'center', width: 120,hidden:".checkColHidden(16, $columndata).", renderer: cssText, sortable: true, dataIndex: 'MEDICAL_DATE'");
    $OBJECT_GRID->addColumn("header: '<b>Description</b>', align:'center', width: 250,hidden:".checkColHidden(17, $columndata).", renderer: cssText, sortable: true, dataIndex: 'DESCRIPTION'");
    
    $OBJECT_GRID->baseParams = "
        start:0
        ,limit:100
        ,cmd: 'searchStudentHealth'
    ";

    $OBJECT_GRID->loadMask = true;
    $OBJECT_GRID->isPagingToolbar = true;
    $OBJECT_GRID->isQuickySearch = true;
    $OBJECT_GRID->isGroupingView = true;
    $OBJECT_GRID->groupField = "FULL_NAME";
    $OBJECT_GRID->isObjectDefaultOnLoad = false;
    $OBJECT_GRID->forceFit = "false";
    $OBJECT_GRID->renderJS();
    $js = "";
        $js .= "viewport = new Ext.Viewport({";
            $js .= "layout: 'fit'";
            $js .= ",border: false";
            $js .= ",items:[{";
                $js .= "layout:'border'";
                $js .= ",border: false";
                $js .= ",defaults: {";
                    $js .= "collapsible: true";
                    $js .= ",split: true";
                $js .= "}";
                $js .= ",items: [{";
                    $js .= "title: ''";
                    $js .= ",id:'WEST_ID'";
                    $js .= ",region:'west'";
                    $js .= ",margins: '3 0 3 3'";
                    $js .= ",cmargins: '3 3 3 3'";
                    $js .= ",width: 360";
                    $js .= ",minSize: 360";
                    $js .= ",maxSize: 360";
                    $js .= ",layout: 'fit'";
                    $js .= ",items: [{xtype: '".$OBJECT_FORM->getObjectXType()."'}]";
                $js .= "},{";
                    $js .= "title: ''";
                    $js .= ",collapsible: false";
                    $js .= ",id: 'content'";
                    $js .= ",region:'center'";
                    $js .= ",layout: 'card'";
                    $js .= ",activeItem: 0";
                    $js .= ",margins: '3 3 3 0'";
                    $js .= ",items:[{";
                        $js .= "layout:'fit'";
                        $js .= ",bodyStyle: 'background:".CamemisPage::userBgColor().";padding:3px'";
                        $js .= ",border: false";
                        $js .= ",items:[{";
                            $js .= "xtype: 'tabpanel'";
                            $js .= ",id:'TABPANEL_ID'";
                            $js .= ",tabPosition: 'top'";
                            $js .= ",plain:true";
                            $js .= ",activeTab: 0";
                            $js .= ",enableTabScroll:true";
                            $js .= ",items:[{";
                                $js .= "title:'".CHART."'";
                                $js .= ",id:'TAB_CHART'";
                                $js .= ",layout: 'card'";
                                $js .= ",activeItem: 0";
                                $js .= ",items: [new Ext.ux.IFrameComponent({ id: 'STUDENT_HEALTH', url:'/health/chartreport/'})]";
                            $js .= "},{";
                               $js .= "title:'".SEARCH_RESULT."'";
                               $js .= ",id:'SEARCH_RESULT'";
                               $js .= ",layout:'fit'";
                               $js .= ",items: [{xtype:'".$OBJECT_GRID->getObjectXType()."'}]";
                            $js .= "}]";
                        $js .= "}]";
                    $js .= "}]";
                $js .= "}]";
            $js .= "}]";
        $js .= "});";
        $js .= "hideFieldSet(myarray);";
        //////action combo
        
        $js .= "Ext.getCmp('HEALTH_INFORMATION_ID').on('select', function() {";
            $js .= "Ext.getCmp('".$OBJECT_GRID->getObjectId()."').store.removeAll();";
            $js .= "var myCombo = Ext.getCmp('HEALTH_INFORMATION_ID').getValue();";
            $js .= "hideFieldSet(myarray);";
            $js .= "Ext.getCmp('TABPANEL_ID').getLayout().setActiveItem(1);";
            $js .= "Ext.getCmp('content').getLayout().setActiveItem(0);";
            $js .= "Ext.getCmp('PERSONAL_INFORMATION_ID').show();";
            $js .= "Ext.getCmp('START_AND_END_DATE').show();";
            $js .= "for(var i=0;i<myarray[myCombo].length;i++){";
            $js .= "Ext.getCmp(myarray[myCombo][i]).show();";
            $js .= "}";
        $js .= "});";
        print $js;
        
        $gridActionjs ="var myGrid = Ext.getCmp('".$OBJECT_GRID->getObjectId()."');"; 
            $gridActionjs .="if (myGrid) myGrid.on('cellclick', function(grid, rowIndex, columnIndex, event) {";
                $gridActionjs .="var record = myGrid.store.getAt(rowIndex);";
                $gridActionjs .="var contextMenu = new Ext.menu.Menu({";
                    $gridActionjs .="items: [{";
                        $gridActionjs .="text: '".SHOW_DETAIL."'";
                        $gridActionjs .=",iconCls: 'icon-application_form_magnify'";
                        $gridActionjs .=",handler: function(){";
                        $gridActionjs .="clickOpenPage('content','','/student/studenthealth/?objectId='+record.data.STUDENT_ID+'&settingId='+record.data.MEDICAL_SETTING_ID+'&setId=' + record.data.ID);";
                        $gridActionjs .="}";
                    $gridActionjs .="}]";
                $gridActionjs .="});";
                $gridActionjs .="event.stopEvent();";
                $gridActionjs .="contextMenu.showAt(event.xy);";  
            $gridActionjs .="});";
            
        print $gridActionjs;
        
    ?>
    Ext.state.Manager.setProvider(new Ext.state.HttpProvider({url: '/dataset/jsonsave/'}));
});
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>
