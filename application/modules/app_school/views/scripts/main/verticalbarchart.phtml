
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html  xmlns="http://www.w3.org/1999/xhtml"
       xml:lang="en-US"
       lang="en-US">
  <head profile="http://www.w3.org/2005/10/profile">
    <title></title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="Description" content="This page tries to mix charts with html formatting and layout constructs." />
    <meta http-equiv="pragma" content="no-cache" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="-l" />

    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.js?2.4.5"></script>
    
    <script type="text/javascript">
    
    // This example draws vertical bar charts...
    // Created by Frank Guerino : "http://www.guerino.net"

    // Data Used for this example...
    var dataSet1 = [
    {xCoordinate: "Mathematik", magnitude: 54, link: "#"},
    {xCoordinate: "Physik", magnitude: 21, link: "#"},
    {xCoordinate: "Deutsch", magnitude: 31, link: ""},
    {xCoordinate: "Englisch", magnitude: 14, link: "#"},
    {xCoordinate: "<?=STUDENT?>", magnitude: 19, link: "#"},
    {xCoordinate: "Sport", magnitude: 47, link: "#"},
    {xCoordinate: "Musik", magnitude: 27, link: "#"}];

    var dataSet2 = [
    {xCoordinate: "Legend String 8", magnitude: 31, link: "#"},
    {xCoordinate: "Legend String 9", magnitude: 54, link: "#"},
    {xCoordinate: "Legend String 10", magnitude: 21, link: "#"},
    {xCoordinate: "Legend String 11", magnitude: 31, link: "#"},
    {xCoordinate: "Legend String 12", magnitude: 54, link: "#"},
    {xCoordinate: "Legend String 13", magnitude: 14, link: "#"},
    {xCoordinate: "Legend String 10", magnitude: 21, link: "#"},
    {xCoordinate: "Legend String 11", magnitude: 31, link: "#"},
    {xCoordinate: "Legend String 12", magnitude: 54, link: "#"},
    {xCoordinate: "Legend String 13", magnitude: 14, link: "#"},
    {xCoordinate: "Legend String 10", magnitude: 21, link: "#"},
    {xCoordinate: "Legend String 11", magnitude: 31, link: "#"},
    {xCoordinate: "Legend String 12", magnitude: 54, link: "#"},
    {xCoordinate: "Legend String 13", magnitude: 14, link: "#"},
    {xCoordinate: "Legend String 14", magnitude: 14, link: "#"},
    {xCoordinate: "Legend String 15", magnitude: 27, link: "#"}];

    var dataSet3 = [
    {xCoordinate: "Legend String 16", magnitude: 21, link: "#"},
    {xCoordinate: "Legend String 17", magnitude: 41, link: "#"},
    {xCoordinate: "Legend String 18", magnitude: 34, link: "#"},
    {xCoordinate: "Legend String 19", magnitude: 9, link: "#"},
    {xCoordinate: "Legend String 20", magnitude: 47, link: "#"},
    {xCoordinate: "Legend String 29", magnitude: 27, link: "#"}];

    function drawVerticalBarChart(chartID, dataSet, selectString, colors) {

        // chartID => A unique drawing identifier that has no spaces, no "." and no "#" characters.
        // dataSet => Input Data for the chart, itself.
        // selectString => String that allows you to pass in
        //           a D3 select string.
        // colors => String to set color scale.  Values can be...
        //           => "colorScale10"
        //           => "colorScale20"
        //           => "colorScale20b"
        //           => "colorScale20c"

        var canvasWidth = 700;
        var barsWidthTotal = 420
        var barWidth = barsWidthTotal / dataSet.length;
        //var canvasHeight = 200;
        var canvasHeight = dataSet.length * 20 + 40;
        var legendOffset = 30;
        var legendBulletOffset = 30;
        var legendTextOffset = 20;

        var x = d3.scale.linear().domain([0, dataSet.length]).range([0, barsWidthTotal]);
        var y = d3.scale.linear().domain([0, d3.max(dataSet, function(d) { return d.magnitude; })]).rangeRound([0, canvasHeight]);
      
        //document.writeln(selectString);

        // Color Scale Handling...
        var colorScale = d3.scale.category20c();
        switch (colors)
        {
            case "colorScale10":
                colorScale = d3.scale.category10();
            break;
            case "colorScale20":
                colorScale = d3.scale.category20();
            break;
            case "colorScale20b":
                colorScale = d3.scale.category20b();
            break;
            case "colorScale20c":
                colorScale = d3.scale.category20c();
            break;
            default:
                colorScale = d3.scale.category20c();
        };

        var synchronizedMouseOver = function() {
            var bar = d3.select(this);
            var indexValue = bar.attr("index_value");

            var barSelector = "." + "bars-" + chartID + "-bar-" + indexValue;
            var selectedBar = d3.selectAll(barSelector);
            selectedBar.style("fill", "Maroon");

            var bulletSelector = "." + "bars-" + chartID + "-legendBullet-" + indexValue;
            var selectedLegendBullet = d3.selectAll(bulletSelector);
            selectedLegendBullet.style("fill", "Maroon");

            var textSelector = "." + "bars-" + chartID + "-legendText-" + indexValue;
            var selectedLegendText = d3.selectAll(textSelector);
            selectedLegendText.style("fill", "Maroon");
        };

        var synchronizedMouseOut = function() {
            var bar = d3.select(this);
            var indexValue = bar.attr("index_value");

            var barSelector = "." + "bars-" + chartID + "-bar-" + indexValue;
            var selectedBar = d3.selectAll(barSelector);
            var colorValue = selectedBar.attr("color_value");
            selectedBar.style("fill", colorValue);

            var bulletSelector = "." + "bars-" + chartID + "-legendBullet-" + indexValue;
            var selectedLegendBullet = d3.selectAll(bulletSelector);
            var colorValue = selectedLegendBullet.attr("color_value");
            selectedLegendBullet.style("fill", colorValue);

            var textSelector = "." + "bars-" + chartID + "-legendText-" + indexValue;
            var selectedLegendText = d3.selectAll(textSelector);
            selectedLegendText.style("fill", "Blue");
        };

        // Create the svg drawing canvas...
        var canvas = d3.select(selectString)
        .append("svg:svg")
        //.style("background-color", "yellow")
        .attr("width", canvasWidth)
        .attr("height", canvasHeight);

        // Draw individual hyper text enabled bars...
        canvas.selectAll("rect")
        .data(dataSet)
        .enter().append("svg:a")
        .attr("xlink:href", function(d) { return d.link; })
        .append("svg:rect")
        .attr("x", function(d, i) { return x(i); })
        // NOTE: The following "+15" adds an offset that ensures some space
        // between the top of the canvas and the top of the highest bar, so
        // that text can be added in that space, later.
        .on('mouseover', synchronizedMouseOver)
        .on("mouseout", synchronizedMouseOut)
        .attr("y", function(d) { return canvasHeight - y(d.magnitude) + 15; })
        .attr("height", function(d) { return y(d.magnitude); })
        .attr("width", barWidth)
        .style("fill", "White" )
        .style("stroke", "White" )
        .transition()
        .duration(150)
        .delay(function(d, i) { return i * 100; })
        .style("fill", function(d, i) { colorVal = colorScale(i); return colorVal; } )
        .attr("index_value", function(d, i) { return "index-" + i; })
        .attr("class", function(d, i) { return "bars-" + chartID + "-bar-index-" + i; })
        .attr("color_value", function(d, i) { return colorScale(i); }) // Bar fill color...
        .style("stroke", "white"); // Bar border color...
        
        // Create text values that go at top of each bar...
        canvas.selectAll("text")
        .data(dataSet) // Instruct to bind dataSet to text elements
        .enter().append("svg:text") // Append text elements
        // Identify root coordinate (x,y)
        //.attr("x", function(d, i) { return x(i) + barWidth; }) // <-- Can't use because of bug in FireFox
        .attr("x", function(d, i) { return x(i) + barWidth / 2; }) // <-- Using because of bug in Firefox
        // Note: the following "+1" offset places value above bar in
        // Space between the top of the bar and the top of the canvas.
        .attr("y", function(d) {
        return canvasHeight - y(d.magnitude ); })
        //.attr("dx", -barWidth/2) // <-------------- Can't use because of bug in FireFox
        .attr("dy", "1em") // Controls padding to place text above bars
        .attr("text-anchor", "middle")
        .text(function(d) { return d.magnitude;})
        .attr("fill", "Black");

        // Plot the bullet circles...
        canvas.selectAll("circle")
        .data(dataSet).enter().append("svg:circle") // Append circle elements
        .attr("cx", barsWidthTotal + legendBulletOffset)
        .attr("cy", function(d, i) { return legendOffset + i*20; } )
        .attr("stroke-width", ".5")
        .style("fill", function(d, i) { return colorScale(i); }) // Bar fill color
        .attr("index_value", function(d, i) { return "index-" + i; })
        .attr("class", function(d, i) { return "bars-" + chartID + "-legendBullet-index-" + i; })
        .attr("r", 5)
        .attr("color_value", function(d, i) { return colorScale(i); }) // Bar fill color...
        .on('mouseover', synchronizedMouseOver)
        .on("mouseout", synchronizedMouseOut);

        // Create hyper linked text at right that acts as label key...
        canvas.selectAll("a.legend_link")
        .data(dataSet) // Instruct to bind dataSet to text elements
        .enter().append("svg:a") // Append legend elements
        .attr("xlink:href", function(d) { return d.link; })
        .append("text")
        .attr("text-anchor", "left")
        .attr("x", barsWidthTotal + legendBulletOffset + legendTextOffset)
        .attr("y", function(d, i) { return legendOffset + i*20 - 10; })
        .attr("dx", 0)
        .attr("dy", "1em") // Controls padding to place text above bars
        .text(function(d) { return d.xCoordinate;})
        .style("fill", "Blue")
        .attr("index_value", function(d, i) { return "index-" + i; })
        .attr("class", function(d, i) { return "bars-" + chartID + "-legendText-index-" + i; })
        .on('mouseover', synchronizedMouseOver)
        .on("mouseout", synchronizedMouseOut);

    };
    
    </script>
    
    <!--[if gt IE 7]>
      <style>body { overflow-y:scroll; } </style>
    <![endif]-->

  </head>

    <style type="text/css">
      div.displayCSS {
	position: relative;
	border:1px solid #333;
	border-radius:7px;
	background: #FFF;
	font:normal 11px verdana,tahoma,arial,sans-serif;
        color:#555;
	padding: 15px;
	text-align:left;
      }
    </style>
    <body>

        <div class="displayCSS" id="bar_chart_1">
            <div class="chart"></div>
        </div>
        <div class="displayCSS" id="bar_chart_2">
            <div class="chart"></div>
        </div>

        <div class="displayCSS" id="bar_chart_3">
            <div class="chart"></div>
        </div>

        <script type="text/javascript">
        drawVerticalBarChart("Bars1", dataSet1, "#bar_chart_1 .chart", "colorScale20b");
        drawVerticalBarChart("Bars2", dataSet2, "#bar_chart_2 .chart", "colorScale10");
        drawVerticalBarChart("Bars3", dataSet3, "#bar_chart_3 .chart", "colorScale20c");
        </script>

    </body>
</html>