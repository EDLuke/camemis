<?
///////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 18.07.2009
// Am Stollheen 18, 55120 Mainz, Germany
///////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisSchoolTree.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisTree.php';
require_once 'include/Common.inc.php';
require_once 'utiles/Utiles.php';
require_once 'models/app_school/subject/GradeSubjectDBAccess.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$OBJECT_FORM = new CamemisForm("SCHEDULE");
$OBJECT_FORM->setLoadUrl('/schedule/jsonload/');
$OBJECT_FORM->setSaveUrl('/schedule/jsonsave/');

$AVAILABLE_TEACHER_GRID = new CamemisGrid("SCHEDULE", "TEACHER");
$AVAILABLE_TEACHER_GRID->setLoadUrl("/schedule/jsonload/");
$AVAILABLE_TEACHER_GRID->setSaveUrl("/schedule/jsonsave/");

$AVAILABLE_ROOM_GRID = new CamemisGrid("SCHEDULE", "LIST");
$AVAILABLE_ROOM_GRID->setLoadUrl("/schedule/jsonload/");

$TEACHING_SESSION_GRID = new CamemisGrid("SCHEDULE", "ASSIGNED_TEACHER");
$TEACHING_SESSION_GRID->setLoadUrl("/schedule/jsonload/");
$TEACHING_SESSION_GRID->setSaveUrl("/schedule/jsonsave/");

$ASSIGNED_ROOM_GRID = new CamemisGrid("SCHEDULE", "ASSIGNED_ROOM");
$ASSIGNED_ROOM_GRID->setLoadUrl("/schedule/jsonload/");
$ASSIGNED_ROOM_GRID->setSaveUrl("/schedule/jsonsave/");

////////////////////////////////////////////////////////////////////////////////
$SHARED_TREE = new CamemisTree("CLASS_GROUP", "LIST");
$SHARED_TREE->setURL("/schedule/jsontree/");
$SHARED_TREE->setSaveUrl("/schedule/jsonsave/");
////////////////////////////////////////////////////////////////////////////////
$setParams = "";
$setParams .= "&scheduleId=".$this->scheduleId."";
$setParams .= "&academicId=".$this->academicId."";
$setParams .= "&target=".$this->target."";
$setParams .= "&trainingId=".$this->trainingId."";
$setParams .= "&term=".$this->term."";
$setParams .= "&shortday=".$this->shortday."";
print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();

$objectId = isset($_GET["scheduleId"]) ? addText($_GET["scheduleId"]):"";
$isCancel = isset($_GET["isCancel"]) ? addText($_GET["isCancel"]):"";
$status = $this->facette?$this->facette->STATUS:1;

if($objectId !="new"){
    if(!$this->facette) {header("Location: /main/permission/");exit;}
}

if($this->academicId){
    if(!$this->academicObject && !$this->facette) {header("Location: /main/permission/");exit;}
    
    if($this->academicObject->EDUCATION_SYSTEM){
        $CREDIT_GROUP_GRID = new CamemisGrid("GROUP", "LIST");
        $CREDIT_GROUP_GRID->setLoadUrl("/schedule/jsonload/");
        $CREDIT_GROUP_GRID->setSaveUrl("/schedule/jsonsave/");
    }
    
    $entries = GradeSubjectDBAccess::sqlAllSubjectsByClass($this->academicId);
    
    $data = array();
    if($entries){
        $i = 0;
        foreach($entries as $value){
            $data[$i] = "[" . $value->SUBJECT_ID . ", '" . $value->NAME . "']";
            $i++;
        }
    }
    $traditionalSubjectStore = "[".implode(",",$data)."]";
}

if ($this->facette){
    $HIDDEN_TEACHER = "false";
    $HIDDEN_ROOM = "false";
    $READONLY_EVENT_TYPE = true;
    $READONLY_END_TIME = "true";
}else{
    $HIDDEN_TEACHER = "true";
    $HIDDEN_ROOM = "true";
    $READONLY_EVENT_TYPE = false;
    $READONLY_END_TIME = "false";
}

if($this->academicId){
    $TITLE_EVENT = " (".displaySchoolTerm($this->term).")";
    Zend_Registry::set('GRADE_ID', $this->gradeId);
    Zend_Registry::set('SCHOOLYEAR_ID', $this->schoolyearId);  
}

if($this->trainingId){
    $TITLE_EVENT = "";
    Zend_Registry::set('TRAINING_ID', $this->trainingId);
}

switch($this->shortday){
    case "MO":
        $TITLE_EVENT = MONDAY.$TITLE_EVENT;
        break;
    case "TU":
        $TITLE_EVENT = TUESDAY.$TITLE_EVENT;
        break;
    case "WE":
        $TITLE_EVENT = WEDNESDAY.$TITLE_EVENT;
        break;
    case "TH":
        $TITLE_EVENT = THURSDAY.$TITLE_EVENT;
        break;
    case "FR":
        $TITLE_EVENT = FRIDAY.$TITLE_EVENT;
        break;
    case "SA":
        $TITLE_EVENT = SATURDAY.$TITLE_EVENT;
        break;
    case "SU":
        $TITLE_EVENT = SUNDAY.$TITLE_EVENT;
        break;
}

?>
<style>
    span.showText {
        font-weight:normal;
        color:#333;
        white-space:normal;
    }
</style>
<script>
Ext.onReady(function() {
    
    Ext.form.Field.prototype.msgTarget = 'side';
    Ext.apply(Ext.form.VTypes, {
        daterange : function(val, field) {
            var date = field.parseDate(val);
            if(!date){
                return false;
            }
            if (field.startDateField) {
                var start = Ext.getCmp(field.startDateField);
                if (!start.maxValue || (date.getTime() !== start.maxValue.getTime())) {
                    start.setMaxValue(date);
                    start.validate();
                }
            }
            else if (field.endDateField) {
                var end = Ext.getCmp(field.endDateField);
                if (!end.minValue || (date.getTime() !== end.minValue.getTime())) {
                    end.setMinValue(date);
                    end.validate();
                }
            }
            return true;
        }
    });

    function cssAvailaleRoom(value, metadata, record){
        switch(record.data.AVAILABLE){
            case 1:
                var bgColor = "#FFF";
                var Color = "#333";
                break;
            case 2:
                //Shared...
                var bgColor = "#2773f3";
                var Color = "#FFF";
                break;
            default:
                var bgColor = "#d94a38";
                var Color = "#FFF";
                break;
        }
        return '<div style="font-weight:normal; color:' + Color +'; padding: 5px;background:' + bgColor + ';">' + value + '</div>';
    }
    
    function cssText(value, metadata, record){
        return '<div style="font-weight:normal; color:#333; padding: 5px; height: 35px;">' + value + '</div>';
    }
    
    function cssTextRed(value, metadata, record){
        
        return '<div style="font-weight:bold; color:#CC0000; padding: 5px; height: 35px;">' + value + '</div>';
    }
    
    <?
    $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
    $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();
    
    ////////////////////////////////////////////////////////////////////////////
    if($this->facette){
        if($this->facette->SHARED_SCHEDULE){
            $SHARED_TREE->isAsyncTreeNode = false;
            $SHARED_TREE->addTBarItems(CamemisBar::tbarTreeRefresh(false));
            $SHARED_TREE->setBaseParams("
                cmd: 'jsonTreeSharedSchedule2Academic'
                ,scheduleId:'".$this->facette->ID."'
            ");
            $SHARED_TREE->backgroundColor = "#F9F9F9";
            $SHARED_TREE->renderJS();

            $SHARED_SCHEDULE_TREE_PANEL = "
            {
                title: '".SHARED_SCHEDULE_CLASS_GROUP."'
                ,collapsible: true
                ,collapsed: false
                ,style: 'padding-bottom: 5px'
                ,width: 550
                ,height:200
                ,layout:'fit'
                ,items: [{xtype: '".$SHARED_TREE->getObjectXType()."'}]
            }";
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    
    $AVAILABLE_TEACHER_GRID->addReadField("name: 'CODE'");
    $AVAILABLE_TEACHER_GRID->addReadField("name: 'FULL_NAME'");
    $AVAILABLE_TEACHER_GRID->addReadField("name: 'AVAILABLE_DAYS'");
    $AVAILABLE_TEACHER_GRID->addReadField("name: 'AVAILABLE'");
    $AVAILABLE_TEACHER_GRID->addReadField("name: 'AVAILABLE_STATUS'");

    $AVAILABLE_TEACHER_GRID->addColumn("header: '<b>".STATUS."</b>', align:'center', renderer: cssText, width: 80, sortable: false, dataIndex: 'AVAILABLE_STATUS'");
    $AVAILABLE_TEACHER_GRID->addColumn("header: '<b>".CODE."</b>', align:'left', renderer: cssText, width: 80, sortable: false, dataIndex: 'CODE'");
    $AVAILABLE_TEACHER_GRID->addColumn("header: '<b>".FULL_NAME."</b>', align:'left', renderer: cssText, width: 200, sortable: false, dataIndex: 'FULL_NAME'");
    $AVAILABLE_TEACHER_GRID->addColumn("header: '<b>".AVAILABLE."</b>', align:'left', renderer: cssTextRed, width: 120, sortable: false, dataIndex: 'AVAILABLE_DAYS'");
    
    if($this->facette){
        $AVAILABLE_TEACHER_GRID->baseParams = "
            start:0
            ,limit:100
            ,scheduleId: '".$this->scheduleId."'
            ,academicId: '".$this->academicId."'
            ,target: '".$this->target."'
            ,trainingId: '".$this->trainingId."'
            ,term: '".$this->term."'
            ,cmd: 'availableTeacher' 
        ";
    }
    
    $AVAILABLE_TEACHER_GRID->isQuickySearch = true;
    $AVAILABLE_TEACHER_GRID->renderJS();
    
    ////////////////////////////////////////////////////////////////////////////
    $TEACHING_SESSION_GRID->addReadField("name: 'SESSION_STATUS'");
    $TEACHING_SESSION_GRID->addReadField("name: 'SESSION_DATE'");
    $TEACHING_SESSION_GRID->addReadField("name: 'EVENT'");
    $TEACHING_SESSION_GRID->addReadField("name: 'ROOM'");
    $TEACHING_SESSION_GRID->addReadField("name: 'COLOR'");
    $TEACHING_SESSION_GRID->addReadField("name: 'COLOR_FONT'");
    $TEACHING_SESSION_GRID->addReadField("name: 'CLASS'");

    $TEACHING_SESSION_GRID->addColumn("header: '<b>".DATE."</b>', align:'left', renderer: cssText, width: 120, sortable: true, dataIndex: 'SESSION_DATE'");
    $TEACHING_SESSION_GRID->addColumn("header: '<b>".EVENT."</b>', align:'left', renderer: cssText, width: 200, sortable: true, dataIndex: 'EVENT'");
    $TEACHING_SESSION_GRID->addColumn("header: '<b>".GRADE_CLASS."</b>', align:'left', cssText: cssText, width:150, sortable: true, dataIndex: 'CLASS'");
    $TEACHING_SESSION_GRID->baseParams = "
        start:0
        ,limit:100
        ,cmd: 'searchTeachingSession'
        ,schoolyearId:'".$this->schoolyearId."'
        ,startdt:'".firstDayOfMonth()."'
        ,enddt:'".lastDayOfMonth()."'
    ";
    $TEACHING_SESSION_GRID->isObjectDefaultOnLoad = false;
    $TEACHING_SESSION_GRID->objectTitle = TEACHING_SESSION." (".firstDayOfMonth()." - ".lastDayOfMonth().")";
    $TEACHING_SESSION_GRID->forceFit = "false";
    $TEACHING_SESSION_GRID->renderJS();
    
    if($this->facette){
        //$veasna
        $AVAILABLE_ROOM_GRID->addCellRenderer("
            function renderText(v, p, record, rowIndex){
                return '<span class=spanText>' + v + '</span>';
            }
        ");

        $AVAILABLE_ROOM_GRID->addCellRenderer("
            function showSubjct(value, metadata, record, rowIndex, colIndex, store){
                return '<div class=\"show-subject\">' + value + '</div>';
            }
        ");
        
        $AVAILABLE_ROOM_GRID->addReadField("name: 'ID'");
        $AVAILABLE_ROOM_GRID->addReadField("name: 'AVAILABLE_STATUS'");      
        $AVAILABLE_ROOM_GRID->addReadField("name: 'SHORT'");   
        $AVAILABLE_ROOM_GRID->addReadField("name: 'ROOM'");
        $AVAILABLE_ROOM_GRID->addReadField("name: 'BUILDING'");
        $AVAILABLE_ROOM_GRID->addReadField("name: 'FLOOR'");
        $AVAILABLE_ROOM_GRID->addReadField("name: 'MAX_COUNT'");
        $AVAILABLE_ROOM_GRID->addReadField("name: 'ROOM_SIZE'");
        $AVAILABLE_ROOM_GRID->addReadField("name: 'AVAILABLE'");
        
        $AVAILABLE_ROOM_GRID->addColumn("header: '<b>".STATUS."</b>', align:'center', width: 80, renderer: cssAvailaleRoom, sortable: true, dataIndex: 'AVAILABLE_STATUS'");
        $AVAILABLE_ROOM_GRID->addColumn("header: '<b>".SHORT."</b>', align:'left', width: 80, renderer: cssAvailaleRoom, sortable: true, dataIndex: 'SHORT'");
        $AVAILABLE_ROOM_GRID->addColumn("header: '<b>".NAME."</b>', align:'left', width: 150, renderer: cssAvailaleRoom, sortable: true, dataIndex: 'ROOM'");
        $AVAILABLE_ROOM_GRID->addColumn("header: '<b>".BUILDING."</b>', width: 120, renderer: cssAvailaleRoom, sortable: true, dataIndex: 'BUILDING'");
        $AVAILABLE_ROOM_GRID->addColumn("header: '<b>".FLOOR."</b>', renderer: cssAvailaleRoom, width: 120, sortable: true, dataIndex: 'FLOOR'");
        $AVAILABLE_ROOM_GRID->addColumn("header: '<b>".PERSONS."</b>', renderer: cssAvailaleRoom, width: 120, sortable: true, dataIndex: 'MAX_COUNT'");
        $AVAILABLE_ROOM_GRID->addColumn("header: '<b>".ROOM_SIZE."</b>', renderer: cssAvailaleRoom, width: 120, sortable: true, dataIndex: 'ROOM_SIZE'");
        
        $AVAILABLE_ROOM_GRID->baseParams = "
            start:0
            ,limit:100
            ,scheduleId: '".$this->scheduleId."'
            ,academicId: '".$this->academicId."'
            ,target: '".$this->target."'
            ,trainingId: '".$this->trainingId."'
            ,term: '".$this->term."'
            ,cmd: 'availableGridRoom'
        ";
        
        $AVAILABLE_ROOM_GRID->loadMask = true;
        $AVAILABLE_ROOM_GRID->isPagingToolbar = true;
        $AVAILABLE_ROOM_GRID->isQuickySearch = true;
        $AVAILABLE_ROOM_GRID->isObjectDefaultOnLoad = true;
        $AVAILABLE_ROOM_GRID->forceFit = "false";
        $AVAILABLE_ROOM_GRID->renderJS();
    }
    
    //$AVAILABLE_ROOM_TREE->renderJS();
    
    ////////////////////////////////////////////////////////////////////////////
    $ASSIGNED_ROOM_GRID->addReadField("name: 'TIME'");
    $ASSIGNED_ROOM_GRID->addReadField("name: 'TEACHING_INFORMATION'");
    $ASSIGNED_ROOM_GRID->addColumn("header: '".TIME."', align:'center', width:120, sortable: false, dataIndex: 'TIME'");
    $ASSIGNED_ROOM_GRID->addColumn("header: '".TEACHING_INFORMATION."', align:'left', width: 210, sortable: false, dataIndex: 'TEACHING_INFORMATION'");

    $ASSIGNED_ROOM_GRID->baseParams = "
        start:0
        ,limit:100
        ,scheduleId: '".$this->scheduleId."'
        ,target: '".$this->target."'
        ,schoolyearId:'".$this->schoolyearId."'
        ,cmd: 'linkedScheduleAcademic'
    ";
    $ASSIGNED_ROOM_GRID->isObjectDefaultOnLoad = false;
    $ASSIGNED_ROOM_GRID->renderJS();
    
    ////////////////////////////////////////////////////////////////////////////
    //Group: Credit System
    ////////////////////////////////////////////////////////////////////////////
    if($this->academicObject)
    if($this->academicObject->EDUCATION_SYSTEM){
        $CREDIT_GROUP_GRID->addReadField("name: 'APPLY'");
        $CREDIT_GROUP_GRID->addReadField("name: 'NAME'");
        $CREDIT_GROUP_GRID->addColumn("
            xtype: 'checkboxcolumn'
            ,align: 'center'
            ,header: '<b>".APPLY."</b>'
            ,dataIndex: 'APPLY'
            ,disabled: true
            ,width: 80
            ,on: 1
            ,off: 0
        ");

        $CREDIT_GROUP_GRID->addColumn("header: '<b>".NAME."</b>', align:'left', width:200, sortable: false, dataIndex: 'NAME'");
        $CREDIT_GROUP_GRID->baseParams = "
            start:0
            ,limit:100
            ,scheduleId: '".$this->scheduleId."'
            ,type: 'SCHEDULE'
            ,cmd: 'linkedScheduleAcademic'
        ";
        $CREDIT_GROUP_GRID->setSaveParams("
            cmd: 'jsonActionLinkSchedule2Academic'
            ,scheduleId: '".$this->scheduleId."'
            ,type: 'SCHEDULE'
        ");
        $CREDIT_GROUP_GRID->setAftereditCallback("
            XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."');
        ");
        $CREDIT_GROUP_GRID->loadMask = false;
        $CREDIT_GROUP_GRID->isGridEditing = true;
        $CREDIT_GROUP_GRID->isPagingToolbar = true;
        $CREDIT_GROUP_GRID->isObjectDefaultOnLoad = true;
        $CREDIT_GROUP_GRID->forceFit = "false";
        $CREDIT_GROUP_GRID->renderJS();
    }
    ////////////////////////////////////////////////////////////////////////////
    
    if($this->academicId){
        if($this->academicObject){
            if($this->academicObject->EDUCATION_SYSTEM){
                $subjectObject = SubjectDBAccess::findSubjectFromId($this->academicObject->SUBJECT_ID);
                $ITEMS = "
                [
                    {".CamemisField::Displayfield("CREDIT_SUBJECT", SUBJECT, $subjectObject->NAME, false)."}
                    ,{".CamemisField::Displayfield("DAY_EVENT", DAY, $TITLE_EVENT, false)."}
                    ,{".CamemisField::Textfield("EVENT", "EVENT", EVENT, false, false, true)."}
                    //1=TEACHING_EVENT, 2 = EVENT
                    ,{".CamemisField::scheduleType(EVENT_TYPE, $READONLY_EVENT_TYPE)."} 
                    ,{".CamemisField::Hidden("SUBJECT", $this->academicObject->SUBJECT_ID)."}
                ]
                ";
            }else{
                $ITEMS = "";
                $ITEMS .= "[";
                    $ITEMS .= "{".CamemisField::Displayfield("DAY_EVENT", DAY, $TITLE_EVENT, false)."}";
                    $ITEMS .= ",{".CamemisField::scheduleType(EVENT_TYPE, $READONLY_EVENT_TYPE)."} ";
                    $ITEMS .= ",{".CamemisField::Textfield("EVENT", "EVENT", EVENT, false, false, true)."}";
                    if ($this->scheduleAction =="UPDATE"){
                        $ITEMS .= ",{".CamemisField::Combo('SUBJECT', SUBJECT, $traditionalSubjectStore, true, false,false)."}";
                        $disabled = true;
                    }else{
                        $ITEMS .= ",{".CamemisField::Combo('SUBJECT', SUBJECT, $traditionalSubjectStore, false, false,false, true)."}";
                        $disabled = false;
                    }
                    
                    $sharedStore = "[[0, '".NO."'],[1, '" . YES . "']]";
                    
                    $ITEMS .= ",{".CamemisField::Combo('SHARED_SCHEDULE', SHARED_SCHEDULE, $sharedStore, $READONLY_EVENT_TYPE, 0,false,false, true)."}";
                    $ITEMS .= " ,{xtype:'datefield'
                        ,fieldLabel: '".START_DATE."'
                        ,name: 'EXTRA_START_DATE'
                        ,id: 'EXTRA_START_DATE'
                        ,vtype: 'daterange'
                        ,endDateField: 'EXTRA_END_DATE'
                        ,width: 250
                        ,format: '".setExtDatafieldFormat()."'}";
                    $ITEMS .= " ,{xtype:'datefield'
                        ,fieldLabel: '".END_DATE."'
                        ,name: 'EXTRA_END_DATE'
                        ,id: 'EXTRA_END_DATE'
                        ,vtype: 'daterange'
                        ,startDateField: 'EXTRA_START_DATE'
                        ,width: 250
                        ,format: '".setExtDatafieldFormat()."'}";
                    $ITEMS .= " ,{".CamemisField::Hidden("OLD_SUBJECT", $this->subjectId)."}";
                $ITEMS .= "]";
            }
        }
    }
    
    if($this->trainingId){
        $traininObject = TrainingDBAccess::findTrainingFromId($this->trainingId);//@veasna
        $ITEMS = "
        [
            {".CamemisField::Displayfield("DAY_EVENT", DAY, $TITLE_EVENT, false)."}
            ,{".CamemisField::scheduleType(EVENT_TYPE, $READONLY_EVENT_TYPE)."} 
            ,{".CamemisField::Textfield("EVENT", "EVENT", EVENT, false, false, true)."}
            ,{".CamemisField::ComboSubjectByTraining("SUBJECT_ID","SUBJECT", SUBJECT, false, true)."}
            ,{".CamemisField::Hidden("OLD_SUBJECT", $this->subjectId)."}";
        if($traininObject->SCHEDULE_SETTING){//@veasna
        $ITEMS .= " ,{xtype:'datefield'
            ,fieldLabel: '".START_DATE."'
            ,name: 'START_DATE'
            ,id: 'START_DATE'
            ,vtype: 'daterange'
            ,endDateField: 'END_DATE'
            ,width: 250
            ,format: '".setExtDatafieldFormat()."'}";
        $ITEMS .= " ,{xtype:'datefield'
            ,fieldLabel: '".END_DATE."'
            ,name: 'END_DATE'
            ,id: 'END_DATE'
            ,vtype: 'daterange'
            ,startDateField: 'START_DATE'
            ,width: 250
            ,format: '".setExtDatafieldFormat()."'}";
        }
        $ITEMS .= "]";
    }
    
    ////////////////////////////////////////////////////////////////////////////
    //Display Group: Credit System...
    ////////////////////////////////////////////////////////////////////////////
    if($this->academicObject)
    if($this->academicObject->EDUCATION_SYSTEM){
        $CLASS_GROUP_ITEM = "
        {
            title: '".GRADEGROUP."'
            ,collapsible: true
            ,collapsed: false
            ,style: 'padding-bottom: 5px'
            ,width: 550
            ,height:250
            ,layout:'fit'
            ,items: [{xtype: '".$CREDIT_GROUP_GRID->getObjectXType()."'}]
        }
        ";
    }
    ////////////////////////////////////////////////////////////////////////////
    
    $DETAIL_INFORMATION = "
    {
        title: '".DETAIL_INFORMATION."'
        ,collapsible: true
        ,collapsed: false
        ,autoHeight: true
        ,style: 'padding-bottom: 5px'
        ,width: 550
        ,items:[{
            layout: 'form'
            ,border: false
            ,autoHeight:true
            ,bodyStyle: 'padding:10px'
            ,items: ".$ITEMS."
        }]
    }
    ";
    
    $TIME_INFORMATION = "
    {
        title: '" . TIME . "'
        ,collapsible: true
        ,collapsed: false
        ,autoHeight: true
        ,width: 550
        ,style: 'padding-bottom: 5px'
        ,items:[{
            layout: 'form'
            ,border: false
            ,autoHeight:true
            ,bodyStyle: 'padding:10px'
            ,items: [{
                xtype: 'textfield'
                ,emptyText: 'HH:MM'
                ,name: 'START_TIME'
                ,fieldLabel: '".START_TIME."'
                ,width: 250
                ,allowBlank:false
            },{
                xtype: 'textfield'
                ,emptyText: 'HH:MM'
                ,name: 'END_TIME'
                ,fieldLabel: '".END_TIME."'
                ,width: 250
                ,allowBlank:false
            }]
        }]
    }
    ";
    
    $TEACHER_INFORMATION = "
    {
        title: '".TEACHER."'
        ,id: 'TEACHER_INFORMATION'
        ,autoHeight: true
        ,collapsible: true
        ,collapsed: false
        ,style: 'padding-bottom: 5px'
        ,width: 550
        ,items:[{
            layout: 'form'
            ,border: false
            ,autoHeight:true
            ,bodyStyle: 'padding:10px'
            ,tbar: ['->',{
                text: '".CHECK_AVAILABLE_TEACHER."'
                ,iconCls:'icon-lightning'
                ,handler: function(){
                    var win = new Ext.Window({
                        title: '".CHECK_AVAILABLE_TEACHER."'
                        ,id: 'OPEN_WINDOW'
                        ,closable:true
                        ,maximizable: true
                        ,width:percentWidth(80)
                        ,height: percentHeight(80)
                        ,plain:true
                        ,modal: true
                        ,layout:'border'
                        ,border: false
                        ,defaults: {
                            collapsible: false
                            ,split: true
                        }
                        ,items: [{
                            region:'west'
                            ,title:'".LIST_OF_TEACHERS."'
                            ,margins: '3 0 3 3'
                            ,cmargins: '3 3 3 3'
                            ,width: percentWidth(80)/2
                            ,minSize: percentWidth(80)/2
                            ,maxSize: percentWidth(80)/2
                            ,layout: 'fit'
                            ,items: [{xtype: '".$AVAILABLE_TEACHER_GRID->getObjectXType()."'}]
                        },{
                            collapsible: false
                            ,id: 'center'
                            ,region:'center'
                            ,margins: '3 3 3 0'
                            ,layout: 'fit'
                            ,items: [{xtype: '".$TEACHING_SESSION_GRID->getObjectXType()."'}]
                        }]
                        ,fbar: ['->',{
                            text: '" . CLOSE . "'
                            ,iconCls: 'icon-cancel'
                            ,handler: function (){
                                win.close();
                            }
                        }]
                    });
                    win.show();

                    var grid = Ext.getCmp('".$AVAILABLE_TEACHER_GRID->getObjectId()."');
                    grid.on('cellclick', function(grid, rowIndex, columnIndex, event) {
                        var record = grid.store.getAt(rowIndex);
                        if (record.data.AVAILABLE == 1){
                            _disabled = false;
                        }else{
                            _disabled = true;
                        }
                        var contextMenu = new Ext.menu.Menu({
                            items: [{
                                text: '".APPLY."'
                                ,iconCls:'icon-application_form_add'
                                ,disabled:_disabled
                                ,handler: function(){
                                    if (record.data.AVAILABLE == 1){
                                        var Id = record.data.ID;
                                        var code = record.data.CODE;
                                        Ext.getCmp('TEACHER_HIDDEN').setValue(Id);
                                        Ext.getCmp('TEACHER_NAME').setValue(record.data.FULL_NAME + ' ('+code+')');						
                                        Ext.getCmp('OPEN_WINDOW').close();
                                    }
                                }
                            },{
                                text: '".CHECK_TEACHING_SESSION."'
                                ,iconCls:'icon-lightning'
                                ,disabled:_disabled
                                ,handler: function(){ 
                                    Ext.getCmp('".$TEACHING_SESSION_GRID->getObjectId()."').store.baseParams = {
                                        start:0
                                        ,limit:100
                                        ,teacherId:record.data.ID
                                        ,cmd: 'searchTeachingSession'
                                        ,schoolyearId:'".$this->schoolyearId."'
                                        ,startdt:'".firstDayOfMonth()."'
                                        ,enddt:'".lastDayOfMonth()."'
                                    };
                                    Ext.getCmp('".$TEACHING_SESSION_GRID->getObjectId()."').store.load();
                                }
                            }]
                        });
                        event.stopEvent();
                        contextMenu.showAt(event.xy);
                    });
                }
            }]
            ,layout: 'form'
            ,items:[
                {".CamemisField::Textfield("TEACHER_NAME", "TEACHER_NAME", FULL_NAME, false, true, false)."}
                ,{".CamemisField::Hidden("TEACHER_HIDDEN", $this->teacherId)."}
            ]
        }]
    }
    ";
   //@veasna 
    $ROOM_INFORMATION = "
    {
        title: '".ROOM."'
        ,id: 'ROOM_INFORMATION'
        ,autoHeight: true
        ,collapsible: true
        ,collapsed: false
        ,style: 'padding-bottom: 5px'
        ,width: 550
        ,items:[{
            layout: 'form'
            ,border: false
            ,autoHeight:true
            ,bodyStyle: 'padding:10px'
            ,tbar: ['->',{
                text: '".CHECK_AVAILABLE_ROOM."'
                ,iconCls:'icon-lightning'
                ,handler: function(){
                    var win = new Ext.Window({
                        title: '".CHECK_AVAILABLE_ROOM."'
                        ,id: 'OPEN_WINDOW'
                        ,closable:true
                        ,maximizable: true
                        ,width:percentWidth(80)
                        ,height: percentHeight(80)
                        ,plain:true
                        ,modal: true
                        ,layout:'border'
                        ,border: false
                        ,defaults: {
                            collapsible: true
                            ,split: true
                        }
                        ,items: [{
                            region:'west'
                            ,margins: '3 0 3 3'
                            ,cmargins: '3 3 3 3'
                            ,width: percentWidth(85)/2
                            ,minSize: percentWidth(85)/2
                            ,maxSize: percentWidth(85)/2
                            ,layout: 'fit'
                            ,items: [{xtype: '".$AVAILABLE_ROOM_GRID->getObjectXType()."'}]
                        },{
                            collapsible: false
                            ,id: 'subcenter'
                            ,region:'center'
                            ,margins: '3 3 3 0'
                            ,layout: 'card'
							,activeItem: 0
                            ,items: [{xtype: '".$ASSIGNED_ROOM_GRID->getObjectXType()."'}]
                        }]
                        ,fbar: ['->',{
                            text: '" . CLOSE . "'
                            ,iconCls: 'icon-cancel'
                            ,handler: function (){
                                win.close();
                            }
                        }]
                    });
                    win.show();
                    var myAvailableGride = Ext.getCmp('".$AVAILABLE_ROOM_GRID->getObjectId()."');
                    myAvailableGride.on('cellclick', function(grid, rowIndex, columnIndex, event){
                        Ext.getCmp('subcenter').getLayout().setActiveItem(0);
                        var record = grid.store.getAt(rowIndex);
                         if(record.data.AVAILABLE=='1' || record.data.AVAILABLE=='2'){
                            _used=false;
                         }else{
                            _used=true;
                         }

                        var contextMenu = new Ext.menu.Menu({
                            items: [{
                                text: '".APPLY."'
                                ,iconCls:'icon-application_form_add'
                                ,disabled:_used
                                ,handler: function(){ 
                                    Ext.getCmp('subcenter').getLayout().setActiveItem(0);
                                    Ext.getCmp('ROOM_HIDDEN').setValue(record.data.ID);
                                    Ext.getCmp('ROOM_NAME').setValue(record.data.ROOM);
                                    Ext.getCmp('OPEN_WINDOW').close();
                                }
                            },{
                                text: '".SEARCH."'
                                ,iconCls:'icon-lightning'
                                ,handler: function(){
                                    Ext.getCmp('".$ASSIGNED_ROOM_GRID->getObjectId()."').store.baseParams = {
                                        start:0
                                        ,limit:100
                                        ,cmd: 'checkAssignedRoomInSchedule'
                                        ,scheduleId: '".$this->scheduleId."'
                                        ,target: '".$this->target."'
                                        ,schoolyearId:'".$this->schoolyearId."'   
                                        ,checkId: record.data.ID
                                    };
                                    Ext.getCmp('".$ASSIGNED_ROOM_GRID->getObjectId()."').store.load();
                                }
                            },{
                                text: '".SHOW_DETAIL."'
                                ,iconCls:'icon-application_form_magnify'
                                ,handler: function(){
                                    clickOpenPage('subcenter','".SHOW_DETAIL."', '/room/showitem/?objectId=' + record.data.ID + '&schedule');
                                }
                            }]
                        });
                        event.stopEvent();
                        contextMenu.showAt(event.xy);
                        
                    });
                }
            }]
            ,layout: 'form'
            ,items:[
                {".CamemisField::Textfield("ROOM_NAME", "ROOM_NAME", NAME, false, true, false)."}
                ,{".CamemisField::Hidden("ROOM_HIDDEN", $this->roomId)."}
            ]
        }]
    }
    ";
    
    $DESCRIPTION = "
    {
        title: '".DESCRIPTION."'
        ,collapsible: true
        ,collapsed: false
        ,autoHeight: true
        ,style: 'padding-bottom: 5px'
        ,width: 550
        ,items:[{
            layout: 'form'
            ,border: false
            ,autoHeight:true
            ,bodyStyle: 'padding:10px'
            ,items: [{
                layout: 'fit'
                ,border: false
                ,items: [{".CamemisField::Textarea("DESCRIPTION", false,100)."}]    
            }]
        }]
    }
    ";
    
    $FORM_ITEMS = "[";
    $FORM_ITEMS .= "".$DETAIL_INFORMATION."";
    $FORM_ITEMS .= ",".$TIME_INFORMATION."";
    
    if ($this->scheduleAction =="UPDATE"){
        if($this->academicObject){
            if($this->academicObject->EDUCATION_SYSTEM){
                $FORM_ITEMS .= ",".$CLASS_GROUP_ITEM."";
            }
        }
        
        $FORM_ITEMS .= ",".$TEACHER_INFORMATION."";
        $FORM_ITEMS .= ",".$ROOM_INFORMATION."";
        
        if($this->facette->SHARED_SCHEDULE){
            if(!$this->facette->SHARED_FROM){
                $FORM_ITEMS .= ",".$SHARED_SCHEDULE_TREE_PANEL."";
            }
        }
        
        $FORM_ITEMS .= ",".$DESCRIPTION."";
    }
    
    $FORM_ITEMS .= "]";
    
    $items = "
        border: false
        ,id: 'FORM_ITEMS'
        ,bodyStyle: 'padding:0px'
        ,items: ".$FORM_ITEMS."
    ";
    $OBJECT_FORM->addObjectItems($items);
    
    if(!$isCancel){
        $OBJECT_FORM->addTBarItems("
            text: '".CANCEL."'
            ,id: 'CANCEL_ID'
            ,formBind:true
            ,iconCls:'icon-cancel'
            ,scope:this
            ,handler: function(){
                window.parent.Ext.getCmp('content').getLayout().setActiveItem(0);
                window.parent.Ext.getCmp('SCHEDULE_LIST_ID').store.load();
            }
        ");
    }
    
    if ($this->scheduleAction =="UPDATE"){       
        if($this->facette){
            if($this->academicId){
                if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT")){
                    if($this->facette->SHARED_SCHEDULE){
                        if(!$this->facette->SHARED_FROM){
                            $OBJECT_FORM->addTBarItems(CamemisBar::tbarSetRelease($status));
                        }
                    }else{
                        $OBJECT_FORM->addTBarItems(CamemisBar::tbarSetRelease($status));
                    }
                }
                
                if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_REMOVE_RIGHT")){
                    $OBJECT_FORM->addTBarItems(CamemisBar::tbarFormRemoveObject($this->remove_status));
                }
                
                if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EDIT_RIGHT")){
                    if($this->facette->SHARED_SCHEDULE){
                        if(!$this->facette->SHARED_FROM){
                            $OBJECT_FORM->addTBarItems(CamemisBar::tbarSave());
                        }
                    }else{
                        $OBJECT_FORM->addTBarItems(CamemisBar::tbarSave());
                    }
                }
                
            }else{           
                if(UserAuth::getACLValue("ACADEMIC_TRAINING_PROGRAMS_EXECUTE_RIGHT"))
                $OBJECT_FORM->addTBarItems(CamemisBar::tbarSetRelease($status));
                if(UserAuth::getACLValue("ACADEMIC_TRAINING_PROGRAMS_REMOVE_RIGHT"))
                $OBJECT_FORM->addTBarItems(CamemisBar::tbarFormRemoveObject($this->remove_status));
                if(UserAuth::getACLValue("ACADEMIC_TRAINING_PROGRAMS_EDIT_RIGHT"))
                $OBJECT_FORM->addTBarItems(CamemisBar::tbarSave());
            } 
        }
    }else{
        if($this->academicId){
            if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EDIT_RIGHT"))
            $OBJECT_FORM->addTBarItems(CamemisBar::tbarSingleSave());              
        }else{           
            if(UserAuth::getACLValue("ACADEMIC_TRAINING_PROGRAMS_EDIT_RIGHT"))
            $OBJECT_FORM->addTBarItems(CamemisBar::tbarSingleSave());                   
        }   
    }
    
    $OBJECT_FORM->setLoadParams("
            cmd: 'loadClassEvent'
            ,scheduleId: '".$this->scheduleId."'
            ,academicId: '".$this->academicId."'
            ,target: '".$this->target."'
            ,trainingId: '".$this->trainingId."'
            ,term: '".$this->term."'
            ,shortday: '".$this->shortday."'"
    );
    
    if ($this->scheduleAction == "INSERT"){
        $OBJECT_FORM->setSaveParams("
            cmd: 'saveClassEvent'
            ,camIds: '".$this->urlEncryp->encryptedGet($setParams)."'
        ");
    }else{
        $OBJECT_FORM->setSaveParams("
            cmd: 'saveClassEvent'
            ,camIds: '".$this->urlEncryp->encryptedGet($setParams)."'
        ");
    }
    
    $OBJECT_FORM->setRemoveParams("
        cmd: 'jsonDeleteDayClassEvent'
        ,scheduleId: '".$this->scheduleId."'
        ,academicId: '".$this->academicId."'
        ,target: '".$this->target."'
        ,trainingId: '".$this->trainingId."'
        ,term: '".$this->term."'
        ,shortday: '".$this->shortday."'
    ");
    
    $OBJECT_FORM->setReleaseParams("
        cmd: 'releaseClassEvent'
        ,camIds: '".$this->urlEncryp->encryptedGet($setParams)."'
    "); 

    $OBJECT_FORM->setonEmbeddedEvents("
        if (window.parent.Ext.getCmp('SCHEDULE_LIST_ID')) window.parent.Ext.getCmp('SCHEDULE_LIST_ID').store.reload();
        ".camemisPage::setRequestURI("scheduleId=".$this->scheduleId."")."
    ");

    $OBJECT_FORM->setOnEmbeddedReleaseEvents("
        if (window.parent.Ext.getCmp('SCHEDULE_LIST_ID')) window.parent.Ext.getCmp('SCHEDULE_LIST_ID').store.reload();
        ".camemisPage::setRequestURI()."
    ");
    
    $setLink = "";
    $setLink .= "academicId=".$this->academicId."";
    $setLink .= "&term=".$this->term."";
    $setLink .= "&target=".$this->target."";
    $setLink .= "&trainingId=".$this->trainingId."";
    if($this->facette){
        $OBJECT_FORM->setOnEmbeddedRemoveEvents("
            if (window.parent.Ext.getCmp('SCHEDULE_LIST_ID')) window.parent.Ext.getCmp('SCHEDULE_LIST_ID').store.reload();
            window.parent.Ext.getCmp('content').getLayout().setActiveItem(0);
        "); 
    }
    
    $OBJECT_FORM->isObjectDefaultOnLoad = true;
    $OBJECT_FORM->labelAlign = "left";
    $OBJECT_FORM->labelWidth = 120;
    $OBJECT_FORM->renderJS();
    
    ?>
    viewport = new Ext.Viewport({
        layout: 'fit'
        ,border: true
        ,items:[{
            layout:'fit'
            ,border: false
            ,items: [{xtype: '<?= $OBJECT_FORM->getObjectXType(); ?>'}]
        }]
    });

    if(Ext.getCmp('SUBJECT_ID')){
        Ext.getCmp('SUBJECT_ID').on('select', function() {
            if (Ext.getCmp('TEACHER_INFORMATION')) Ext.getCmp('TEACHER_INFORMATION').hide();
            if (Ext.getCmp('ROOM_INFORMATION')) Ext.getCmp('ROOM_INFORMATION').hide();
            
            Ext.Ajax.request({
                url: '/schedule/jsonsave/'
                ,method: 'POST'
                ,params: {
                    cmd: 'deleteOldSubject'
                    ,subjectId: '<?=$this->subjectId;?>'
                    ,scheduleId: '<?=$this->scheduleId?>'
                    ,academicId: '<?=$this->academicId;?>'
                    ,term: '<?=$this->term;?>'
                }
                ,success: function(response, options) { }
                ,failure: function(response, options) {}
            });
            if (Ext.getCmp('TEACHER_HIDDEN')) Ext.getCmp('TEACHER_HIDDEN').setValue('0');
        });
    }
    
    <?
    if ($this->facette){
        switch($this->facette->SCHEDULE_TYPE){
            case 1:
                ?>
                if (Ext.getCmp('EVENT')) Ext.getCmp('EVENT').show();
                if (Ext.getCmp('SUBJECT_ID')) Ext.getCmp('SUBJECT_ID').show();
                if (Ext.getCmp('EVENT')) Ext.getCmp('EVENT').hide();
                <?
            break;
            case 2:
                ?>
                if (Ext.getCmp('EVENT')) Ext.getCmp('EVENT').show();
                if (Ext.getCmp('SUBJECT_ID')) Ext.getCmp('SUBJECT_ID').hide();
                if (Ext.getCmp('EVENT')) Ext.getCmp('EVENT').setValue('');
                if (Ext.getCmp('EVENT')) Ext.getCmp('EVENT').enable();
                <?
            break;
        }
        ////////////////////////////////////////////////////////////////////////
        $js = "var myTree = Ext.getCmp('TREE.CLASS_GROUP_LIST_ID');";
        $js .= "if (myTree) myTree.on('checkchange', function(node, checked){";
            $js .= "Ext.Ajax.request({";
                $js .= "url: '/schedule/jsonsave/'";
                $js .= ",method: 'POST'";
                $js .= ",scope:this";
                $js .= ",params: {";
                    $js .= "cmd: 'actionSharingSchedule2Academic'";
                    $js .= ",selectedId: node.id, checked:checked";
                    $js .= ",scheduleId: '".$this->scheduleId."'";
                $js .= "}";
                $js .= ",success: function(response, options) {";
                    $js .= "XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."'); ";
                $js .= "}";
            $js .= "});";
        $js .= "});";
        echo $js;
        ////////////////////////////////////////////////////////////////////////
    }else{
        ?>
        
        if(Ext.getCmp('SCHEDULE_TYPE_ID')) Ext.getCmp('SCHEDULE_TYPE_ID').on('select', function() {
            switch(Ext.getCmp('SCHEDULE_TYPE_ID').getValue()){
                case 1:
                    Ext.getCmp('SUBJECT_ID').allowBlank = false;
                    if (Ext.getCmp('EVENT')) Ext.getCmp('EVENT').hide();
                    if (Ext.getCmp('SUBJECT_ID')) Ext.getCmp('SUBJECT_ID').show();
                    break;
                case 2:
                    Ext.getCmp('SUBJECT_ID').allowBlank = true;
                    if (Ext.getCmp('EVENT')) Ext.getCmp('EVENT').show();
                    if (Ext.getCmp('SUBJECT_ID')) Ext.getCmp('SUBJECT_ID').hide();
                    if (Ext.getCmp('EVENT')) Ext.getCmp('EVENT').setValue('');
                break;
                default:
                    Ext.getCmp('SUBJECT_ID').allowBlank = false;
                    if (Ext.getCmp('EVENT')) Ext.getCmp('EVENT').hide();
                    if (Ext.getCmp('SUBJECT_ID')) Ext.getCmp('SUBJECT_ID').hide();
                    if (Ext.getCmp('EVENT')) Ext.getCmp('EVENT').setValue('');
                break;
            }
        });
        <?
    }
    ?>
});
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>