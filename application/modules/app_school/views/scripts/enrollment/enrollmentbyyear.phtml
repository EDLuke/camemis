<?
///////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 18.07.2009
// Am Stollheen 18, 55120 Mainz, Germany
///////////////////////////////////////////////////////////
require_once 'models/UserAuth.php';
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisDynamicCombo.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisTree.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'include/Common.inc.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();    


$ASSIGNED_STUDENTS_GRID = new CamemisGrid("ENROLLMENT", "STUDENT_GRID");
$ASSIGNED_STUDENTS_GRID->setLoadUrl("/enrollment/jsonload/");
$ASSIGNED_STUDENTS_GRID->setSaveUrl("/enrollment/jsonsave/");
$columndata = Utiles::getGridColumnData("ENROLLMENT_STUDENT_GRID_ID");

$leftSchoolYear=$this->schoolyearId;
$leftClass=$this->objectId;
$leftGradeId=$this->gradeId;
$leftGradeName=$this->gradeObject?$this->gradeObject->NAME :'';

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();
?>

<script>
    
    var studentId;
    Ext.onReady(function() {
        
        
        function loadLeftGrid(classId, gradeId, leftSchoolyearId, rightSchoolyearId){
            Ext.getCmp('<?=$ASSIGNED_STUDENTS_GRID->getObjectId()?>').store.baseParams = {
                start:0
                ,limit:100
                ,cmd: 'jsonListStudentLastSchoolyear'
                ,schoolyearId:leftSchoolyearId
                ,nextSchoolyearId:rightSchoolyearId
                ,gradeId:gradeId
                ,academicId:classId
            };
            Ext.getCmp('<?=$ASSIGNED_STUDENTS_GRID->getObjectId()?>').store.load();
        }
        
        function cssStatus(v, p, record){
            return String.format('<div style=\"font-weight:bold;padding:4px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
            );
        }
        
        function cssText(value, metadata, record){
            var name = record.data.STUDENT_NAME;
            metadata.attr = 'ext:qtip="' + name + '"';
            return '<span style="color:#333; padding:5px; height: 25px;">' + value + '</span>';
        }
        
        function qtipFullname(value, metadata, record){
            
            var isTransfer = record.data.TRANSFER;
            if (isTransfer === 1){
                var statusName = '<?=STUDENT_TRANSFER;?>';
                metadata.attr = 'ext:qtip="' + statusName + '"';
            }
            return '' + value + '';
        }

        <?
        /**
         * Extjs: s.gif
         */
        $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
        $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();
        
        
        $OBJECT_SCHOOLYEAR = new CamemisDynCombo("ACADEMICDATE","RIGHT_SCHOOLYEAR");
        $OBJECT_SCHOOLYEAR->setLoadUrl('/academicdate/jsonload/');
        $OBJECT_SCHOOLYEAR->objectTitle = false;
        $OBJECT_SCHOOLYEAR->allowBlank = "true";
        $OBJECT_SCHOOLYEAR->width = 150;
        $OBJECT_SCHOOLYEAR->varName = "SCHOOLYEAR";
        $OBJECT_SCHOOLYEAR->setLoadParams("cmd: 'selectBoxSchoolyearNowFuture'");
        $OBJECT_SCHOOLYEAR->renderJS();      
        
        ////@veasna
        
        $RIGHT_GRADE_OBJECT = new CamemisDynCombo("DATASET","RIGHT_GRADE");
        $RIGHT_GRADE_OBJECT->setLoadUrl("/academic/jsonload/");
        $RIGHT_GRADE_OBJECT->objectTitle = "<b>".GRADE."</b>";
        $RIGHT_GRADE_OBJECT->allowBlank = "true";
        $RIGHT_GRADE_OBJECT->width = 130;
        $RIGHT_GRADE_OBJECT->varName = "RIGHT_GRADE";
        //$RIGHT_GRADE_OBJECT->setLoadParams("cmd: 'jsonSearchGrade',searchType:'GRADE'");
        $RIGHT_GRADE_OBJECT->renderJS();
        //
        
        $RIGHT_CLASS_OBJECT = new CamemisDynCombo("DATASET","RIGHT_GRADE_CLASS");
        $RIGHT_CLASS_OBJECT->setLoadUrl("/academic/jsonload/");
        $RIGHT_CLASS_OBJECT->objectTitle = "<b>".GRADE_CLASS."</b>";
        $RIGHT_CLASS_OBJECT->allowBlank = "true";
        $RIGHT_CLASS_OBJECT->width = 130;
        $RIGHT_CLASS_OBJECT->varName = "RIGHT_GRADE_CLASS";
        //$RIGHT_CLASS_OBJECT->setLoadParams("cmd: 'jsonSearchGrade',searchType:'CLASS'");
        $RIGHT_CLASS_OBJECT->renderJS();
      
        /*$storeTransfer = "[
            ['0','---']
            ,['1','".YES."']
            ,['0','".NO."']
        ]";
        
        $ASSIGNED_STUDENTS_GRID->addCellRenderer("
            function renderText(v, p, record, rowIndex){
                var str = '<span class=spanText>' + v + '</span>';
                return str;
            }
        ");     

        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'CODE'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'LASTNAME'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'FIRSTNAME'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STUDENT_NAME'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'GENDER'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'DATE_BIRTH'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'CLASS'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'GRADE_NAME'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STATUS'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STATUS_KEY'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'CLASS_NAME'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STUDENT_ID'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'SCHOOL_YEAR_NAME'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'ACADEMIC_ACTIVITY'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STUDENT_NAME'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'TRANSFER'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'CLASS_ID'");
        
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'BG_COLOR'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'BG_COLOR_FONT'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STATUS_KEY'");
        
        switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
            case "VIETNAMESE": $width = 125;break;
            default: $width = 85;break;
        }
        
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '".CODE_ID."', align:'left', renderer:cssText, sortable: true, width: 100, dataIndex: 'CODE'");
        
        if(!SchoolDBAccess::displayPersonNameInGrid()){
            $ASSIGNED_STUDENTS_GRID->addColumn("
                header: '".LASTNAME."'
                , width: 110
                , renderer: cssText
                , sortable: true
                , dataIndex: 'LASTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'LASTNAME'
                })
            ");
            
            $ASSIGNED_STUDENTS_GRID->addColumn("
                header: '".FIRSTNAME."'
                , width: 110
                , renderer: cssText
                , sortable: true
                , dataIndex: 'FIRSTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'FIRSTNAME'
                })
            ");
        }else{
            
            $ASSIGNED_STUDENTS_GRID->addColumn("
                header: '".FIRSTNAME."'
                , width: 110
                , renderer: cssText
                , sortable: true
                , dataIndex: 'FIRSTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'FIRSTNAME'
                })
            ");
            
            $ASSIGNED_STUDENTS_GRID->addColumn("
                header: '".LASTNAME."'
                , width: 110
                , renderer: cssText
                , sortable: true
                , dataIndex: 'LASTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'LASTNAME'
                })
            ");
            
        }
                
        $ASSIGNED_STUDENTS_GRID->addColumn("
            header: '<b>".GENDER."</b>',
            dataIndex: 'GENDER',
            width: 120,
            align: 'left',
            renderer: cssText,
            editor: new Ext.form.ComboBox({
                triggerAction:'all'
                ,mode:'local'
                ,store: new Ext.data.JsonStore({
                        autoDestroy: true
                        ,fields: ['chooseValue', 'chooseDisplay']
                        ,data:[{chooseValue: '0', chooseDisplay: '---'},{chooseValue: '1', chooseDisplay: '".MALE."'},{chooseValue: '2', chooseDisplay: '".FEMALE."'}]
                    })
                    ,valueField: 'chooseValue'
                    ,displayField: 'chooseDisplay'
                    ,editable: false
                    ,listeners: {
                    select: function(combo, record, index) {
                        replaceValue = combo.getValue();
                        var newDisplay = record.get('chooseDisplay');
                        combo.setValue(newDisplay);
                    }
                }
            })
        ");
        
        $ASSIGNED_STUDENTS_GRID->addColumn("
            header: '".DATE_BIRTH."'
            , width: 110
            , renderer: cssText
            , sortable: true
            , dataIndex: 'DATE_BIRTH'
            , editor: new Ext.form.TextField({
                allowBlank: false
                ,name: 'DATE_BIRTH'
            })
        ");
        
        $ASSIGNED_STUDENTS_GRID->addColumn("
            header: '".TRANSFER."'
            , width: 80
            , align: 'center'
            , renderer: cssText
            , sortable: true
            , dataIndex: 'TRANSFER'
            ,editor: new Ext.form.ComboBox({
                typeAhead: true
                ,editable:false
                ,name: 'TRANSFER'
                ,hiddenName: 'TRANSFER'
                ,triggerAction: 'all'
                ,store: ".$storeTransfer."
                ,listClass: 'x-combo-list-small'
            })
        ");
        
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '".GRADE_CLASS."', width: 100, renderer: cssText, sortable: true, dataIndex: 'CLASS'");    */     

        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'CODE'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'LASTNAME'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'FIRSTNAME'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STUDENT_NAME'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'GENDER'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'GRADE_CLASS'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'BG_COLOR'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'BG_COLOR_FONT'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STATUS_KEY'");
        //$ASSIGNED_STUDENTS_GRID->addReadField("name: 'GRADING'"); //@veasna 
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'CLASS'"); //@veasna 
        
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".STATUS."</b>', align:'center', width: 120, hidden:".checkColHidden(1, $columndata).", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".CODE_ID."</b>', align:'left', renderer: cssText, width: 80, hidden:".checkColHidden(2, $columndata).", sortable: true, dataIndex: 'CODE'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".FIRSTNAME."</b>', align:'left', renderer: cssText, width: 120, hidden:".checkColHidden(3, $columndata).", sortable: true, dataIndex: 'FIRSTNAME'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".LASTNAME."</b>', align:'left', renderer: cssText, width: 120, hidden:".checkColHidden(4, $columndata).", sortable: true, dataIndex: 'LASTNAME'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".GENDER."</b>', align:'left', renderer: cssText, width: 80, hidden:".checkColHidden(5, $columndata).", sortable: true, dataIndex: 'GENDER'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".GRADE_CLASS."</b>', align:'left', renderer: cssText, width: 110, hidden:".checkColHidden(6, $columndata).", sortable: true, dataIndex: 'GRADE_CLASS'");
        
        //$ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".GPA."</b>', align:'left', renderer: cssText, width: 100, sortable: true, dataIndex: 'GRADING'");//@veasna

        $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add(['<b>".CAMPUS."<b>',{
                xtype: 'buttongroup'
               ,items:[{
                ".CamemisField::ComboCampus("",false)."
                }]
            }]);
        "); 
        
        
        $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add(['<b>".SCHOOL_YEAR."<b>',{
                xtype: 'buttongroup'
               ,items:[{
                width: 80
                ,xtype: '".$OBJECT_SCHOOLYEAR->getObjectXType()."'
                }]
            }]);
        ");
        
        $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add(['<b>".GRADE."<b>',{
                xtype: 'buttongroup'
               ,items:[{
                width: 80
                ,xtype: '".$RIGHT_GRADE_OBJECT->getObjectXType()."'
                }]
            }]);
        ");
        
        $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add(['<b>".GRADE_CLASS."<b>',{
                xtype: 'buttongroup'
               ,items:[{
                width: 80
                ,xtype: '".$RIGHT_CLASS_OBJECT->getObjectXType()."'
                }]
            }]);
        "); 
        
       $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add('->',[{
                id: 'APLY_ID'
                ,text: '<b>" . APPLY . "</b>'
                ,iconCls:'icon-group_add'
                ,scope:this
                ,handler: this.onSelection
            }]);
        ");
        
        $ASSIGNED_STUDENTS_GRID->baseParams = "
            start:0
            ,limit:100
            ,schoolyearId:'".$leftSchoolYear."'
            ,cmd: 'jsonListStudentLastSchoolyear'
            ,nextSchoolyearId:'".$leftSchoolYear."'
            ,gradeId:'".$leftGradeId."'
            ,academicId:'".$leftClass."'
        "; 
            
        /*$ASSIGNED_STUDENTS_GRID->baseParams = "
            start:0
            ,limit:100
            ,academicId: '".$this->objectId."'
            ,campusId: '".$this->campusId."'
            ,schoolyearId: '".$this->schoolyearId."'
            ,cmd: 'jsonAssignedStudents'
        ";*/
        
        $ASSIGNED_STUDENTS_GRID->setSelectionParams("
            cmd: 'transferStudentToGradeSchoolyear'
            ,schoolyearId:comboRightSchoolYear.getValue()
            ,gradeId:comboRightGrade.getValue()
            ,classId:comboRightClass.getValue()
            ,schoolyearLeftId:'".$leftSchoolYear."'
            ,gradeLeftId:".$leftGradeId."
            ,classLeftId:".$leftClass."
        ");
        
        $ASSIGNED_STUDENTS_GRID->setSelectionEmbeddedEvents("
           
            Ext.getCmp('".$ASSIGNED_STUDENTS_GRID->getObjectId()."').store.reload();
        ");
        
        /*$ASSIGNED_STUDENTS_GRID->setAftereditCallback("
            switch(jsonData.error){
                case 1:
                    Ext.fly(Ext.getCmp('RIGHT_SCHOOLYEAR_ID').getEl()).frame('ff0000');
                    XMsg('".STATUS."','".PLEASE_CHOOSE."');
                break;
                case 2:
                    Ext.fly(Ext.getCmp('RIGHT_GRADE_ID').getEl()).frame('ff0000');
                    XMsg('".STATUS."','".PLEASE_CHOOSE."');
                break;
                case 3:
                    Ext.fly(Ext.getCmp('RIGHT_GRADE_CLASS_ID').getEl()).frame('ff0000');
                    XMsg('".STATUS."','".PLEASE_CHOOSE."');
                break;
            }
            if (!jsonData.error){
                XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."');
                window.Ext.getCmp('".$ASSIGNED_STUDENTS_GRID->getObjectId()."').store.reload();
            }
        ");   */
        
        $ASSIGNED_STUDENTS_GRID->loadMask = false; 
        $ASSIGNED_STUDENTS_GRID->isCheckboxSelect = true;
        $ASSIGNED_STUDENTS_GRID->isObjectDefaultOnLoad = true;
        $ASSIGNED_STUDENTS_GRID->forceFit = "false";
        $ASSIGNED_STUDENTS_GRID->renderJS();

        ?>
        viewport = new Ext.Viewport({
            layout: 'fit'
            ,border: false
            ,items:[{
                border: false
                ,xtype: 'panel'
                ,layout: 'card'
                ,id: 'panel'
                ,activeItem: 0
                ,items:[{
                    border: false
                    ,layout: 'fit'
                    ,items: [{xtype: '<?=$ASSIGNED_STUDENTS_GRID->getObjectXType();?>'}]
                }]
            }]
        });
        
        var comboRightCampus = Ext.getCmp('CAMPUS_ID'); 
        var comboRightSchoolYear=Ext.getCmp('<?=$OBJECT_SCHOOLYEAR->getObjectId();?>');
        comboRightSchoolYear.disable();
        var comboRightGrade=Ext.getCmp('<?=$RIGHT_GRADE_OBJECT->getObjectId();?>');
        comboRightGrade.disable();
        var comboRightClass=Ext.getCmp('<?=$RIGHT_CLASS_OBJECT->getObjectId();?>');
        comboRightClass.disable();
       
        if(comboRightCampus)
        {
            comboRightCampus.on('select', function() {
                comboRightSchoolYear.enable();
                comboRightGrade.disable();
                comboRightClass.disable();      
            });
        }
       
       if(comboRightSchoolYear){
           comboRightSchoolYear.on('select', function() {
                leftSchoolyearId ='<?=$leftSchoolYear;?>';
                leftGradeId='<?=$leftGradeId;?>';
                leftClassId='<?=$leftClass;?>';
                righSchoolyearId=comboRightSchoolYear.getValue();
                /*if(leftSchoolyearId==righSchoolyearId){
                    comboRightGrade.disable();
                    comboRightGrade.setValue('<?=$leftGradeName;?>');
                    comboRightClass.enable(); 
                    comboRightClass.setValue('');
                    comboRightClass.store.baseParams={
                        cmd: 'jsonSearchGrade'
                        ,searchType:'CLASS'
                        ,schoolyearId: righSchoolyearId
                        ,gradeId: leftGradeId
                        ,leftClass: leftClassId  
                    };
                    comboRightClass.store.reload(); */      
                //}else{
                    comboRightGrade.enable();
                    comboRightGrade.setValue('');
                    comboRightGrade.store.baseParams={
                        cmd: 'jsonSearchGrade'
                        ,searchType:'GRADE'
                        ,campusId: comboRightCampus.getValue() 
                        ,gradeLeftId: leftGradeId  
                        ,leftSchoolYear: leftSchoolyearId
                        ,rightSchoolYear: righSchoolyearId  
                    };
                    comboRightGrade.store.reload();
                //}
                
                loadLeftGrid(leftClassId, leftGradeId , leftSchoolyearId, righSchoolyearId);
                
            });
       }
       
       
       if(comboRightGrade){
           comboRightGrade.on('select', function() {
                leftSchoolyearId ='<?=$leftSchoolYear;?>';
                rightGradeId= comboRightGrade.getValue(); 
                leftClassId='<?=$leftClass;?>';
                righSchoolyearId=comboRightSchoolYear.getValue();
                comboRightClass.enable();
                comboRightClass.setValue('');
                comboRightClass.store.baseParams={
                    cmd: 'jsonSearchGrade'
                    ,searchType:'CLASS'
                    ,schoolyearId: righSchoolyearId
                    ,gradeId: rightGradeId
                    ,leftClass: leftClassId  
                };
                comboRightClass.store.reload();
                
            });
       }
       
       
       var grid = Ext.getCmp('<?=$ASSIGNED_STUDENTS_GRID->getObjectId();?>');
       if (grid) grid.on('cellclick', function(grid, rowIndex, columnIndex, event) {
            var record = grid.store.getAt(rowIndex);
            var contextMenu = new Ext.menu.Menu({
                items: [{
                    text: '<?=ACADEMIC_PERFORMANCES;?>'                                                           
                    ,iconCls:'icon-application_form_magnify'
                    ,handler:function(){
                        //window.parent.openWinMax('','/enrollment/diplaygradebookyear?studentId=' + record.data.ID+'&classId='+record.data.CLASS);    
                    }
                },{
                    text: '<?=ATTENDANCE;?>'
                    ,iconCls:'icon-application_form_magnify'
                    ,handler:function(){
                        window.parent.openWinMax('','/enrollment/studentattendanceyear/?studentId=' + record.data.ID+'&classId='+record.data.CLASS+'&target=general');    
                    }    
                },{
                    text: '<?=DISCIPLINE;?>'
                    ,iconCls:'icon-application_form_magnify'
                    ,handler:function(){
                        window.parent.openWinMax('','/discipline/bystudent?studentId=' + record.data.ID+'&classId='+record.data.CLASS+'&target=general&view=1');
                    }    
                }]
            });
            event.stopEvent();
            contextMenu.showAt(event.xy);
        });
        Ext.state.Manager.setProvider(new Ext.state.HttpProvider({url: '/dataset/jsonsave/'}));
    });
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>