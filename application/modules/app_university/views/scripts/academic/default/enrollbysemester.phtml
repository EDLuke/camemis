<?
///////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 18.07.2009
// Am Stollheen 18, 55120 Mainz, Germany
///////////////////////////////////////////////////////////
require_once 'models/UserAuth.php';
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisTree.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$ASSIGNED_STUDENTS = new CamemisGrid("STUDENT", "LIST_CLASS");
$ASSIGNED_STUDENTS->setLoadUrl("/student/jsonload/");
$ASSIGNED_STUDENTS->setSaveUrl("/student/jsonsave/");

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();

if(!$this->facette) {header("Location: /main/permission/");exit;}

$TERM_NUMBER = AcademicDBAccess::findAcademicTerm($this->facette->SCHOOL_YEAR);

?>

<script>
    Ext.onReady(function() {
        
        function cssStatus(v, p, record){
            return String.format('<div style=\"font-weight:bold;padding:4px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
            );
        }
        function cssText(value, metadata, record){
            return '<div style="font-weight:normal; color:#000; padding: 5px; height: 15px;;">' + value + '</div>';
        }
        <?
        /**
        * Extjs: s.gif
        */
        $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
        $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();
        
        $ASSIGNED_STUDENTS->addReadField("name: 'CODE'");
        $ASSIGNED_STUDENTS->addReadField("name: 'FULL_NAME'");
        $ASSIGNED_STUDENTS->addReadField("name: 'FIRSTNAME'");
        $ASSIGNED_STUDENTS->addReadField("name: 'LASTNAME'");
        $ASSIGNED_STUDENTS->addReadField("name: 'GENDER'");
        $ASSIGNED_STUDENTS->addReadField("name: 'DATE_BIRTH'");
        $ASSIGNED_STUDENTS->addReadField("name: 'PHONE'");
        $ASSIGNED_STUDENTS->addReadField("name: 'EMAIL'");
        $ASSIGNED_STUDENTS->addReadField("name: 'SORTKEY'");
        $ASSIGNED_STUDENTS->addReadField("name: 'BG_COLOR'");
        $ASSIGNED_STUDENTS->addReadField("name: 'BG_COLOR_FONT'");
        $ASSIGNED_STUDENTS->addReadField("name: 'STATUS_KEY'");
        
        $ASSIGNED_STUDENTS->addReadField("name: 'FIRST_ACADEMIC'");
        $ASSIGNED_STUDENTS->addReadField("name: 'SECOND_ACADEMIC'");
        $ASSIGNED_STUDENTS->addReadField("name: 'THIRD_ACADEMIC'");
        $ASSIGNED_STUDENTS->addReadField("name: 'FOURTH_ACADEMIC'");

        switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
            case "VIETNAMESE": $width = 100;break;
            default: $width = 85;break;
        }

        if(UserAuth::getUserType() == "INSTRUCTOR"){
            $ASSIGNED_STUDENTS->addColumn("
                header: '<b>" . SORTKEY . "</b>'
                , width: 80
                , align:'center'
                , sortable: true
                , dataIndex: 'SORTKEY'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'SORTKEY'
                })
            ");
        }

        switch(UserAuth::getUserType()){
            case "SUPERADMIN":
            case "ADMIN":
                $ASSIGNED_STUDENTS->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
                $ASSIGNED_STUDENTS->addColumn("header: '<b>" . CODE_ID . "</b>', width: 80, renderer: cssText, sortable: false, dataIndex: 'CODE'");
                break;
        }

        if(!SchoolDBAccess::displayPersonNameInGrid()){
            $ASSIGNED_STUDENTS->addColumn("
                header: '<b>".LASTNAME."</b>'
                , width: 110
                , sortable: true
                , dataIndex: 'LASTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'LASTNAME'
                })
            ");

            $ASSIGNED_STUDENTS->addColumn("
                header: '<b>".FIRSTNAME."</b>'
                , width: 110
                , sortable: true
                , dataIndex: 'FIRSTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'FIRSTNAME'
                })
            ");

        }else{

            $ASSIGNED_STUDENTS->addColumn("
                header: '<b>".FIRSTNAME."</b>'
                , width: 110
                , sortable: true
                , dataIndex: 'FIRSTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'FIRSTNAME'
                })
            ");

            $ASSIGNED_STUDENTS->addColumn("
                header: '<b>".LASTNAME."</b>'
                , width: 110
                , sortable: true
                , dataIndex: 'LASTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'LASTNAME'
                })
            ");
        }

        $ASSIGNED_STUDENTS->addColumn("
            header: '<b>".GENDER."</b>',
            dataIndex: 'GENDER',
            width: 120,
            align: 'left',
            editor: new Ext.form.ComboBox({
                triggerAction:'all'
                ,mode:'local'
                ,store: new Ext.data.JsonStore({
                    autoDestroy: true
                    ,fields: ['chooseValue', 'chooseDisplay']
                    ,data:[{chooseValue: '0', chooseDisplay: '---'},{chooseValue: '1', chooseDisplay: '".MALE."'},{chooseValue: '2', chooseDisplay: '".FEMALE."'}]
                })
                ,valueField: 'chooseValue'
                ,displayField: 'chooseDisplay'
                ,editable: false
                ,listeners: {
                    select: function(combo, record, index) {
                        replaceValue = combo.getValue();
                        var newDisplay = record.get('chooseDisplay');
                        combo.setValue(newDisplay);
                    }
                }
            })
        ");

        $ASSIGNED_STUDENTS->addColumn("
            header: '<b>".DATE_BIRTH."</b>'
            , width: 110
            , sortable: true
            , dataIndex: 'DATE_BIRTH'
            , editor: new Ext.form.TextField({
                allowBlank: false
                ,name: 'DATE_BIRTH'
            })
        ");

        if($this->facette->ENROLLMENT_TYPE == 1){
            switch($TERM_NUMBER){
                case 1:
                    $ASSIGNED_STUDENTS->addColumn("
                        xtype: 'checkboxcolumn'
                        ,align: 'center'
                        ,header: '<b>".FIRST_TERM."</b>'
                        ,dataIndex: 'FIRST_ACADEMIC'
                        ,disabled: true
                        ,width: 100
                        ,on: 1
                        ,off: 0
                    ");
                    $ASSIGNED_STUDENTS->addColumn("
                        xtype: 'checkboxcolumn'
                        ,align: 'center'
                        ,header: '<b>".SECOND_TERM."</b>'
                        ,dataIndex: 'SECOND_ACADEMIC'
                        ,disabled: true
                        ,width: 100
                        ,on: 1
                        ,off: 0
                    ");
                    $ASSIGNED_STUDENTS->addColumn("
                        xtype: 'checkboxcolumn'
                        ,align: 'center'
                        ,header: '<b>".THIRD_TERM."</b>'
                        ,dataIndex: 'THIRD_ACADEMIC'
                        ,disabled: true
                        ,width: 100
                        ,on: 1
                        ,off: 0
                    ");
                    break;
                case 2:
                    $ASSIGNED_STUDENTS->addColumn("
                        xtype: 'checkboxcolumn'
                        ,align: 'center'
                        ,header: '<b>".FIRST_QUARTER."</b>'
                        ,dataIndex: 'FIRST_ACADEMIC'
                        ,disabled: true
                        ,width: 100
                        ,on: 1
                        ,off: 0
                    ");
                    $ASSIGNED_STUDENTS->addColumn("
                        xtype: 'checkboxcolumn'
                        ,align: 'center'
                        ,header: '<b>".SECOND_QUARTER."</b>'
                        ,dataIndex: 'SECOND_ACADEMIC'
                        ,disabled: true
                        ,width: 100
                        ,on: 1
                        ,off: 0
                    ");
                    $ASSIGNED_STUDENTS->addColumn("
                        xtype: 'checkboxcolumn'
                        ,align: 'center'
                        ,header: '<b>".THIRD_QUARTER."</b>'
                        ,dataIndex: 'THIRD_ACADEMIC'
                        ,disabled: true
                        ,width: 100
                        ,on: 1
                        ,off: 0
                    ");
                    $ASSIGNED_STUDENTS->addColumn("
                        xtype: 'checkboxcolumn'
                        ,align: 'center'
                        ,header: '<b>".FOURTH_QUARTER."</b>'
                        ,dataIndex: 'FOURTH_ACADEMIC'
                        ,disabled: true
                        ,width: 100
                        ,on: 1
                        ,off: 0
                    ");
                    break;
                default:
                    $ASSIGNED_STUDENTS->addColumn("
                        xtype: 'checkboxcolumn'
                        ,align: 'center'
                        ,header: '<b>".FIRST_SEMESTER."</b>'
                        ,dataIndex: 'FIRST_ACADEMIC'
                        ,disabled: true
                        ,width: 100
                        ,on: 1
                        ,off: 0
                    ");
                    $ASSIGNED_STUDENTS->addColumn("
                        xtype: 'checkboxcolumn'
                        ,align: 'center'
                        ,header: '<b>".SECOND_SEMESTER."</b>'
                        ,dataIndex: 'SECOND_ACADEMIC'
                        ,disabled: true
                        ,width: 100
                        ,on: 1
                        ,off: 0
                    ");
                    break;
            }
        }

        $ASSIGNED_STUDENTS->baseParams = "
            start:0
            ,limit:100
            ,classId: '".$this->facette->ID."'
            ,cmd: 'jsonEnrolledStudentsToClass'
        ";
        
        /////////////////////////////////////////
        $ASSIGNED_STUDENTS->addTBarItems("
            tbar.add('->');
        ");

        switch(UserAuth::getUserType()){
            case "ADMIN":
            case "SUPERADMIN":
                $ASSIGNED_STUDENTS->setSaveParams("
                    cmd: 'actionStudentGradeClassSchoolyear'
                    ,academicId: '".$this->facette->GUID."'
                ");
                if($this->facette->ENROLLMENT_TYPE == 1){
                    $ASSIGNED_STUDENTS->setAftereditCallback("
                        XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."');
                        e.record.set('FIRST_ACADEMIC',jsonData.data.FIRST_ACADEMIC);
                        e.record.set('SECOND_ACADEMIC',jsonData.data.SECOND_ACADEMIC);
                        e.record.set('THIRD_ACADEMIC',jsonData.data.THIRD_ACADEMIC);
                        e.record.set('FOURTH_ACADEMIC',jsonData.data.FOURTH_ACADEMIC);
                    ");
                }else{
                    $ASSIGNED_STUDENTS->setAftereditCallback("
                        XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."');
                    ");
                }
                
                $ASSIGNED_STUDENTS->isGridEditing = true;
            break;
        }
        $ASSIGNED_STUDENTS->isQuickySearch = true;
        $ASSIGNED_STUDENTS->isCheckboxSelect = false;
        $ASSIGNED_STUDENTS->forceFit = "false";
        $ASSIGNED_STUDENTS->removeNAME = "STUDENT_NAME";
        $ASSIGNED_STUDENTS->renderJS();
        
        ?>
                
        viewport = new Ext.Viewport({
            layout: 'fit'
            ,border: false
            ,items:[{
                layout:'fit'
                ,border: false
                ,items:[{xtype: '<?=$ASSIGNED_STUDENTS->getObjectXtype();?>'}]
            }]
        });
   });
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>