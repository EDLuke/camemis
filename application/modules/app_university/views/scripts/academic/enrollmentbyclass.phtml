<?
///////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 18.07.2009
// Am Stollheen 18, 55120 Mainz, Germany
///////////////////////////////////////////////////////////
require_once 'models/UserAuth.php';
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisTree.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'include/Common.inc.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$LIST_OF_STUDENTS = new CamemisGrid("STUDENT", "LIST_OF_STUDENTS");
$LIST_OF_STUDENTS->setLoadUrl("/student/jsonload/");
$LIST_OF_STUDENTS->setSaveUrl("/student/jsonsave/");

$ASSIGNED_STUDENTS = new CamemisGrid("STUDENT", "LIST_CLASS");
$ASSIGNED_STUDENTS->setLoadUrl("/student/jsonload/");
$ASSIGNED_STUDENTS->setSaveUrl("/student/jsonsave/");

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();

if(!$this->facette) {header("Location: /main/permission/");exit;}

?>

<script>
    Ext.onReady(function() {
        function deleteItem(Id, academicId){
            window.parent.Ext.MessageBox.show({
                title:'<?=WARNING?>'
                ,width: 350
                ,msg:'<?=DELETE_THIS_ITEM?>'
                ,buttons: Ext.MessageBox.YESNO
                ,icon: Ext.MessageBox.QUESTION
                ,fn: function(btn){
                    if (btn === 'yes'){
                        Ext.Ajax.request({
                            url: '/student/jsonsave/'
                            ,method: 'POST'
                            ,params: {cmd: 'jsonRemoveEnrolledStudentFromClass', objectId:Id, academicId:academicId}
                            ,success: function(response, options) {Ext.getCmp('<?=$ASSIGNED_STUDENTS->getObjectId()?>').store.reload();}
                            ,failure: function(response, options) {}
                        });
                    }
                }
                ,icon: Ext.MessageBox.INFO
            });
        }
        function cssStatus(v, p, record){
            return String.format('<div style=\"font-weight:bold;padding:4px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
            );
        }
        function cssText(value, metadata, record){
            return '<div style="font-weight:normal; color:#000; padding: 5px; height: 15px;;">' + value + '</div>';
        }
        <?
        /**
        * Extjs: s.gif
        */
        $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
        $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();

        $LIST_OF_STUDENTS->addReadField("name: 'CODE'");
        $LIST_OF_STUDENTS->addReadField("name: 'STUDENT_SCHOOL_ID'");
        $LIST_OF_STUDENTS->addReadField("name: 'STUDENT_NAME'");
        $LIST_OF_STUDENTS->addReadField("name: 'LASTNAME'");
        $LIST_OF_STUDENTS->addReadField("name: 'FIRSTNAME'");
        $LIST_OF_STUDENTS->addReadField("name: 'GENDER'");
        $LIST_OF_STUDENTS->addReadField("name: 'DATE_BIRTH'");
        $LIST_OF_STUDENTS->addReadField("name: 'CLASS_NAME'");
        $LIST_OF_STUDENTS->addReadField("name: 'GRADE_NAME'");
        $LIST_OF_STUDENTS->addReadField("name: 'RULE_ID'");
        $LIST_OF_STUDENTS->addReadField("name: 'BG_COLOR'");
        $LIST_OF_STUDENTS->addReadField("name: 'BG_COLOR_FONT'");
        $LIST_OF_STUDENTS->addReadField("name: 'STATUS_KEY'");

        switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
            case "VIETNAMESE": $width = 100;break;
            default: $width = 85;break;
        }

        switch(UserAuth::getUserType()){
            case "SUPERADMIN":
            case "ADMIN":
                $LIST_OF_STUDENTS->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
                $LIST_OF_STUDENTS->addColumn("header: '<b>" . CODE_ID . "</b>', align:'left', renderer:cssText, sortable: true, width: 80, dataIndex: 'CODE'");
                $LIST_OF_STUDENTS->addColumn("header: '<b>" . STUDENT_SCHOOL_ID . "</b>', align:'left', renderer:cssText, sortable: true, width: 100, dataIndex: 'STUDENT_SCHOOL_ID'");
            break;
        }

        if(!SchoolDBAccess::displayPersonNameInGrid()){
            $LIST_OF_STUDENTS->addColumn("header: '<b>" . LASTNAME . "</b>', width: 150, renderer:cssText, sortable: false, dataIndex: 'LASTNAME'");
            $LIST_OF_STUDENTS->addColumn("header: '<b>" . FIRSTNAME . "</b>', width: 150, renderer:cssText, sortable: false, dataIndex: 'FIRSTNAME'");
        }else{
            $LIST_OF_STUDENTS->addColumn("header: '<b>" . FIRSTNAME . "</b>', width: 150, renderer:cssText, sortable: false, dataIndex: 'FIRSTNAME'");
            $LIST_OF_STUDENTS->addColumn("header: '<b>" . LASTNAME . "</b>', width: 150, renderer:cssText, sortable: false, dataIndex: 'LASTNAME'");
        }
        $LIST_OF_STUDENTS->addColumn("header: '<b>" . GENDER . "</b>', width: 120, renderer:cssText, sortable: true, dataIndex: 'GENDER'");
        $LIST_OF_STUDENTS->addColumn("header: '<b>" . DATE_BIRTH . "</b>', width: 150, renderer:cssText, sortable: true, dataIndex: 'DATE_BIRTH'");
        $LIST_OF_STUDENTS->addColumn("header: '<b>" . GRADE_CLASS . "</b>', width: 150, renderer:cssText, sortable: true, dataIndex: 'CLASS_NAME'");
        $LIST_OF_STUDENTS->addColumn("header: '<b>" . GRADE . "</b>', width: 150, renderer:cssText, sortable: true, dataIndex: 'GRADE_NAME'");

        $LIST_OF_STUDENTS->isQuickySearch = true;
        $LIST_OF_STUDENTS->isCheckboxSelect = true;

        if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT")){
            $LIST_OF_STUDENTS->addTBarItems("
                tbar.add('-',[{
                    id: 'ADD_ENROLLMENT_RECORD_ID'
                    ,text: '" . APPLY_INTO_LIST_OF_STUDENTS . "'
                    ,iconCls:'icon-disk'
                    ,scope:this
                    ,handler: this.onSelection
                }]);
            ");
        }

        switch(UserAuth::getUserType()){
            case "ADMIN":
            case "SUPERADMIN":
                $LIST_OF_STUDENTS->baseParams = "
                    start:0
                    ,limit:100
                    ,academicId: '" . $this->facette->GUID . "'
                    ,cmd: 'jsonUnassignedStudentsByClass'
                ";

                $LIST_OF_STUDENTS->setSelectionParams("
                    cmd: 'jsonAddStudent2GradeClassSchoolyear'
                    ,academicId: '" . $this->facette->GUID . "'
                ");
                break;
        }

        $LIST_OF_STUDENTS->setSelectionEmbeddedEvents("
            Ext.getCmp('" . $ASSIGNED_STUDENTS->getObjectId() . "').store.reload();
        ");

        $LIST_OF_STUDENTS->addTBarItems("
            tbar.add('->');
        ");

        $LIST_OF_STUDENTS->forceFit = "false";
        $LIST_OF_STUDENTS->renderJS();

        ///////////////////////////////////////////////////////
        /// ASSIGNED STUDENT...
        ///////////////////////////////////////////////////////

        $ASSIGNED_STUDENTS->addReadField("name: 'CODE'");
        $ASSIGNED_STUDENTS->addReadField("name: 'FULL_NAME'");
        $ASSIGNED_STUDENTS->addReadField("name: 'FIRSTNAME'");
        $ASSIGNED_STUDENTS->addReadField("name: 'LASTNAME'");
        $ASSIGNED_STUDENTS->addReadField("name: 'GENDER'");
        $ASSIGNED_STUDENTS->addReadField("name: 'DATE_BIRTH'");
        $ASSIGNED_STUDENTS->addReadField("name: 'PHONE'");
        $ASSIGNED_STUDENTS->addReadField("name: 'EMAIL'");
        $ASSIGNED_STUDENTS->addReadField("name: 'SORTKEY'");
        $ASSIGNED_STUDENTS->addReadField("name: 'BG_COLOR'");
        $ASSIGNED_STUDENTS->addReadField("name: 'BG_COLOR_FONT'");
        $ASSIGNED_STUDENTS->addReadField("name: 'STATUS_KEY'");
        
        $ASSIGNED_STUDENTS->addReadField("name: 'FIRST_ACADEMIC'");
        $ASSIGNED_STUDENTS->addReadField("name: 'SECOND_ACADEMIC'");
        $ASSIGNED_STUDENTS->addReadField("name: 'THIRD_ACADEMIC'");
        $ASSIGNED_STUDENTS->addReadField("name: 'FOURTH_ACADEMIC'");

        switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
            case "VIETNAMESE": $width = 100;break;
            default: $width = 85;break;
        }

        if(UserAuth::getUserType() == "INSTRUCTOR"){
            $ASSIGNED_STUDENTS->addColumn("
                header: '<b>" . SORTKEY . "</b>'
                , width: 80
                , align:'center'
                , sortable: true
                , dataIndex: 'SORTKEY'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'SORTKEY'
                })
            ");
        }

        switch(UserAuth::getUserType()){
            case "SUPERADMIN":
            case "ADMIN":
                $ASSIGNED_STUDENTS->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
                $ASSIGNED_STUDENTS->addColumn("header: '<b>" . CODE_ID . "</b>', width: 80, renderer: cssText, sortable: false, dataIndex: 'CODE'");
                break;
        }

        if(!SchoolDBAccess::displayPersonNameInGrid()){
            $ASSIGNED_STUDENTS->addColumn("
                header: '<b>".LASTNAME."</b>'
                , width: 110
                , sortable: true
                , dataIndex: 'LASTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'LASTNAME'
                })
            ");

            $ASSIGNED_STUDENTS->addColumn("
                header: '<b>".FIRSTNAME."</b>'
                , width: 110
                , sortable: true
                , dataIndex: 'FIRSTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'FIRSTNAME'
                })
            ");

        }else{

            $ASSIGNED_STUDENTS->addColumn("
                header: '<b>".FIRSTNAME."</b>'
                , width: 110
                , sortable: true
                , dataIndex: 'FIRSTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'FIRSTNAME'
                })
            ");

            $ASSIGNED_STUDENTS->addColumn("
                header: '<b>".LASTNAME."</b>'
                , width: 110
                , sortable: true
                , dataIndex: 'LASTNAME'
                , editor: new Ext.form.TextField({
                    allowBlank: false
                    ,name: 'LASTNAME'
                })
            ");
        }

        $ASSIGNED_STUDENTS->addColumn("
            header: '<b>".GENDER."</b>',
            dataIndex: 'GENDER',
            width: 120,
            align: 'left',
            editor: new Ext.form.ComboBox({
                triggerAction:'all'
                ,mode:'local'
                ,store: new Ext.data.JsonStore({
                    autoDestroy: true
                    ,fields: ['chooseValue', 'chooseDisplay']
                    ,data:[{chooseValue: '0', chooseDisplay: '---'},{chooseValue: '1', chooseDisplay: '".MALE."'},{chooseValue: '2', chooseDisplay: '".FEMALE."'}]
                })
                ,valueField: 'chooseValue'
                ,displayField: 'chooseDisplay'
                ,editable: false
                ,listeners: {
                    select: function(combo, record, index) {
                        replaceValue = combo.getValue();
                        var newDisplay = record.get('chooseDisplay');
                        combo.setValue(newDisplay);
                    }
                }
            })
        ");

        $ASSIGNED_STUDENTS->addColumn("
            header: '<b>".DATE_BIRTH."</b>'
            , width: 110
            , sortable: true
            , dataIndex: 'DATE_BIRTH'
            , editor: new Ext.form.TextField({
                allowBlank: false
                ,name: 'DATE_BIRTH'
            })
        ");
        
        $ASSIGNED_STUDENTS->baseParams = "
            start:0
            ,limit:100
            ,classId: '".$this->facette->ID."'
            ,cmd: 'jsonEnrolledStudentsToClass'
        ";
        
        if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT"))
        $ASSIGNED_STUDENTS->addTBarItems("
            tbar.add([{
                id: 'ADD_STUDENTS'
                ,text: '" . ADD_STUDENTS . "'
                ,iconCls:'icon-application_form_add'
                ,scope:this
                ,handler: function(){
                    openWinXType('WinXType','".ADD_STUDENTS."', '".$LIST_OF_STUDENTS->getObjectXType()."', percentWidth(90), percentHeight(80));
                }
            }]);
        ");

        if(UserAuth::getACLValue("STUDENT_SEARCH_EXECUTE_RIGHT")){
            $ASSIGNED_STUDENTS->addTBarItems("
                tbar.add(['-',{
                    text: '" . EXPORT_TO_EXCEL . "'
                    ,id: 'EXPORT_TO_EXCEL'
                    ,iconCls:'icon-page_excel'
                    ,handler: function(){
                        Ext.MessageBox.show({
                            msg: '".SAVING_YOUR_DATA_PLEASE_WAIT."',
                            progressText: 'Saving...',
                            width:300,
                            wait:true,
                            waitConfig: {interval:200},
                            icon:'ext-mb-download'
                        });
                        Ext.Ajax.request({
                            url: '/export/jsonexcel/'
                            ,method: 'POST'
                            ,params:{
                                cmd: 'studentSearch'
                                ,params:{cmd: 'studentSearch',objectId:'STUDENT_LIST_CLASS_ID',CHOOSE_CLASS:'".$this->facette->ID."'}
                            }
                            ,success: function(response, options) {
                                Ext.MessageBox.hide();
                                window.location='/export/openstudentlist/'
                            }
                        });
                    }
                }]);
            ");
        }

        /////////////////////////////////////////
        $ASSIGNED_STUDENTS->addTBarItems("
            tbar.add('->');
        ");

        switch(UserAuth::getUserType()){
            case "ADMIN":
            case "SUPERADMIN":
                $ASSIGNED_STUDENTS->setSaveParams("
                    cmd: 'actionStudentGradeClassSchoolyear'
                    ,academicId: '".$this->facette->GUID."'
                ");
                if($this->facette->ENROLLMENT_TYPE == 1){
                    $ASSIGNED_STUDENTS->setAftereditCallback("
                        XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."');
                        e.record.set('FIRST_ACADEMIC',jsonData.data.FIRST_ACADEMIC);
                        e.record.set('SECOND_ACADEMIC',jsonData.data.SECOND_ACADEMIC);
                        e.record.set('THIRD_ACADEMIC',jsonData.data.THIRD_ACADEMIC);
                        e.record.set('FOURTH_ACADEMIC',jsonData.data.FOURTH_ACADEMIC);
                    ");
                }else{
                    $ASSIGNED_STUDENTS->setAftereditCallback("
                        XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."');
                    ");
                }
                
                $ASSIGNED_STUDENTS->isGridEditing = true;
            break;
        }
        $ASSIGNED_STUDENTS->isQuickySearch = true;
        $ASSIGNED_STUDENTS->isCheckboxSelect = false;
        $ASSIGNED_STUDENTS->forceFit = "false";
        $ASSIGNED_STUDENTS->removeNAME = "STUDENT_NAME";
        $ASSIGNED_STUDENTS->renderJS();
        
        $PENEL_ITEMS = Array();

        $LIST_OF_STUDENTS = "{
            title: '".LIST_OF_STUDENTS."'
            ,id: 'center'
            ,layout: 'fit'
            ,layout: 'card'
            ,activeItem: 0
            ,items: [{xtype: '".$ASSIGNED_STUDENTS->getObjectXType()."'}]
        }";
        $PENEL_ITEMS[] = $LIST_OF_STUDENTS;

        switch($this->facette->ENROLLMENT_TYPE){
            case 1:
                $SEMESTER_ENROLLMENT = "{
                    title: '".SEMESTER_ENROLLMENT."'
                    ,layout: 'fit'
                    ,items:[new Ext.ux.IFrameComponent({ id: 'SEMESTER_ENROLLMENT', url: '/academic/enrollmentbysemester/?camIds=".$this->urlEncryp->encryptedGet("objectId=".$this->facette->ID."")."'})]
                }";
                $PENEL_ITEMS[] = $SEMESTER_ENROLLMENT;
                break;
            case 2:
                $SUBJECT_ENROLLMENT = "{
                    title: '".SUBJECT_ENROLLMENT."'
                    ,layout: 'fit'
                    ,items:[new Ext.ux.IFrameComponent({ id: 'SUBJECT_ENROLLMENT', url: '/academic/enrollmentbysubject/?camIds=".$this->urlEncryp->encryptedGet("objectId=".$this->facette->ID."")."'})]
                }";
                $PENEL_ITEMS[] = $SUBJECT_ENROLLMENT;
                break;
        }
        $CHOOSE_ITEMS = "[".implode(',',$PENEL_ITEMS)."]";
        ?>
                
        viewport = new Ext.Viewport({
            layout: 'fit'
            ,border: false
            ,items:[{
                layout:'fit'
                ,bodyStyle: 'background:<?=CamemisPage::userBgColor();?>;padding:3px'
                ,border: false
                ,items:[{
                    xtype: 'tabpanel'
                    ,tabPosition: 'top'
                    ,plain:true
                    ,activeTab: 0
                    ,enableTabScroll:true
                    ,items:<?=$CHOOSE_ITEMS?>
                }]
            }]
        });
        
        <?

        $CONTEXT_ITEMS = array();

        $DETAIL_INFORMATION = "
        {
            text: '".DETAIL_INFORMATION." &raquo; ' + record.data.FULL_NAME
            ,iconCls:'icon-application_form_magnify'
            ,handler:function(){
                clickOpenPage('center','','/student/studentmonitor/?&target=".camemisId()."&objectId=' + record.data.ID);
            }
        }
        ";

        if(UserAuth::getACLValue("STUDENT_PERSONAL_INFORMATION_READ_RIGHT"))
        $CONTEXT_ITEMS[] = $DETAIL_INFORMATION;
        
        if($this->facette->ENROLLMENT_TYPE != 1){
            $CLASS_TRANSFER = "
            {
                text: '".CLASS_TRANSFER." &raquo; ' + record.data.FULL_NAME
                ,iconCls:'icon-arrow_switch'
                ,handler:function(){
                    openWinIFrame('', '/student/classtransfer/?academicId=".$this->objectId."&objectId=' + record.data.ID + '&target=cancel',500,500);
                }
            }
            ";
           if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT"))
           $CONTEXT_ITEMS[] = $CLASS_TRANSFER;
        }
        
        $STUDENT_REMOVE_FROM_CLASS = "
        {
            text: '".REMOVE." &raquo; ' + record.data.FULL_NAME
            ,iconCls:'icon-delete'
            ,handler:function(){
                deleteItem(record.data.ID, $this->objectId);
            }
        }
        ";

        if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT"))
        $CONTEXT_ITEMS[] = $STUDENT_REMOVE_FROM_CLASS;
        
        $SEND_MESSAGE ="
        {
            text: '".SEND." &raquo; ' + record.data.FULL_NAME
            ,iconCls: 'icon-email_add'
            ,disabled:false
            ,handler: function(){
                clickOpenPage('content','".SEND_MAIL." &raquo; ' + record.data.FULL_NAME, '/communication/tostudent/?page_name=loadstudentlist&objectId=' + record.data.ID)
            }
        }
        ";
        $CONTEXT_ITEMS[] = $SEND_MESSAGE;

        $CHOOSE_CONTEXT_ITEMS = implode(',', $CONTEXT_ITEMS);

        if(UserAuth::getUserType() != "STUDENT"){
            if($CONTEXT_ITEMS){
                $js = "";
                $js .="var grid = Ext.getCmp('".$ASSIGNED_STUDENTS->getObjectId()."');";
                $js .="if (grid) grid.on('cellclick', function(grid, rowIndex, columnIndex, event) {";
                    $js .="var record = grid.store.getAt(rowIndex);";
                    $js .= "if(columnIndex==1 || columnIndex==2){ ";
                        $js .="var contextMenu = new Ext.menu.Menu({";
                            $js .="items: [".$CHOOSE_CONTEXT_ITEMS."]";
                        $js .="});";
                        $js .="contextMenu.showAt(event.xy);";
                        $js .="event.stopEvent();";
                    $js .="}";
                $js .="});";
                echo $js;
            } 
        }
        ?>

   });
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>