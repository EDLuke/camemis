<?
///////////////////////////////////////////////////////////
// @sor veasna
// Date: 12.07.2014
// 
///////////////////////////////////////////////////////////
require_once 'models/UserAuth.php';
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisDynamicCombo.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisTree.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'include/Common.inc.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();    

$ASSIGNED_STUDENTS_GRID = new CamemisGrid("TRAINING", "LIST");
$ASSIGNED_STUDENTS_GRID->setLoadUrl("/enrollment/jsonload/");
$ASSIGNED_STUDENTS_GRID->setSaveUrl("/enrollment/jsonsave/");
$columndata = Utiles::getGridColumnData($ASSIGNED_STUDENTS_GRID->getObjectId());

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();
?>
<script>
    Ext.onReady(function() {
    
        function cssStatus(v, p, record){
            return String.format('<div style=\"font-weight:bold;padding:4px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
            );
        }
        
        function cssText(value, metadata, record){
            var name = record.data.STUDENT_NAME;
            metadata.attr = 'ext:qtip="' + name + '"';
            return '<span style="color:#333; padding:5px; height: 25px;">' + value + '</span>';
        }
        
        function qtipFullname(value, metadata, record){
            
            var isTransfer = record.data.TRANSFER;
            if (isTransfer === 1){
                var statusName = '<?=STUDENT_TRANSFER;?>';
                metadata.attr = 'ext:qtip="' + statusName + '"';
            }
            return '' + value + '';
        }

        <?
        /**
         * Extjs: s.gif
         */
        $js = "";
        $js .= "function selectAction(type){";
        $js .= "var selids = '';";
        $js .= "var seltexts = '';";
        $js .= "var sels = Ext.getCmp('" . $ASSIGNED_STUDENTS_GRID->getObjectId() . "').getSelectionModel().getSelections();";
        $js .= "for( var i = 0; i < sels.length; i++ ) {";
        $js .= "if (i >0) selids += ',';";
        $js .= "selids += sels[i].get('ID');";
        $js .= "if (i >0) seltexts += ',';";
        $js .= "seltexts += sels[i].get('NAME');";
        $js .= "}";
        $js .= "if (sels.length == 0){";
        $js .= "Ext.MessageBox.alert('" . WARNING . "', '" . PLEASE_CHOOSE . "');";
        $js .= "}else{";
        $js .= "Ext.MessageBox.show({";
        $js .= "title:'" . APPLY . "'";
        $js .= ",msg: '" . MSG_ACCEPT_CHOICE . "'";
        $js .= ",buttons: Ext.MessageBox.YESNO";
        $js .= ",fn: function(btn){";
        $js .= "if (btn=='yes'){";
            $js .= "var connection = new Ext.data.Connection();";
            $js .= "connection.request({";
            $js .= "url: '/enrollment/jsonsave/'";
            $js .= ",params: {";
            $js .= "selectionIds: selids";
            $js .= ",transferType: type";
            $js .= ",cmd: 'transferStudentTraining'
                    ,oldTrainingId: '".$this->objectId."'
                    ,newTrainingId: toComboclass.getValue() ";
            $js .= "}";
            $js .= ",method: 'POST'";
            $js .= ",success: function (result) {";
            $js .= "jsonData = Ext.util.JSON.decode(result.responseText);";
            $js .= "if (jsonData) {";
            $js .= "if (jsonData.selectedCount > 0){";
            $js .= "Ext.MessageBox.alert(";
            $js .= "'" . ACTION_STATUS . "'";
            $js .= ",jsonData.selectedCount + ' " . MSG_ACTION_ADDED_ITEM . "'";
            $js .= ",function(btn){";
            $js .= "if (btn == 'ok'){";
            $js .= "Ext.getCmp('" . $ASSIGNED_STUDENTS_GRID->getObjectId() . "').store.reload();";
            $js .= "}";
            $js .= "}";
            $js .= ");";
            $js .= "}";
            $js .= "}";
            $js .= "}";
            $js .= "});";
        $js .= "}";
        $js .= "}";
        $js .= ",icon: Ext.MessageBox.QUESTION";
        $js .= "});";
        $js .= "}";
        $js .= "}";
        echo $js; 
        $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
        $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();
  
       
        $RIGHT_LEVEL_OBJECT = new CamemisDynCombo("TRAINING","LEVEL");
        $RIGHT_LEVEL_OBJECT->setLoadUrl("/training/jsonload/");
        $RIGHT_LEVEL_OBJECT->objectTitle = "<b>".GRADE."</b>";
        $RIGHT_LEVEL_OBJECT->allowBlank = "true";
        $RIGHT_LEVEL_OBJECT->width = 130;
        $RIGHT_LEVEL_OBJECT->varName = "RIGHT_GRADE";
        //$RIGHT_GRADE_OBJECT->setLoadParams("cmd: 'selectComboLevelTraining',searchType:'GRADE'");
        $RIGHT_LEVEL_OBJECT->renderJS();
        
        $OBJECT_TERM = new CamemisDynCombo("TRAINING","TERM");
        $OBJECT_TERM->setLoadUrl('/training/jsonload/');
        $OBJECT_TERM->objectTitle = false;
        $OBJECT_TERM->allowBlank = "true";
        $OBJECT_TERM->width = 150;
        //$OBJECT_TERM->setLoadParams("cmd: 'selectComboTermTraining'");
        $OBJECT_TERM->renderJS();      
       
        $RIGHT_CLASS_OBJECT = new CamemisDynCombo("TRAINING","CLASS");
        $RIGHT_CLASS_OBJECT->setLoadUrl("/training/jsonload/");
        $RIGHT_CLASS_OBJECT->objectTitle = "<b>".GRADE_CLASS."</b>";
        $RIGHT_CLASS_OBJECT->allowBlank = "true";
        $RIGHT_CLASS_OBJECT->width = 130;
        $RIGHT_CLASS_OBJECT->varName = "RIGHT_GRADE_CLASS";
        //$RIGHT_CLASS_OBJECT->setLoadParams("cmd: 'jsonSearchGrade',searchType:'CLASS'");
        $RIGHT_CLASS_OBJECT->renderJS();
      
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'BG_COLOR'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'BG_COLOR_FONT'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STATUS_KEY'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STUDENT_ID'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'CODE'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'STUDENT'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'PHONE'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'EMAIL'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'MOBIL_PHONE'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'DATE_BIRTH'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'GENDER'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'SORTKEY'");
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'TRAINING_NAME'");    
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'LEVEL_NAME'");       
        $ASSIGNED_STUDENTS_GRID->addReadField("name: 'TERM_NAME'");
        
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".STATUS."</b>', align:'center', width: 120, hidden:".checkColHidden(1, $columndata).", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".CODE_ID."</b>', align:'left', renderer: cssText, width: 80, hidden:".checkColHidden(2, $columndata).", sortable: true, dataIndex: 'CODE'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".STUDENT."</b>', align:'left', renderer: cssText, width: 120, hidden:".checkColHidden(3, $columndata).", sortable: true, dataIndex: 'STUDENT'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".DATE_BIRTH."</b>', align:'left', renderer: cssText, width: 120, hidden:".checkColHidden(3, $columndata).", sortable: true, dataIndex: 'DATE_BIRTH'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".GENDER."</b>', align:'left', renderer: cssText, width: 80, hidden:".checkColHidden(4, $columndata).", sortable: true, dataIndex: 'GENDER'");
        $ASSIGNED_STUDENTS_GRID->addColumn("header: '<b>".GRADE_CLASS."</b>', align:'left', renderer: cssText, width: 110, hidden:".checkColHidden(5, $columndata).", sortable: true, dataIndex: 'TRAINING_NAME'");
        
        $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add(['<b>".PROGRAM."<b>',{
                xtype: 'buttongroup'
               ,items:[{
                ".CamemisField::ComboTrainingprograms("",false)."
                }]
            }]);
        ");
        $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add(['<b>".LEVEL."<b>',{
                xtype: 'buttongroup'
               ,items:[{
                width: 80
                ,xtype: '".$RIGHT_LEVEL_OBJECT->getObjectXType()."'
                }]
            }]);
        "); 
        
        $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add(['<b>".TERM."<b>',{
                xtype: 'buttongroup'
               ,items:[{
                width: 80
                ,xtype: '".$OBJECT_TERM->getObjectXType()."'
                }]
            }]);
        ");
  
        $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add(['<b>".GRADE_CLASS."<b>',{
                xtype: 'buttongroup'
               ,items:[{
                width: 80
                ,xtype: '".$RIGHT_CLASS_OBJECT->getObjectXType()."'
                }]
            }]);
        "); 
        
      /* $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add('->',[{
                id: 'APLY_ID'
                ,text: '<b>" . APPLY . "</b>'
                ,iconCls:'icon-group_add'
                ,scope:this
                ,handler: this.onSelection
            }]);
        ");*/
        
        $ASSIGNED_STUDENTS_GRID->addTBarItems("
            tbar.add('->',[{
                id: 'APLY_ID'
                ,text: '<b>" . APPLY . "</b>'
                ,iconCls:'icon-group_add'
                ,scope:this
                ,menu:[{
                        text: '" . TRANSFER . "'
                        ,iconCls:'icon-application_cascade'
                        ,handler: function(){
                            selectAction('TRANSFER');
                        } 
                     
                    },{
                        text: '" . UPGRADE . "'
                        ,iconCls:'icon-application_double'
                        ,handler: function(){
                            selectAction('UPGRADE');    
                        }
                    },{
                        text: '" . DOWNGRADE . "'
                        ,iconCls:'icon-application_double'
                        ,handler: function(){
                            selectAction('DOWNGRADE');    
                        }
                    }
                ]
            }]);
        ");
        
        $ASSIGNED_STUDENTS_GRID->baseParams = "
            start:0
            ,limit:100
            ,objectId: '".$this->objectId."'
            ,cmd: 'jsonListStudentTraining'
        "; 
        
        $ASSIGNED_STUDENTS_GRID->setSelectionParams("
            cmd: 'transferStudentTraining'
            ,oldTrainingId: '".$this->objectId."'
            ,newTrainingId: toComboclass.getValue()      
        ");
        
        $ASSIGNED_STUDENTS_GRID->setSelectionEmbeddedEvents("
            Ext.getCmp('".$ASSIGNED_STUDENTS_GRID->getObjectId()."').store.reload();
        ");
       
        $ASSIGNED_STUDENTS_GRID->loadMask = false; 
        $ASSIGNED_STUDENTS_GRID->isCheckboxSelect = true;
        $ASSIGNED_STUDENTS_GRID->isObjectDefaultOnLoad = true;
        $ASSIGNED_STUDENTS_GRID->forceFit = "false";
        $ASSIGNED_STUDENTS_GRID->renderJS();

        ?>
        viewport = new Ext.Viewport({
            layout: 'fit'
            ,border: false
            ,items:[{
                border: false
                ,xtype: 'panel'
                ,layout: 'card'
                ,id: 'panel'
                ,activeItem: 0
                ,items:[{
                    border: false
                    ,layout: 'fit'
                    ,items: [{xtype: '<?=$ASSIGNED_STUDENTS_GRID->getObjectXType();?>'}]
                }]
            }]
        });
        
        var toComboProgram = Ext.getCmp('PROGRAM_ID'); 
        var toCombolevel = Ext.getCmp('<?=$RIGHT_LEVEL_OBJECT->getObjectId();?>');
        var toComboterm = Ext.getCmp('<?=$OBJECT_TERM->getObjectId();?>');
        var toComboclass = Ext.getCmp('<?=$RIGHT_CLASS_OBJECT->getObjectId();?>');
        if(toComboProgram){
           toComboProgram.on('select', function() {
                toCombolevel.store.baseParams={
                    cmd: 'selectComboLevelTraining'
                    ,program:toComboProgram.getValue()
                };
                toCombolevel.store.reload();
                
            });
       }
       
       if(toCombolevel){
            toCombolevel.on('select', function() {
                toComboterm.store.baseParams={
                    cmd: 'selectComboTermTraining'
                    ,level:toCombolevel.getValue()
                };
                toComboterm.store.reload();
                
            });    
       }
       if(toComboterm){
            toComboterm.on('select', function() {
                toComboclass.store.baseParams={
                    cmd: 'selectComboClassTraining'
                    ,term:toComboterm.getValue()
                };
                toComboclass.store.reload();
                
            });     
       }
       
       if(toComboclass){
            toComboclass.on('select', function() {
                Ext.getCmp('<?=$ASSIGNED_STUDENTS_GRID->getObjectId()?>').store.baseParams = {
                     start:0
                     ,limit:100
                    ,objectId: '<?=$this->objectId?>'
                    ,selectedTrainingId: toComboclass.getValue()
                    ,cmd: 'jsonListStudentTraining'
                };
                Ext.getCmp('<?=$ASSIGNED_STUDENTS_GRID->getObjectId()?>').store.load();
            });        
       }
        
       Ext.state.Manager.setProvider(new Ext.state.HttpProvider({url: '/dataset/jsonsave/'}));
    });
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>