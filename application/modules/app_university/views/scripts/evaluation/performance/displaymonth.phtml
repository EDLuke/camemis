<?
////////////////////////////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 18.04.2014
// Am Stollheen 18, 55120 Mainz, Germany
////////////////////////////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisTree.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisBar.php';
require_once 'include/Common.inc.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$OBJECT_GRID = new CamemisGrid("SUBJECT_EVALUATION", "LIST");
$OBJECT_GRID->setLoadUrl('/evaluation/jsonload/');
$OBJECT_GRID->setSaveUrl('/evaluation/jsonsave/');

$academicObject = AcademicDBAccess::findGradeFromId($this->academicId);

if(!$academicObject) {header("Location: /main/permission/");exit;}

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();

$GRADING_TYPE = $academicObject->GRADING_TYPE?"LETTER_GRADE":"ASSESSMENT";

$monthyear = isset($_GET["monthyear"])? addText($_GET["monthyear"]):"";

$setParams = "";
$setParams .= "&monthyear=".$monthyear."";
$setParams .= "&academicId=".$this->academicId."";
$setParams .= "&section=1";

////////////////////////////////////////////////////////////////////////////////
$PERFORMANCE = new AcademicPerformances();
$PERFORMANCE->setAcademicId($this->academicId);
$PERFORMANCE->setMonthYear($monthyear);
$PERFORMANCE->setSection(1);
$PERFORMANCE->setTarget("MONTH");
$PERFORMANCE->actionCalculationPerformanceEvaluation();
////////////////////////////////////////////////////////////////////////////////

$entries = GradeSubjectDBAccess::getListSubjectsFromAcademic($this->academicId, $this->term);

?>
<script>
    
Ext.onReady(function() {
    
    Ext.Ajax.timeout = 600000;
    
    function cssStatus(v, p, record){
        return String.format('<div style=\"font-weight:normal;padding:4px;height:18px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
        );
    }
    
    function cssDefault(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:normal; color:#000;padding:4px;height:18px;">' + value + '</div>';
    }
    
    function cssNumber(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:normal; color:#000; padding:4px;height:18px;background:#b8cfee">' + value + '</div>';
    }
    
    function cssHeader0(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:normal; color:#000; padding:4px;height:18px;background:#F3F3F3">' + value + '</div>';
    }
    
    function cssHeader1(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:normal; color:#000; padding:4px;height:18px;background:#FFFFCC">' + value + '</div>';
    }
    
    <?
    ////////////////////////////////////////////////////////////////////////////
    $comboEditor = "
        new Ext.form.ComboBox({
            triggerAction:'all'
            ,mode:'local'
            ,store: new Ext.data.JsonStore({
                autoDestroy: true
                ,fields: ['chooseValue', 'chooseDisplay']
                ,data:[".AssessmentConfig::comboGradingSystem(1, $academicObject)."]
            })
            ,valueField: 'chooseValue'
            ,displayField: 'chooseDisplay'
            ,editable: false
            ,listeners: {
                select: function(combo, record, index) {
                    replaceValue = combo.getValue();
                    var newDisplay = record.get('chooseDisplay');
                    combo.setValue(newDisplay);
                    comboValue = replaceValue;
                }
            }
        })
    ";
    ////////////////////////////////////////////////////////////////////////////
    $OBJECT_GRID->addReadField("name: 'CODE'");
    $OBJECT_GRID->addReadField("name: 'STUDENT'");  
    $OBJECT_GRID->addReadField("name: 'RANK'");   
    $OBJECT_GRID->addReadField("name: 'BG_COLOR'");
    $OBJECT_GRID->addReadField("name: 'BG_COLOR_FONT'");
    $OBJECT_GRID->addReadField("name: 'STATUS_KEY'");
    $OBJECT_GRID->addReadField("name: 'TOTAL_RESULT'");   
    $OBJECT_GRID->addReadField("name: 'TOTAL_ASSESSMENT'");
    $OBJECT_GRID->addReadField("name: 'GPA'");
    $OBJECT_GRID->addReadField("name: 'GRADE_POINTS'");  
    
    if($entries){
        foreach($entries as $value){
            if($value->SUBJECT_ID){
                $OBJECT_GRID->addReadField("name: '".$value->SUBJECT_ID."'");
            }
        }
    }
    
    switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
        case "VIETNAMESE": $width = 100;break;
        default: $width = 85;break;
    }
    
    $OBJECT_GRID->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.",renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
    if (UserAuth::isSuperAdmin()) $OBJECT_GRID->addColumn("header: '<b>".CODE_ID."</b>', width: 80,renderer: cssDefault, dataIndex: 'CODE'");
    $OBJECT_GRID->addColumn("header: '<b>".STUDENT."</b>', width: 150,renderer: cssDefault, dataIndex: 'STUDENT'");
    
    if($academicObject->DISPLAY_GPA){
        $OBJECT_GRID->addColumn("header: '<b>".GPA."</b>', width: 80, align: 'center', sortable: true, renderer:cssNumber, dataIndex: 'GPA'");
    }
            
    switch(UserAuth::getUserType()){
        case "SUPERADMIN":
        case "ADMIN":
        case 'INSTRUCTOR':
        case 'TEACHER':
             $OBJECT_GRID->addColumn("
                header: '<b>".constant($GRADING_TYPE)."</b>'
                , width: 120
                , align: 'center'
                , sortable: true
                , dataIndex: 'TOTAL_ASSESSMENT'
                , renderer:cssNumber  
                , editor: ".$comboEditor."
                
            ");
            break;
         case 'STUDENT':
            $OBJECT_GRID->addColumn("
                header: '<b>".constant($GRADING_TYPE)."</b>'
                , width: 120
                , align: 'center'
                , sortable: true
                , dataIndex: 'TOTAL_ASSESSMENT'
                , renderer:cssNumber
            ");
        break;  
    }
    
    if(!$academicObject->EVALUATION_OPTION){
        $OBJECT_GRID->addColumn("header: '<b>".RANK."</b>', align: 'center', width: 80,sortable: true, renderer: cssNumber, dataIndex: 'RANK'");
    }else{
        $OBJECT_GRID->addColumn("
            header: '<b>".RANK."</b>'
            , width: 120
            , align: 'center'
            , sortable: true
            , dataIndex: 'RANK'
            , renderer:cssNumber
            , editor: new Ext.form.NumberField({
                allowBlank: false
                ,name: 'RANK'   
            })
            
        ");
    }
    
    if($academicObject->DISPLAY_GRADE_POINTS){
        $OBJECT_GRID->addColumn("header: '<b>".GRADE_POINTS."</b>', width: 80, align: 'center', sortable: true, renderer:cssNumber, dataIndex: 'GRADE_POINTS'");
    }
    $OBJECT_GRID->addColumn("header: '<b>".AVERAGE."</b>', align: 'center', width: 80,sortable: true, renderer: cssNumber, dataIndex: 'TOTAL_RESULT'");
    
    if($entries){
        $i=0;
        foreach($entries as $value){
            if($value->SUBJECT_ID){
                $cssValue = $i % 2;
                $SHORT = $value->SUBJECT_SHORT?$value->SUBJECT_SHORT:SHORT."?";
                $OBJECT_GRID->addColumn("header: '<b>".$SHORT."</b>', align: 'center', width: 70, renderer:cssHeader".$cssValue.", dataIndex: '".$value->SUBJECT_ID."'");
                $i++;
            }
        }
    }
    
    switch(UserAuth::getUserType()){
        case "SUPERADMIN":
        case "ADMIN":
        case 'INSTRUCTOR':
        case 'TEACHER':
            $OBJECT_GRID->addTBarItems("
                tbar.add('-',[{
                    text: '<b>" . REFRESH . "</b>'
                    ,iconCls:'icon-reload'
                    ,handler: function(){
                        ".CamemisPage::setRequestURI(false)."
                    }
                }]);
            ");
        break;
    } 
     
//    $setActionPareams = $setParams;
//    $setActionPareams .= "&target=MONTH";
//    $OBJECT_GRID->addTBarItems("
//        tbar.add(['-',{
//            text: '<b>" . CALCULATION . "</b>'
//            ,iconCls:'icon-calculator_add'
//            ,handler: function(){
//                Ext.MessageBox.show({
//                    msg: '".SAVING_YOUR_DATA_PLEASE_WAIT."',
//                    progressText: 'Saving...',
//                    width:300,
//                    wait:true,
//                    waitConfig: {interval:200},
//                    icon:'ext-mb-download'
//                });
//                Ext.Ajax.request({
//                    url: '/evaluation/jsonsave/'
//                    ,method: 'POST'
//                    ,params:{
//                        cmd: 'xxxx'
//                        ,camIds: '".$this->urlEncryp->encryptedGet($setActionPareams)."'
//                    }
//                    ,success: function() {
//                        Ext.MessageBox.hide();
//                        Ext.getCmp('".$OBJECT_GRID->getObjectId()."').store.load();
//                    }
//                });
//            }
//        }]);
//    ");
    
    //Task for Ratha
    $OBJECT_GRID->addTBarItems("
        tbar.add('-',[{
            text: '<b>" . EXPORT_TO_EXCEL . "</b>'
            ,disabled:true
            ,iconCls:'icon-page_excel'
            ,handler: function(){
                
            }
        }]);
    ");
    
    $OBJECT_GRID->baseParams = "
        start:0
        ,limit:100
        ,cmd: 'jsonListAcademicPerformanceFromMonth'
        ,camIds: '".$this->urlEncryp->encryptedGet($setParams)."'
    ";
    
    $OBJECT_GRID->setSaveParams("
        cmd: 'jsonActionStudentAcademicPerformance'
        ,camIds: '".$this->urlEncryp->encryptedGet($setParams)."'
        ,comboValue:comboValue
    ");
    $OBJECT_GRID->setAftereditCallback("
        XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."'); 
    ");
    
    $OBJECT_GRID->isObjectDefaultOnLoad = true;
    $OBJECT_GRID->isGridEditing = true;
    $OBJECT_GRID->forceFit = "false";
    $OBJECT_GRID->renderJS();
    ?>
    viewport = new Ext.Viewport({
        layout: 'fit'
        ,border: false
        ,items:[{
            border: false
            ,id:'content'
            ,layout: 'card'
            ,activeItem: 0
            ,items:[{xtype: '<?=$OBJECT_GRID->getObjectXtype();?>'}]
        }]
    });
    <?
    
    $TEACHER_COMMENTS ="{";
    $TEACHER_COMMENTS .="text: '".TEACHER_COMMENTS." &raquo; ' + record.data.STUDENT";
    $TEACHER_COMMENTS .=",iconCls: 'icon-comments_add'";
    $TEACHER_COMMENTS .=",disabled:false";
    $TEACHER_COMMENTS .=",handler: function(){";
    $TEACHER_COMMENTS .="openWinIFrame(record.data.STUDENT,'/evaluation/teachercomment/?camIds=".$this->urlEncryp->encryptedGet($setParams)."&studentId=' + record.data.ID, 600,percentHeight(85));";
    $TEACHER_COMMENTS .="}";
    $TEACHER_COMMENTS .="}";
    
    $CONTEXTMENU_ITEMS[] = $TEACHER_COMMENTS;
    
    $GRADEBOOK ="{";
    $GRADEBOOK .="text: '".GRADEBOOK." &raquo; ' + record.data.STUDENT";
    $GRADEBOOK .=",iconCls: 'icon-book'";
    $GRADEBOOK .=",disabled:false";
    $GRADEBOOK .=",handler: function(){";
    $GRADEBOOK .="openWinIFrame(record.data.STUDENT,'/evaluation/gradebooktraditional/?camIds=".$this->urlEncryp->encryptedGet($setParams)."&studentId=' + record.data.ID, percentWidth(70),percentHeight(85));";
    $GRADEBOOK .="}";
    $GRADEBOOK .="}";
    
    $CONTEXTMENU_ITEMS[] = $GRADEBOOK;
    
    $CHOOSE_CONTEXTMENU_ITEMS = implode(",",$CONTEXTMENU_ITEMS);
    if($CONTEXTMENU_ITEMS){
        $js = "";
        $js .="var grid = Ext.getCmp('".$OBJECT_GRID->getObjectId()."');";
        $js .="if (grid) grid.on('cellclick', function(grid, rowIndex, columnIndex, event) {";
            $js .="if(columnIndex<=2){";
                $js .="var record = grid.store.getAt(rowIndex);";
                $js .="var contextMenu = new Ext.menu.Menu({";
                $js .="items: [".$CHOOSE_CONTEXTMENU_ITEMS."]";
                $js .="});";
                $js .="event.stopEvent();";
                $js .="contextMenu.showAt(event.xy);"; 
            $js .="}";
        $js .="});";
        echo $js;
    }
    ?>
    Ext.state.Manager.setProvider(new Ext.state.HttpProvider({url: '/dataset/jsonsave/'}));
});
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>