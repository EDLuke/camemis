<?
///////////////////////////////////////////////////////////
// @chungveng
// Date: 30-12-2013
///////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisTree.php';
require_once 'include/Common.inc.php';
require_once 'utiles/Utiles.php';
require_once 'clients/CamemisViewport.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();
$OBJECT_GRID = new CamemisGrid("TRAINING", "LIST");
$OBJECT_GRID->setLoadUrl('/training/jsonload/');
$OBJECT_GRID->setSaveUrl('/training/jsonsave/');

$VIEWPORT = new CamemisViewport();

$CHECK = TrainingDBAccess::checkTrainingClass($this->date, $this->trainingId);
$academicObject = TrainingDBAccess::findTrainingFromId($this->trainingId);
$subjectObject = TrainingSubjectDBAccess::findSubjectTraining($this->subjectId, $academicObject);

$ENTRIES_ASSIGNMENT = TrainingSubjectDBAccess::getTrainingAssignments(
    $this->subjectId
    , $this->trainingId
);

$setParams = "";
$setParams .= "&subjectId=".$this->subjectId."";
$setParams .= "&trainingId=".$this->trainingId."";
$setParams .= "&assignmentId=".$this->assignmentId."";
$setParams .= "&date=".$this->date."";

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();
?>

<script>
var chooseId;
var chooseStudent;
var setnewValue; 
var comment;
Ext.onReady(function() {
    
    function cssStatus(v, p, record){
        return String.format('<div style=\"font-weight:bold;padding:4px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
        );
    }
    
    function cssDefault(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:normal; color:#333; padding: 5px; height: 15px; background:#FFF;">' + value + '</div>';
    }
    
    function cssNumber(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:bold; color:#333; background:#FFF;">' + value + '</div>';
    }
    <?
    
     $js = "";
        $js .="function actionTeacherComments(btn,text){";
            $js .="if(btn=='ok'){";
                $js .="Ext.Ajax.request({";
                    $js .="url: '/training/jsonsave/'";
                    $js .=",method: 'POST'";
                    $js .=",params:{";
                        $js .="cmd: 'jsonActionContentTeacherScoreInputDateTraining'";
                        $js .=",camIds: '".$this->urlEncryp->encryptedGet($setParams)."'";
                        $js .=",studentId:chooseId";
                        $js .=",name:text";
                    $js .="}";
                    $js .=",success: function(response, options) {";
                        $js .="Ext.getCmp('".$OBJECT_GRID->getObjectId()."').store.load();";
                    $js .="}";
                $js .="});";
            $js .="}";
        $js .="}";
    $js .="";
    
    $js .="function deleteAll(btn){";
        $js .="Ext.Ajax.request({";
            $js .="url: '/training/jsonsave/'";
            $js .=",method: 'POST'";
            $js .=",params:{";
                $js .="cmd: 'jsonActionDeleteAllScoresAssignmentTraining'";
                $js .=",camIds: '".$this->urlEncryp->encryptedGet($setParams)."'";
            $js .="}";
            $js .=",success: function() {";
                $js .="Ext.getCmp('".$OBJECT_GRID->getObjectId()."').store.load();";
                $js .="window.parent.Ext.getCmp('TREE.ASSIGNMENT_LIST_ID').root.reload();";
                $js .="window.parent.Ext.getCmp('center').getLayout().setActiveItem(0);";
            $js .="}";
        $js .="});";
    $js .="}";
    
    $js .="function deleteSingle(btn){";
        $js .="if(btn=='yes'){";
            $js .="Ext.Ajax.request({";
                $js .="url: '/training/jsonsave/'";
                $js .=",method: 'POST'";
                $js .=",params:{";
                    $js .="cmd: 'jsonActionDeleteSingleScoreTraining'";
                    $js .=",camIds: '".$this->urlEncryp->encryptedGet($setParams)."'";
                    $js .=",studentId:chooseId";
                $js .="}";
                $js .=",success: function(response, options) {";
                    $js .="Ext.getCmp('".$OBJECT_GRID->getObjectId()."').store.load();";
                $js .="}";
            $js .="});";
        $js .="}";
    $js .="}";    
    
    echo $js;
    
    $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
    $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();
    
    $EDITOR = "new Ext.form.TextField({allowBlank: false})";
    $OBJECT_GRID->addCellRenderer("
        function renderText(v, p, record, rowIndex){
            var str = '<span class=spanText>' + v + '</span>';
            return str;
        }
    ");
    
    $OBJECT_GRID->addReadField("name: 'STUDENT_ID'");
    $OBJECT_GRID->addReadField("name: 'CODE'");
    $OBJECT_GRID->addReadField("name: 'STUDENT'");
    $OBJECT_GRID->addReadField("name: 'AVERAGE'");
    $OBJECT_GRID->addReadField("name: 'ASSESSMENT'");
    $OBJECT_GRID->addReadField("name: 'SCORE'");
    $OBJECT_GRID->addReadField("name: 'BG_COLOR'");
    $OBJECT_GRID->addReadField("name: 'BG_COLOR_FONT'");
    $OBJECT_GRID->addReadField("name: 'STATUS_KEY'");
    $OBJECT_GRID->addReadField("name: 'GENDER'");
    $OBJECT_GRID->addReadField("name: 'TEACHER_COMMENTS'");
    
     switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
        case "VIETNAMESE": $width = 125;break;
        default: $width = 85;break;
    }
    if($ENTRIES_ASSIGNMENT){
        foreach($ENTRIES_ASSIGNMENT as $key=>$value){
            $OBJECT_GRID->addReadField("name: 'ASSIGNMENT_".$value->ID."'");
        }
    }
    $OBJECT_GRID->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY'");
    $OBJECT_GRID->addColumn("header: '<b>".CODE_ID."</b>', width: 80, renderer: cssDefault, dataIndex: 'CODE'");   
    $OBJECT_GRID->addColumn("header: '<b>" . STUDENT . "</b>', align:'left', renderer: cssDefault, width: 200, dataIndex: 'STUDENT'");
    $OBJECT_GRID->addColumn("header: '<b>".GENDER."</b>', width: 100, renderer:cssDefault, sortable: true, dataIndex: 'GENDER'");
   
    switch($subjectObject->SCORE_TYPE){         
       case 1:      
           $OBJECT_GRID->addColumn("
               header: '<b>".SCORE."</b>'
               , width: 100
               , sortable: true       
               , align:'right'
               , renderer:cssNumber
               , dataIndex: 'SCORE'
               , editor: new Ext.form.NumberField({
                   allowBlank: false
                   ,minValue: 0
                   //,maxValue: $subjectObject->SCORE_MAX
                   ,name: 'SCORE'   
               })      

           ");  
           break; 
       case 2:

           $STORE_DATA = array();
           $OBJECT_GRID->addColumn("
               header: '<b>".SCORE."</b>'
               , width: 100
               , sortable: true
               , align:'center'
               , renderer:cssNumber
               , dataIndex: 'SCORE'
               , editor: new Ext.form.ComboBox({
                   triggerAction:'all'
                   ,mode:'local'
                   ,store: new Ext.data.JsonStore({
                           autoDestroy: true
                           ,fields: ['chooseValue', 'chooseDisplay']
                           ,data:[".implode($STORE_DATA)."]
                       })
                       ,valueField: 'chooseValue'
                       ,displayField: 'chooseDisplay'
                       ,editable: false
                       ,listeners: {
                           select: function(combo, record, index) {
                           replaceValue = combo.getValue();
                           var newDisplay = record.get('chooseDisplay');
                           combo.setValue(newDisplay);
                           setnewValue = newDisplay;
                       }
                   }
               })
           ");
           break;
    }
    
    $OBJECT_GRID->addColumn("header: '<b>".TEACHER_COMMENTS."</b>', width: 200, sortable: false, align:'center', dataIndex: 'TEACHER_COMMENTS'");
                     
    $OBJECT_GRID->isObjectDefaultOnLoad = true;
    $OBJECT_GRID->baseParams = "
        start:0
        ,limit:100
        ,cmd: 'jsonStudentSubjectAssignment'
        ,camIds: '".$this->urlEncryp->encryptedGet($setParams)."'
    ";
                
    $OBJECT_GRID->setSaveParams("
        cmd: 'actionTrainingStudentAssignment'
        ,camIds: '".$this->urlEncryp->encryptedGet($setParams)."'
        ,setnewValue:'setnewValue'
    ");
    $OBJECT_GRID->addTBarItems("
        tbar.add([{
            text: '".CANCEL."'
            ,id: 'CANCEL_ID'
            ,formBind:true
            ,iconCls:'icon-cancel'
            ,scope:this
            ,handler: function(){
                window.parent.Ext.getCmp('center').getLayout().setActiveItem(0);
            }
        }]);
    ");
    $OBJECT_GRID->addTBarItems("tbar.add('-');");
    $OBJECT_GRID->addTBarItems("
        tbar.add([{
            text: '" . REMOVE_ALL . "'
            ,disabled: false
            ,iconCls:'icon-delete'
            ,handler: function(){
                Ext.MessageBox.confirm('<b>" . CONFIRMATION . "</b>', '" . DELETE_THIS_ITEM . "', deleteAll);
            }
        }]);
    ");
    
    $OBJECT_GRID->setAftereditCallback("
        XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."'); 
        myTree = window.parent.Ext.getCmp('TREE.ASSIGNMENT_LIST_ID');
        myNode = myTree.getNodeById('".$this->assignmentId."');
        myNode.reload();
        myNode.expand(true, false); 
    ");
   
    $OBJECT_GRID->isGridEditing = true;
    $OBJECT_GRID->isObjectDefaultOnLoad = true;
    $OBJECT_GRID->forceFit = "false";
    $OBJECT_GRID->renderJS();
    
    if($CHECK){
        $VIEWPORT = "[{xtype: '".$OBJECT_GRID->getObjectXtype()."'}]";
    }else{
        $VIEWPORT = "
        [{
            layout: 'fit'
            ,border: false
            ,tbar:[{
                text: '".CANCEL."'
                ,id: 'CANCEL_ID'
                ,formBind:true
                ,iconCls:'icon-cancel'
                ,scope:this
                ,handler: function(){
                    window.parent.Ext.getCmp('center').getLayout().setActiveItem(0);
                }
            }]
            ,contentEl: 'initCenter'
        }]";
    }
    ?>
    viewport = new Ext.Viewport({
        layout: 'fit'
        ,border: false
        ,items:[{
            layout:'fit'
            ,border: false
            ,items:<?=$VIEWPORT?>
        }]
    });
        
    var grid = Ext.getCmp('<?=$OBJECT_GRID->getObjectId()?>');
   
    if (grid) grid.on('cellclick', function(grid, rowIndex, columnIndex, event) {
        var record = grid.store.getAt(rowIndex);
        chooseId = grid.store.getAt(rowIndex).data.ID;
        chooseStudent = grid.store.getAt(rowIndex).data.STUDENT;
        score = grid.store.getAt(rowIndex).data.SCORE;
        
        if(score){
            var status = false;
        }else{
            var status = true;
        }
        if(columnIndex==6){  
            <?
            $CONTEXTMENU_ITEMS = Array();
            $TEACHER_COMMENT ="{";
            $TEACHER_COMMENT .="text: '".TEACHER_COMMENTS." &raquo; ' + record.data.STUDENT";
            $TEACHER_COMMENT .=",iconCls: 'icon-comment_edit'";
            $TEACHER_COMMENT .=",disabled:status";
            $TEACHER_COMMENT .=",handler: function(){"; 
                $TEACHER_COMMENT .= "Ext.MessageBox.show({";
                    $TEACHER_COMMENT .= "title:chooseStudent,";
                    $TEACHER_COMMENT .= "msg: '".TEACHER_COMMENTS.":',";
                    $TEACHER_COMMENT .= "width:350,value:grid.store.getAt(rowIndex).data.TEACHER_COMMENTS,";
                    $TEACHER_COMMENT .= "buttons: Ext.MessageBox.OKCANCEL,";
                    $TEACHER_COMMENT .= "multiline: true,";
                    $TEACHER_COMMENT .= "fn: actionTeacherComments,";
                $TEACHER_COMMENT .= "});";
            $TEACHER_COMMENT .="}";
            $TEACHER_COMMENT .="}";     
            $CONTEXTMENU_ITEMS[] = $TEACHER_COMMENT;

            $DELETE_SCORE ="{";
            $DELETE_SCORE .="text: '".SCORE." &raquo; ' + record.data.STUDENT";
            $DELETE_SCORE .=",iconCls: 'icon-delete'";
            $DELETE_SCORE .=",disabled:status";
            $DELETE_SCORE .=",handler: function(){"; 
            $DELETE_SCORE .="Ext.MessageBox.confirm('<b>" . CONFIRMATION . "</b>', '" . DELETE_THIS_ITEM . "', deleteSingle);";
            $DELETE_SCORE .="}";
            $DELETE_SCORE .="}";
            $CONTEXTMENU_ITEMS[] = $DELETE_SCORE;

            $CHOOSE_CONTEXTMENU_ITEMS = implode(",", $CONTEXTMENU_ITEMS);
            $html ="";
            $html ."if (columnIndex ==6){";
                $html .="var contextMenu = new Ext.menu.Menu({";
                    $html .="items: [".$CHOOSE_CONTEXTMENU_ITEMS."]";
                $html .="});";
                $html .="event.stopEvent();";
                $html .="contextMenu.showAt(event.xy);";
            $html ."}";
            echo $html;
        ?>
        }
    });
});
</script>
<div id="initCenter" class="x-hidden" style="border:0px silver solid;margin:30px;padding:8px;height:140px">
    <h1 class="headerError"><?=CHECK_TEACHING_SESSION;?>...!</h1>
</div>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>