<?
///////////////////////////////////////////////////////////
// @sor veasna 
// Date: 10.03.2013
// Am Stollheen 18, 55120 Mainz, Germany
///////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisTree.php';
require_once 'include/Common.inc.php';
require_once 'models/app_university/subject/TrainingSubjectDBAccess.php';
require_once 'utiles/Utiles.php';
require_once 'clients/CamemisViewport.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();
$OBJECT_GRID = new CamemisGrid("TRAINING", "LIST");
$OBJECT_GRID->setLoadUrl('/training/jsonload/');
$OBJECT_GRID->setSaveUrl('/training/jsonsave/');

$VIEWPORT = new CamemisViewport();

$subjectId = isset($_GET["subjectId"])? (int)$_GET["subjectId"]:"";
$trainingId = isset($_GET["objectId"])?addText($_GET["objectId"]):"";
$studentId = isset($_GET["studentId"])? addText($_GET["studentId"]):"";
$teacherId = isset($_GET["teacherId"])?addText($_GET["teacherId"]):"";

$ENTRIES_ASSIGNMENT = TrainingSubjectDBAccess::getTrainingAssignments(
    $subjectId
    , $trainingId
);

/* @soda */ 
$params["objectId"] = $trainingId;
$params["subjectId"] = $subjectId;
$params["studentId"] = $studentId;

$score = StudentTrainingDBAccess::jsonStudentSubjectAssignment($params, false);
$option = "false";
$sum = 0;
if($score){
    foreach($score as $value){  
        foreach ($ENTRIES_ASSIGNMENT as $key => $assignment) {
            $sum+= $value['ASSIGNMENT_'.$assignment->ID];
        } 
    }
    if($sum == 0){
         $option = "false";
    }else{
         $option = "true";
    }
}
/* --- */

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();
?>

<script>
Ext.onReady(function() {
    
    function cssFirst(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:bold; color: #333; padding: 5px; height:15px; background:#fff4bf;">' + value + '</div>';
    }
    
    function cssSecond(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:bold; color: #141414; padding: 5px; height:15px; background:#D1DDEF;">' + value + '</div>';
    }
    
    function cssDefault(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:bold; color: #FFFFFF; padding: 5px; height:15px; background:#2fd5eb;">' + value + '</div>';
    }
    
    <?
    $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
    $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();
    
    $EDITOR = "new Ext.form.TextField({allowBlank: false})";
    $OBJECT_GRID->addCellRenderer("
        function renderText(v, p, record, rowIndex){
            var str = '<span class=spanText>' + v + '</span>';
            return str;
        }
    ");
    
    $OBJECT_GRID->addReadField("name: 'STUDENT_ID'");
    $OBJECT_GRID->addReadField("name: 'CODE'");
    $OBJECT_GRID->addReadField("name: 'STUDENT'");
    $OBJECT_GRID->addReadField("name: 'AVERAGE'");
    $OBJECT_GRID->addReadField("name: 'ASSESSMENT'");
    
    if($ENTRIES_ASSIGNMENT){
        foreach($ENTRIES_ASSIGNMENT as $key=>$value){
            $OBJECT_GRID->addReadField("name: 'ASSIGNMENT_".$value->ID."'");
        }
    }
    
    $OBJECT_GRID->addColumn("header: '<b>" . STUDENT . "</b>', align:'left', renderer: cssDefault, width: 200, dataIndex: 'STUDENT'");
       
    if($ENTRIES_ASSIGNMENT){
    
        foreach($ENTRIES_ASSIGNMENT as $key=>$value){
            if(($key % 2) == 1){
                $RENDERER = "cssFirst";
            }else{
                $RENDERER = "cssSecond";
            }
            switch(UserAuth::getUserType()){
                case "SUPERADMIN":
                case "ADMIN":
                case 'INSTRUCTOR':
                case 'TEACHER':
                    $OBJECT_GRID->addColumn("header: '<b>" . $value->NAME . "</b>', editor: ".$EDITOR.",align:'center', renderer: ".$RENDERER.", width: 110, dataIndex: 'ASSIGNMENT_".$value->ID."'");
                    break;
                case 'STUDENT':
                    $OBJECT_GRID->addColumn("header: '<b>" . $value->NAME . "</b>', align:'center', renderer: ".$RENDERER.", width: 110, dataIndex: 'ASSIGNMENT_".$value->ID."'");
                    break;
            }
        }
    }
    
    $OBJECT_GRID->addColumn("header: '<b>" . AVERAGE . "</b>', align:'center', renderer: cssDefault, width: 110, dataIndex: 'AVERAGE'");
    $OBJECT_GRID->addColumn("header: '<b>" . ASSESSMENT . "</b>', align:'center', renderer: cssDefault, width: 110, dataIndex: 'ASSESSMENT'");
    
    $OBJECT_GRID->isObjectDefaultOnLoad = true;
    $OBJECT_GRID->baseParams = "
        start:0
        ,limit:100
        ,objectId:'".$trainingId."'
        ,subjectId:'".$subjectId."'
        ,studentId:'".$studentId."'
        ,cmd: 'jsonStudentSubjectAssignment'
    ";
    
    /* @soda */
    switch(UserAuth::getUserType()){
        case "SUPERADMIN":
        case "ADMIN":
        case 'INSTRUCTOR':
        case 'TEACHER':
                $OBJECT_GRID->addTBarItems("tbar.add('-');");    
                $OBJECT_GRID->addTBarItems("
                    tbar.add([{
                        text: '".SCORE."'
                        ,iconCls:'icon-database'
                        ,menu:[{
                            id: 'IMPORT_FIRST_SEMESTER'
                            ,disabled: ".$option."
                            ,text: 'Excel'
                            ,iconCls:'icon-page_excel'    
                            ,menu:[{
                                text: '".IMPORT_FROM_EXCEL."'
                                ,disabled: false
                                ,iconCls:'icon-database_go'
                                ,scope:this
                                ,handler: function(){
                                    var goURL = '/evaluation/importassignmentxls/?objectId=".$trainingId."&subjectId=".$subjectId."&teacherId=".$teacherId."&studentId=".$studentId."&target=training';
                                    openWinIFrame('".IMPORT_FROM_EXCEL."', goURL, 500, 200);
                                }
                            },{                                                                                                               
                                text: '".EXPORT_TO_EXCEL."'
                                ,disabled: false
                                ,iconCls:'icon-page_save'
                                ,scope:this
                                ,handler: function(){
                                    window.location ='/evaluation/subjectscoreenterexport/?objectId=".$trainingId."&subjectId=".$subjectId."&studentId=".$studentId."&teacherId=".$teacherId."&target=training&type=subjectscoreentertraininguniversity';
                                }
                            }]
                        },{
                            text: '".PRINTER."'
                            ,disabled: false
                            ,iconCls:'icon-printer'
                            ,scope:this
                            ,handler: function(){
                                openWinIFrame('".EXPORT_TO_EXCEL."','/export/subjectscore/?objectId=".$trainingId."&subjectId=".$subjectId."&studentId=".$studentId."&target=subjectresultentertraining&type=subjectscoreentertraininguniversity',500,370);
                            }
                        }]
                    }]);
                ");
            break;  
    }
    /* --- */
    $OBJECT_GRID->setSaveParams("
        cmd: 'actionTrainingStudentAssignment'
        ,subjectId:'".$subjectId."'
    ");

    $CALLBACK_DATA = "";
    if($ENTRIES_ASSIGNMENT){
        foreach($ENTRIES_ASSIGNMENT as $key=>$value){
            $CALLBACK_DATA .= "if (jsonData.data.ASSIGNMENT_".$value->ID.") e.record.set('ASSIGNMENT_".$value->ID."',jsonData.data.ASSIGNMENT_".$value->ID.");";
        }
    }
    
    $CALLBACK_DATA .= "if (jsonData.data.AVERAGE) e.record.set('AVERAGE',jsonData.data.AVERAGE);";
    
    $OBJECT_GRID->setAftereditCallback($CALLBACK_DATA);
        
    $OBJECT_GRID->isGridEditing = true;
    $OBJECT_GRID->forceFit = "false";
    $OBJECT_GRID->renderJS();
    
    $VIEWPORT->viewportLayout = "Normal";
    $VIEWPORT->collapsible = "false";
    
    $TBAR_ITEMS = "";
    $TBAR_ITEMS .= "text:'".CANCEL."'";
    $TBAR_ITEMS .= ",id:'CANCEL_ID'";
    $TBAR_ITEMS .= ",iconCls:'icon-cancel'";
    $TBAR_ITEMS .= ",handler: function(){window.parent.Ext.getCmp('CENTER_CONTENT').getLayout().setActiveItem(0);}";
    $VIEWPORT->addViewportTbarItem($TBAR_ITEMS);
    
    $ITEMS = "xtype:'".$OBJECT_GRID->getObjectXtype()."'";
    $VIEWPORT->addItem($ITEMS);
    
    $VIEWPORT->renderJS();
    ?>
    var grid = Ext.getCmp('<?=$OBJECT_GRID->getObjectId()?>');
    grid.on('cellclick', function(grid, rowIndex, columnIndex, event) {
        
    });
});
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>