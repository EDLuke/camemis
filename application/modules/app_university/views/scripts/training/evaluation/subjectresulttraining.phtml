<?
////////////////////////////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 01.08.2014
// Am Stollheen 18, 55120 Mainz, Germany
////////////////////////////////////////////////////////////////////////////////

require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'clients/CamemisForm.php';
require_once 'include/Common.inc.php';
require_once 'utiles/Utiles.php';
require_once 'models/UserAuth.php';
require_once setUserLoacalization();

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$trainingObject = TrainingDBAccess::findTrainingFromId($this->trainingId);
$subjectObject = TrainingSubjectDBAccess::findSubjectTraining($this->subjectId, $trainingObject);

if(!$trainingObject) {header("Location: /main/permission/");exit;}

AssessmentConfig::setGradingScale();
$listGroups = TrainingAssessmentDBAccess::getTrainingListAssignmentScoreDate(
        $this->trainingId
        , $this->subjectId
        , true);

$listAssignments = TrainingAssessmentDBAccess::getTrainingListAssignmentScoreDate(
        $this->trainingId
        , $this->subjectId
        , false);

$setParams = "";
$setParams .="&trainingId=".$this->trainingId."";
$setParams .="&subjectId=".$this->subjectId."";

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();
?>

<style>
 @media screen and (-webkit-min-device-pixel-ratio:0) { 
    .x-grid3-cell, /* Normal grid cell */
    .x-grid3-gcell /* Grouped grid cell (esp. in head)*/
    {
        box-sizing: border-box;
    }
}
</style>

<script>
Ext.onReady(function() {
    
    function cssStatus(v, p, record){
        return String.format('<div style=\"font-weight:normal;padding:4px;height:18px;background:{1};color:{2};\">{0}</div>'
            ,v
            ,record.data['BG_COLOR']
            ,record.data['BG_COLOR_FONT']
        );
    }
    
    function cssDefault(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:normal; color:#333; padding:4px;height:18px;">' + value + '</div>';
    }
    
    function cssAssessment(value, metadata, record){
        var name = record.data.STUDENT;
        metadata.attr = 'ext:qtip="' + name + '"';
        return '<div style="font-weight:normal; color:#000; padding:4px;height:18px;background:#b8cfee">' + value + '</div>';
    }
    
    <?
    
    switch($subjectObject->SCORE_TYPE){
        case 1:
            $comboAssessment = "
                new Ext.form.ComboBox({
                    triggerAction:'all'
                    ,mode:'local'
                    ,store: new Ext.data.JsonStore({
                        autoDestroy: true
                        ,fields: ['chooseValue', 'chooseDisplay']
                        ,data:[".AssessmentConfig::comboGradingSystem(1, false)."]
                    })
                    ,valueField: 'chooseValue'
                    ,displayField: 'chooseDisplay'
                    ,editable: false
                    ,listeners: {
                        select: function(combo, record, index) {
                            replaceValue = combo.getValue();
                            var newDisplay = record.get('chooseDisplay');
                            combo.setValue(newDisplay);
                            comboValue = record.get('chooseValue');
                        }
                    }
                })
            ";
            break;
        case 2:
            ////////////////////////////////////////////////////////////////////
            $STORE_DATA = array();
            $scoresEntries = explode(',',$subjectObject->MAX_POSSIBLE_SCORE);
            $STORE_DATA[0] = "{chooseValue: '0', chooseDisplay: '---'}";
            if($scoresEntries){
                $i=0;
                foreach($scoresEntries as $value){
                    $j = $i+1;
                    //error_log($value);
                    $gradingObject = AssessmentConfig::getSQLGradingScale(trim($value), 2, "training", false);
                    if($gradingObject && trim($value)){
                        $STORE_DATA[$j] = ",{chooseValue: '".$gradingObject->ID."', chooseDisplay: '".trim($value)."'}";
                    }
                    $i++;
                }
            }

            $comboAssessment = "
                new Ext.form.ComboBox({
                    triggerAction:'all'
                    ,mode:'local'
                    ,store: new Ext.data.JsonStore({
                            autoDestroy: true
                            ,fields: ['chooseValue', 'chooseDisplay']
                            ,data:[".implode($STORE_DATA)."]
                        })
                    ,valueField: 'chooseValue'
                    ,displayField: 'chooseDisplay'
                    ,editable: false
                    ,listeners: {
                        select: function(combo, record, index) {
                            replaceValue = combo.getValue();
                            var newDisplay = record.get('chooseDisplay');
                            combo.setValue(newDisplay);
                            comboValue = replaceValue;
                        }
                    }
                })
            ";
        break;
    }

    $CATEGORY_ROW = "";
    $CATEGORY_ROW .= "{header: '<b>".PERSONAL_INFORMATION."</b>', colspan: 4, align: 'center'}";
    
    switch($subjectObject->SCORE_TYPE){
        case 1:
            $CATEGORY_ROW .= ",{header: '<b>".ASSESSMENT_INFORMATION."</b>', colspan: 3, align: 'center'}";
            break;
        default:
            $CATEGORY_ROW .= ",{header: '<b>".ASSESSMENT_INFORMATION."</b>', colspan: 1, align: 'center'}";
            break;
    }
    
    if ($listAssignments) $CATEGORY_ROW .= ",{header: '<b>".ASSIGNMENT."</b>', colspan:".count($listAssignments).", align: 'center'}";
    
    $GROUP_ROW = "";
    $GROUP_ROW .= "{header: '&nbsp;', colspan: 1, align: 'center'}";
    $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
    $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
    $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
    
    switch($subjectObject->SCORE_TYPE){
        case 1:
            $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
            $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
            $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
            break;
        default:
            $GROUP_ROW .= ",{header: '&nbsp;', colspan: 1, align: 'center'}";
            break;
    }
    
    $COEFF_VALUE = "";
    if($listGroups){
        foreach($listGroups as $value){
            $assignmentObject = TrainingAssessmentDBAccess::getTrainingSubjectAssignment($trainingObject->PARENT, $this->subjectId, $value->ID);
            if($assignmentObject){
                $COEFF_VALUE = $assignmentObject->COEFF_VALUE?$assignmentObject->COEFF_VALUE:1;
            }
            $DISPLAY = $trainingObject->EVALUATION_TYPE?"$value->SHORT (".$COEFF_VALUE."%)":"$value->SHORT (".$COEFF_VALUE.")";
            $colspan =  TrainingAssessmentDBAccess::getAssignmentCountScoreDate($value->ID, $this->trainingId, $this->subjectId);
            $GROUP_ROW .= ",{header: '".$DISPLAY."', colspan: ".$colspan.", align: 'center'}";
        }
    }
    
    $FIELDS = "";
    $FIELDS .= "{name: 'ID'}";
    $FIELDS .= ",{name: 'STATUS_KEY'}";
    $FIELDS .= ",{name: 'BG_COLOR'}";
    $FIELDS .= ",{name: 'BG_COLOR_FONT'}";
    $FIELDS .= ",{name: 'STATUS_KEY'}";
    $FIELDS .= ",{name: 'STUDENT'}";
    $FIELDS .= ",{name: 'GENDER'}";
    
    switch($subjectObject->SCORE_TYPE){
        case 1:
            $FIELDS .= ",{name: 'RANK'}";
            $FIELDS .= ",{name: 'ASSESSMENT'}";
            $FIELDS .= ",{name: 'AVG'}";
            break;
        default:
            $FIELDS .= ",{name: 'ASSESSMENT'}";
            break;
    }
    
    if($listAssignments){
        foreach($listAssignments as $value){
            $FIELDS .= ",{name: 'A_".$value->OBJECT_ID."'}";
        }
    }
    
    $COLUMNS = "";
    $COLUMNS .= "new Ext.grid.RowNumberer()";
    $COLUMNS .= ",{dataIndex: 'STATUS_KEY', header: '<b>".STATUS."</b>', width:90, renderer:cssStatus, align:'center',sortable: true}";
    $COLUMNS .= ",{dataIndex: 'STUDENT', header: '<b>".FULL_NAME."</b>', width:130,sortable: true, renderer:cssDefault}";
    $COLUMNS .= ",{dataIndex: 'GENDER', header: '<b>".GENDER."</b>', width:80,sortable: true,align:'center',renderer:cssDefault}";
    
    switch($subjectObject->SCORE_TYPE){
        case 1:
            $COLUMNS .= ",{dataIndex: 'RANK', header: '<b>".RANK."</b>', width: 80 ,align: 'center',sortable: true,renderer:cssAssessment}";
            $COLUMNS .= ",{header: '<b>".ASSESSMENT."</b>'
                , width: 100
                , align: 'center'
                , sortable: true
                , dataIndex: 'ASSESSMENT'
                , renderer:cssAssessment
                , editor: ".$comboAssessment."}
            ";
            $AVG_TITLE = $trainingObject->EVALUATION_TYPE?"AVG%":"AVG";
            $COLUMNS .= ",{dataIndex: 'AVG', header: '<b>".$AVG_TITLE."</b>', width: 80 ,align: 'center',sortable: true,renderer:cssAssessment}";
            break;
        default:
            $COLUMNS .= ",{dataIndex: 'ASSESSMENT', header: '<b>".ASSESSMENT."</b>', width: 100 ,align: 'center',sortable: true,renderer:cssAssessment}";
            break;
    }
    
    if($listAssignments){
        foreach($listAssignments as $value){
            $COLUMNS .= ",{dataIndex:'A_".$value->OBJECT_ID."',header:'".getShowDate($value->SCORE_INPUT_DATE)."',width:100,align:'center',renderer:cssDefault}"; 
        }
    }
    
    $html = "";
    $html .="var categoryGroupRow = [".$CATEGORY_ROW."];";
    $html .= "var groupRow = [".$GROUP_ROW."];";
    $html .= "var fields =  [".$FIELDS."];";
    $html .= "var columns = [".$COLUMNS."];";
    
    $html .= "var group = new Ext.ux.grid.ColumnHeaderGroup({rows: [categoryGroupRow,groupRow]});";
    
    $html .= "var myStore = new Ext.data.Store({";
        $html .= "proxy: new Ext.data.HttpProxy({url:'/training/jsonload/', method: 'POST'})";
        $html .= ",baseParams:{";
            $html .= "start:0";
            $html .= ",limit:100";
            $html .= ",cmd:'jsonSubjectResultTraining'";
            $html .= ",camIds: '".$this->urlEncryp->encryptedGet($setParams)."'";
        $html .= "}";
        $html .= ",reader:new Ext.data.JsonReader({";
            $html .= "id:'NAME'";
            $html .= ",totalProperty:'totalCount'";
            $html .= ",root:'rows'";
            $html .= ",fields:fields";
        $html .= "})";
    $html .= "});";
    
    $html .= "var grid = new Ext.grid.EditorGridPanel({";
        $html .= "tbar:[{";
            $html .= "text: '<b>".REFRESH."</b>'";
            $html .= ",iconCls:'icon-reload'";
            $html .= ",handler: function(){";
                $html .= "".CamemisPage::setRequestURI(false)."";
            $html .= "}";
            
        switch($subjectObject->SCORE_TYPE){
            case 1:
                $html .= "},'-',{";
                $html .= "text: '<b>".PUBLISH_SCORE."</b>'";
                $html .= ",iconCls:'icon-lightning_add'";
                $html .= ",handler: function(){";
                    $html .= "Ext.MessageBox.show({";
                        $html .= "msg: '".SAVING_YOUR_DATA_PLEASE_WAIT."',";
                        $html .= "progressText: 'Saving...',";
                        $html .= "width:300,";
                        $html .= "wait:true,";
                        $html .= "waitConfig: {interval:200},";
                        $html .= "icon:'ext-mb-download'";
                    $html .= "});";
                    $html .= "Ext.Ajax.request({";
                        $html .= "url: '/training/jsonsave/'";
                        $html .= ",method: 'POST'";
                        $html .= ",params:{";
                            $html .= "cmd: 'jsonActionPublishTrainingSubjectAssessment'";
                            $html .= ",camIds: '".$this->urlEncryp->encryptedGet($setParams)."'";
                        $html .= "}";
                        $html .= ",success: function() {";
                            $html .= "Ext.MessageBox.hide();";
                            $html .= "grid.store.load();";
                        $html .= "}";
                    $html .= "});";
                $html .= "}";
            break;
        }
        
        //Task for Ratha
        $html .= "},'-',{";
            $html .= "text: '<b>".EXPORT_TO_EXCEL."</b>'";
            $html .= ",iconCls:'icon-page_excel'";
            $html .= ",disabled:true";
            $html .= ",handler: function(){}";
        $html .= "";
            
        $html .= "}]";
        
        $html .= ",loadMask: new Ext.LoadMask(Ext.getBody(), {msg:'<b>CAMEMIS " . LOADING . "</b>', msgCls:'x-mask-loading-camemis'})";
        $html .= ",clicksToEdit:1";
        $html .= ",border:true";
        $html .= ",store: myStore";
        $html .= ",columns: columns";
        $html .= ",viewConfig: {";
            $html .= "forceFit: false";
        $html .= "}";
        
        $html .= ",plugins: group";
        
        $html .= ",listeners: {";
            $html .= "afteredit: function (e){";
                $html .= "Ext.Ajax.request({";
                    $html .= "url: '/training/jsonsave/'";
                    $html .= ",method: 'POST'";
                    $html .= ",params: {";
                            $html .= "cmd:'jsonActionStudentSubjectAssessmentTraining'";
                            $html .= ",camIds: '".$this->urlEncryp->encryptedGet($setParams)."'";
                            $html .= ",id:e.record.get('ID')";
                            $html .= ",avg:e.record.get('AVG')";
                            $html .= ",rank:e.record.get('RANK')";
                            $html .= ",field: e.field";
                            $html .= ",newValue: e.value";
                            $html .= ",comboValue:comboValue";
                    $html .= "}";
                    $html .= ",success: function (result, request ) {";
                        $html .= "XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."');";
                        $html .= "jsonData = Ext.util.JSON.decode(result.responseText);";
                        $html .= "if (jsonData.data.AVGR) e.record.set('AVGR',jsonData.data.AVGR);";
                        $html .= "grid.getStore().commitChanges();";
                    $html .= "}";
                $html .= "});";
            $html .= "}";
        $html .= "}";
        $html .= ",bbar:new Ext.PagingToolbar({";
            $html .= "store:myStore";
            $html .= ",displayInfo:true";
            $html .= ",pageSize:100";
        $html .= "})";
    $html .= "});";
    $html .= "grid.store.reload();";
    
    $html .= "viewport = new Ext.Viewport({";
        $html .= "layout: 'fit'";
        $html .= ",border: false";
        $html .= ",items:[{";
            $html .= "layout:'fit'";
            $html .= ",border: false";
            $html .= ",items:[grid]";
        $html .= "}]";
    $html .= "});";
    
    echo $html;
    
    $CONTEXTMENU_ITEMS = array();
    $TEACHER_COMMENTS ="{";
    $TEACHER_COMMENTS .="text: '".TEACHER_COMMENTS." &raquo; ' + record.data.STUDENT";
    $TEACHER_COMMENTS .=",iconCls: 'icon-comments_add'";
    $TEACHER_COMMENTS .=",disabled:false";
    $TEACHER_COMMENTS .=",handler: function(){";
    $TEACHER_COMMENTS .="openWinIFrame('".TEACHER_COMMENTS." &raquo; ' + record.data.STUDENT,'/evaluation/teachercomment/?camIds=".$this->urlEncryp->encryptedGet($setParams)."&studentId=' + record.data.ID, 600,percentHeight(85));";
    $TEACHER_COMMENTS .="}";
    $TEACHER_COMMENTS .="}";
    
    //$CONTEXTMENU_ITEMS[] = $TEACHER_COMMENTS;
    
    $CHOOSE_CONTEXTMENU_ITEMS = implode(",",$CONTEXTMENU_ITEMS);
    if($CONTEXTMENU_ITEMS){
        $js = "";
        $js .="if (grid) grid.on('cellclick', function(grid, rowIndex, columnIndex, event) {";
            $js .="if(columnIndex<=2){";
                $js .="var record = grid.store.getAt(rowIndex);";
                $js .="var contextMenu = new Ext.menu.Menu({";
                $js .="items: [".$CHOOSE_CONTEXTMENU_ITEMS."]";
                $js .="});";
                $js .="event.stopEvent();";
                $js .="contextMenu.showAt(event.xy);"; 
            $js .="}";
        $js .="});";
        echo $js;
    }
    
    ?>
});
</script>

<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>