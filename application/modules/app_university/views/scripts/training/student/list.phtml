<?
///////////////////////////////////////////////////////////
// @Kaom Vibolrith Senior Software Developer
// Date: 07.03.2012
// Am Stollheen 18, 55120 Mainz, Germany
///////////////////////////////////////////////////////////
require_once 'clients/CamemisPage.php';
require_once 'clients/CamemisField.php';
require_once 'clients/CamemisBar.php';
require_once 'clients/CamemisGrid.php';
require_once 'clients/CamemisForm.php';
require_once 'clients/CamemisTree.php';
require_once 'include/Common.inc.php';
require_once 'utiles/Utiles.php';
require_once setUserLoacalization();

$REMOVE_RIGHT=UserAuth::getACLValue("ACADEMIC_TRAINING_PROGRAMS_REMOVE_RIGHT")?"false":"true";
$EDIT_RIGHT=UserAuth::getACLValue("ACADEMIC_TRAINING_PROGRAMS_EDIT_RIGHT")?"false":"true";
$EXECUTE_RIGHT=UserAuth::getACLValue("ACADEMIC_TRAINING_PROGRAMS_EXECUTE_RIGHT")?"false":"true";

$CAMEMIS_PAGE_OBJECT = CamemisPage::getInstance();

$ADD_STUDENTS_GRID = new CamemisGrid("TRAINING", "SEARCH");
$ADD_STUDENTS_GRID->setLoadUrl("/training/jsonload/");
$ADD_STUDENTS_GRID->setSaveUrl("/training/jsonsave/");

$OBJECT_GRID = new CamemisGrid("TRAINING", "LIST");
$OBJECT_GRID->setLoadUrl("/training/jsonload/");
$OBJECT_GRID->setSaveUrl("/training/jsonsave/");

$columndata = Utiles::getGridColumnData("TRAINING_LIST_ID");

print $CAMEMIS_PAGE_OBJECT->showCamemisHeader();

function generatedPassword($parentId){
    $js = "";
    $js .= "window.parent.Ext.MessageBox.show({";
    $js .= "title:'" . WARNING . "'";
    $js .= ",width: 350";
    $js .= ",msg: '" . MSG_GENERATE_PASSWORDS . "'";
    $js .= ",buttons: Ext.MessageBox.YESNOCANCEL";
    $js .= ",icon: Ext.MessageBox.WARNING";
    $js .= ",fn: function(btn, text){
        if (btn == 'yes'){
            Ext.Ajax.request({
                url: '/student/jsonsave/'
                ,method: 'POST'
                ,params: {cmd: 'actionGeneratePassword',trainingId:'".$parentId."'}
                ,success: function(response, options) {XMsg('".STATUS."','".ACTION_SUCCESSFULLY_SAVED."'); }
                ,failure: function(response, options) {}
            });
        }
    }";
    $js .= "});";

    return $js;
}

function deleteStudent($OBJECT_GRID, $trainingId){

    $js = "";
    $js .= "window.parent.Ext.MessageBox.show({";
    $js .= "title:'" . STATUS . "'";
    $js .= ",width: 350";
    $js .= ",msg: '" . DELETE_THIS_ITEM . "'";
    $js .= ",buttons: Ext.MessageBox.YESNOCANCEL";
    $js .= ",icon: Ext.MessageBox.WARNING";
    $js .= ",fn: function(btn, text){
        if (btn == 'yes'){
            Ext.Ajax.request({
                url: '/training/jsonsave'
                ,method: 'POST'
                ,params: {cmd: 'actionRemoveStudentTraining',chooseId:chooseId, trainingId:'".$trainingId."'}
                ,success: function(response, options) {
                    XMsg('".STATUS."','".WAR_REMOVED_SUCCESSFULLY."');
                    Ext.getCmp('" . $OBJECT_GRID->getObjectId() . "').store.reload();
                }
                ,failure: function(response, options) {}
            });
        }
    }";
    $js .= "});";

    return $js;
}

?>
<style>
    span.showTitle {
        font-weight:bold;
        color:#333;
    }
    span.showText {
        font-weight:normal;
        color:#333;
        white-space:normal;
    }
    
    .filter-row-grid .x-grid3-header {
        background: #f9f9f9 url(/public/images/filter-row-hrow.gif) repeat-x left top;
    }

    .filter-row-grid .filter-row-header {
        height: 26px;
    }

    tr.filter-row-header .filter-row-icon input {
        background-image: url(/public/images/filter-row-icon.png);
        background-repeat: no-repeat;
        padding-left: 16px;
    }
</style>
<script>

    var chooseId;
    Ext.onReady(function() {

        function cssStatus(v, p, record){
            return String.format('<div style=\"font-weight:bold;padding:4px;background:{1};color:{2};\">{0}</div>'
                ,v
                ,record.data['BG_COLOR']
                ,record.data['BG_COLOR_FONT']
            );
        }
        
        function cssDefault(value, metadata, record){
            var name = record.data.STUDENT;
            metadata.attr = 'ext:qtip="' + name + '"';
            return '<div style="font-weight:normal; color:#000; padding: 5px; height:15px; background:#FFF;">' + value + '</div>';
        }
        
        <?
        $CAMEMIS_PAGE_OBJECT->setCostumerCSS();
        $CAMEMIS_PAGE_OBJECT->setExtDefaultGif();

        $ADD_STUDENTS_GRID->addCellRenderer("
            function renderText(v, p, record, rowIndex){
                var str = '<span class=spanText>' + v + '</span>';
                return str;
            }
        ");

        $ADD_STUDENTS_GRID->addReadField("name: 'STUDENT_ID'");
        $ADD_STUDENTS_GRID->addReadField("name: 'CODE'");
        $ADD_STUDENTS_GRID->addReadField("name: 'STUDENT'");
        $ADD_STUDENTS_GRID->addReadField("name: 'DATE_BIRTH'");
        $ADD_STUDENTS_GRID->addReadField("name: 'GENDER'");
        $ADD_STUDENTS_GRID->addReadField("name: 'CURRENT_CLASS'");

        $ADD_STUDENTS_GRID->addColumn("
            xtype: 'checkboxcolumn'
            ,header: ''
            ,dataIndex: 'ASSIGNED'
            ,width: 50
            ,on: 1
            ,off: 0
        ");

        $ADD_STUDENTS_GRID->addColumn("header: '<b>" . CODE_ID . "</b>', align:'left', width: 80, dataIndex: 'CODE',filter:{}");
        $ADD_STUDENTS_GRID->addColumn("header: '<b>" . STUDENT . "</b>', align:'left', width: 200,sortable: true, dataIndex: 'STUDENT',filter:{}");
        $ADD_STUDENTS_GRID->addColumn("header: '<b>" . GENDER . "</b>', width: 100, sortable: true, dataIndex: 'GENDER',filter:{}");
        $ADD_STUDENTS_GRID->addColumn("header: '<b>" . DATE_BIRTH . "</b>', width: 100, sortable: true, dataIndex: 'DATE_BIRTH',filter:{}");
        $ADD_STUDENTS_GRID->addColumn("header: '<b>" . CURRENT_CLASS . "</b>', width: 100, sortable: true, dataIndex: 'CURRENT_CLASS',filter:{}");

        $ADD_STUDENTS_GRID->baseParams = "
            start:0
            ,limit:100
            ,objectId: '".$this->objectId."'
            ,cmd: 'jsonListStudentInSchool'
        ";
        $ADD_STUDENTS_GRID->setSaveParams("
            cmd: 'actionStudentToTraining'
            ,objectId: '".$this->objectId."'
        ");
        $ADD_STUDENTS_GRID->setAftereditCallback("
            Ext.getCmp('" . $ADD_STUDENTS_GRID->getObjectId() . "').store.reload();
            Ext.getCmp('" . $OBJECT_GRID->getObjectId() . "').store.reload();
        ");
        
        $ADD_STUDENTS_GRID->addTBarItems("
            tbar.add('-','<b>".START_DATE."</b>&nbsp;',[{
                xtype:'datefield'
                ,width:100
                ,id:'START_DATE'
                ,name: 'START_DATE'
                ,format: '".setExtDatafieldFormat()."'
                
            }]);
        ");
        
        $ADD_STUDENTS_GRID->addTBarItems("
            tbar.add('-','<b>".END_DATE."</b>&nbsp;',[{
                xtype:'datefield'
                ,width:100
                ,id:'END_DATE'
                ,name: 'END_DATE'
                ,format: '".setExtDatafieldFormat()."'
                
            }]);
        ");
        
        $ADD_STUDENTS_GRID->addTBarItems("
            tbar.add([{
                id: 'FIND_ID'
                ,text: '".FIND."'
                ,iconCls:'icon-magnifier'
                ,scope:this
                ,handler: function(){
                    if(Ext.getCmp('END_DATE').getValue())
                    Ext.getCmp('".$ADD_STUDENTS_GRID->getObjectId()."').getStore().setBaseParam('startDate',Ext.getCmp('START_DATE').getValue().format('".setExtDatafieldFormat()."'));
                    if(Ext.getCmp('END_DATE').getValue())
                    Ext.getCmp('".$ADD_STUDENTS_GRID->getObjectId()."').getStore().setBaseParam('endDate',Ext.getCmp('END_DATE').getValue().format('".setExtDatafieldFormat()."'));
                    Ext.getCmp('".$ADD_STUDENTS_GRID->getObjectId()."').store.reload();   
                }
            }]);
        ");
    
        $ADD_STUDENTS_GRID->addTBarItems("
            tbar.add('->');
        ");
        
        $ADD_STUDENTS_GRID->isQuickySearch = true;
        $ADD_STUDENTS_GRID->isGridEditing = true;
        $ADD_STUDENTS_GRID->isObjectDefaultOnLoad = false;
        $ADD_STUDENTS_GRID->forceFit = "false";
        $ADD_STUDENTS_GRID->isFilterRow = true;
        $ADD_STUDENTS_GRID->renderJS();

        $OBJECT_GRID->addCellRenderer("
            function renderText(v, p, record, rowIndex){
                var str = '<span class=spanText>' + v + '</span>';
                return str;
            }
        ");

        $OBJECT_GRID->addReadField("name: 'BG_COLOR'");
        $OBJECT_GRID->addReadField("name: 'BG_COLOR_FONT'");
        $OBJECT_GRID->addReadField("name: 'STATUS_KEY'");
        $OBJECT_GRID->addReadField("name: 'STUDENT_ID'");
        $OBJECT_GRID->addReadField("name: 'CODE'");
        $OBJECT_GRID->addReadField("name: 'STUDENT'");
        $OBJECT_GRID->addReadField("name: 'PHONE'");
        $OBJECT_GRID->addReadField("name: 'EMAIL'");
        $OBJECT_GRID->addReadField("name: 'MOBIL_PHONE'");
        $OBJECT_GRID->addReadField("name: 'DATE_BIRTH'");
        $OBJECT_GRID->addReadField("name: 'GENDER'");
        $OBJECT_GRID->addReadField("name: 'SORTKEY'");
        $OBJECT_GRID->addReadField("name: 'TRAINING_NAME'");
        $OBJECT_GRID->addReadField("name: 'LEVEL_NAME'");
        $OBJECT_GRID->addReadField("name: 'TERM_NAME'");

        switch(Zend_Registry::get('SYSTEM_LANGUAGE')){
            case "VIETNAMESE": $width = 100;break;
            default: $width = 85;break;
        }

        $OBJECT_GRID->addColumn("header: '<b>".STATUS."</b>', align:'center', width: ".$width.", hidden:".checkColHidden(1, $columndata).", renderer:cssStatus, sortable: true, dataIndex: 'STATUS_KEY',filter:{}");
        $OBJECT_GRID->addColumn("header: '<b>" . CODE_ID . "</b>', width: 80, hidden:".checkColHidden(1, $columndata).", renderer: cssDefault, sortable: false, dataIndex: 'CODE'");
        $OBJECT_GRID->addColumn("header: '<b>" . FULL_NAME . "</b>', width: 180, hidden:".checkColHidden(2, $columndata).", renderer: cssDefault, sortable: true, dataIndex: 'STUDENT'");
        $OBJECT_GRID->addColumn("header: '<b>" . GENDER . "</b>', width: 110, hidden:".checkColHidden(3, $columndata).", renderer:cssDefault, sortable: true, dataIndex: 'GENDER'");
        $OBJECT_GRID->addColumn("header: '<b>" . DATE_BIRTH . "</b>', width: 120, hidden:".checkColHidden(4, $columndata).", renderer:cssDefault, sortable: true, dataIndex: 'DATE_BIRTH'");
        $OBJECT_GRID->addColumn("header: '<b>" . PHONE . "</b>', width: 150, hidden:".checkColHidden(5, $columndata).", renderer:cssDefault, sortable: true, dataIndex: 'PHONE'");
        $OBJECT_GRID->addColumn("header: '<b>" . EMAIL . "</b>', width: 200, hidden:".checkColHidden(6, $columndata).", renderer:cssDefault, sortable: true, dataIndex: 'EMAIL'");  
        
        switch($this->facette->OBJECT_TYPE){
            case "CLASS":
                if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT"))
                $OBJECT_GRID->addTBarItems("
                    tbar.add([{
                        id: 'ADD_STUDENT_ID'
                        ,tooltip: '" . ADD_STUDENTS . "'
                        ,text: '".ADD_STUDENTS."'
                        ,iconCls:'icon-application_form_add'
                        ,scope:this
                        ,disabled: false
                        ,handler: function(){
                            openWinXType('WinXType','".ADD_STUDENTS."', '".$ADD_STUDENTS_GRID->getObjectXType()."',percentWidth(80),percentHeight(85));
                            Ext.getCmp('".$ADD_STUDENTS_GRID->getObjectId()."').store.load();
                        }
                    }]);
                ");
                
                //@CHHE Vathana
                if(UserAuth::getACLValue("ACADEMIC_TRAINING_PROGRAMS_EXECUTE_RIGHT")){
                    $OBJECT_GRID->addTBarItems("
                        tbar.add(['->',{
                            text: '" . EXPORT_TO_EXCEL . "'
                            ,id: 'EXPORT_TO_EXCEL'
                            ,iconCls:'icon-page_excel'
                            ,handler: function(){
                            Ext.MessageBox.show({
                                msg: '".SAVING_YOUR_DATA_PLEASE_WAIT."',
                                progressText: 'Saving...',
                                width:300,
                                wait:true,
                                waitConfig: {interval:200},
                                icon:'ext-mb-download'
                            });
                            Ext.Ajax.request({
                                url: '/export/jsonexcel/'
                                ,method: 'POST'
                                ,params:{
                                    cmd: 'enrolledstudenttrainingonclass'
                                    ,gridId: '".$OBJECT_GRID->getObjectId()."'
                                    ,objectId: '".$this->objectId."'
                                            
                                        }
                                ,success: function(response, options) {
                                    Ext.MessageBox.hide();
                                    window.location='/export/openenrolledstudenttrainingonclass/'
                                        }
                                    });
                                }
                            }]);
                        ");
                    } 
                    //End...
                    
                break;
            case "TERM":
            
                $OBJECT_GRID->addTBarItems("
                    tbar.add([{
                        id: 'GENERATE_PASSWORDS'
                        ,iconCls:'icon-key_add'
                        ,text: '".GENERATE_PASSWORDS."'
                        ,handler: function(){
                            ".generatedPassword($this->objectId)."
                        }
                    }]);
                ");
                
                //@CHHE Vathana
                if(UserAuth::getACLValue("ACADEMIC_TRAINING_PROGRAMS_EXECUTE_RIGHT")){
                    $OBJECT_GRID->addTBarItems("
                        tbar.add(['->',{
                            text: '" . EXPORT_TO_EXCEL . "'
                            ,id: 'EXPORT_TO_EXCEL'
                            ,iconCls:'icon-page_excel'
                            ,handler: function(){
                                Ext.MessageBox.show({
                                    msg: '".SAVING_YOUR_DATA_PLEASE_WAIT."',
                                    progressText: 'Saving...',
                                    width:300,
                                    wait:true,
                                    waitConfig: {interval:200},
                                    icon:'ext-mb-download'
                                });
                                Ext.Ajax.request({
                                    url: '/export/jsonexcel/'
                                    ,method: 'POST'
                                    ,params:{
                                        cmd: 'enrolledstudenttrainingonterm'
                                        ,gridId: '".$OBJECT_GRID->getObjectId()."'
                                        ,objectId: '".$this->objectId."'
                                    }
                                    ,success: function(response, options) {
                                        Ext.MessageBox.hide();
                                        window.location='/export/openenrolledstudenttrainingonterm/'
                                    }
                                });
                            }
                        }]);
                    ");
                } 
                //End...        
                break;
        }
        
        $OBJECT_GRID->isQuickySearch = true;
        $OBJECT_GRID->isObjectDefaultOnLoad = true;
        $OBJECT_GRID->baseParams = "
            start:0
            ,limit:100
            ,objectId: '".$this->objectId."'
            ,cmd: 'jsonStudentTraining'
        ";
        
        $OBJECT_GRID->loadMask = false;
        $OBJECT_GRID->forceFit = "false";
        $OBJECT_GRID->setUserColumn = true;
        $OBJECT_GRID->renderJS();

        ?>
        viewport = new Ext.Viewport({
            layout: 'fit'
            ,border: false
            ,items:[{
                border: false
                ,id:'center'
                ,layout: 'card'
                ,activeItem: 0
                ,items: [{xtype: '<?=$OBJECT_GRID->getObjectXType(); ?>'}]
            }]
        });
        <?
        $CONTEXT_ITEMS = array();
        $DETAIL_INFORMATION = "
        {
            text: '".SHOW_DETAIL." &raquo; ' + record.data.STUDENT
            ,iconCls:'icon-application_form_magnify'
            ,handler:function(){
                contextMenu.hide();clickOpenPage('center','','/student/studentmonitor/?&target=".camemisId()."&objectId=' + record.data.STUDENT_ID + '&noSudentComboLsit=true');
            }
        }
        ";
        if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT"))
        $CONTEXT_ITEMS[] = $DETAIL_INFORMATION;

        $STUDENT_REMOVE_FROM_CLASS = "
        {
            text: '".REMOVE." &raquo; ' + record.data.STUDENT
            ,iconCls:'icon-delete'
            ,handler:function(){".deleteStudent($OBJECT_GRID,$this->objectId)."}
        }
        ";
        if(UserAuth::getACLValue("ACADEMIC_GENERAL_EDUCATION_EXECUTE_RIGHT"))
        $CONTEXT_ITEMS[] = $STUDENT_REMOVE_FROM_CLASS;

        //@veasna
        $SEND_MESSAGE ="
         {
            text: '".SEND." &raquo; ' + record.data.STUDENT
            ,iconCls: 'icon-email_add'
            ,disabled:true
            ,handler: function(){

            }
         }
        ";
        $CONTEXT_ITEMS[] =$SEND_MESSAGE;

        $ATTENDANCE ="
         {
            text: '".ATTENDANCE." &raquo; ' + record.data.STUDENT
            ,iconCls: 'icon-clock_edit'
            ,disabled:true
            ,handler: function(){

            }
         }
        ";
        $CONTEXT_ITEMS[] =$ATTENDANCE;

        $SEND_SMS ="
         {
            text: '".SMS_STUDENT." &raquo; ' + record.data.STUDENT
            ,iconCls: 'icon-email_add'
            ,disabled:true
            ,handler: function(){

            }
         }
        ";
        $CONTEXT_ITEMS[] =$SEND_SMS;
        //

        $DISCIPLINE ="
        {
            text: '".DISCIPLINE." &raquo; ' + record.data.STUDENT
            ,iconCls: 'icon-clock_edit'
            ,disabled:false
            ,handler: function(){
                clickOpenPage('center','".DISCIPLINE." &raquo; ' + record.data.STUDENT,'/discipline/bystudent?target=training&trainingId=".$this->objectId."&studentId=' + record.data.STUDENT_ID);
            }
        }
        ";
        $CONTEXT_ITEMS[] =$DISCIPLINE;
        //

        $CHOOSE_CONTEXT_ITEMS = implode(',', $CONTEXT_ITEMS);

        $js = "";
        $js .= "var myGrid = Ext.getCmp('".$OBJECT_GRID->getObjectId()."');";
        $js .= "if (myGrid) myGrid.on('cellclick', function(grid, rowIndex, columnIndex, event) {";
            $js .= "var record = grid.store.getAt(rowIndex);";
            $js .= "var chooseId = record.data.STUDENT_ID;";
            $js .= "var contextMenu = new Ext.menu.Menu({";
                $js .= "items: [".$CHOOSE_CONTEXT_ITEMS."]";
            $js .= "});";
            $js .= "event.stopEvent();";
            $js .= "contextMenu.showAt(event.xy);";
        $js .= "});";
        if ($CONTEXT_ITEMS) echo $js;

       ?>

       Ext.state.Manager.setProvider(new Ext.state.HttpProvider({url: '/dataset/jsonsave/'}));
    });
</script>
<?
print $CAMEMIS_PAGE_OBJECT->showCamemisFooter();
?>